[{"url":"http:\/\/underscores.org\/#each","title":"each","description":"_.each(list, iterator, [context]) Alias: forEach                                     Iterates over a list of elements, yielding each in turn to an iterator         function. The iterator is bound to the context object, if one is         passed. Each invocation of iterator is called with three arguments:         . If list is a JavaScript object, iterator's         arguments will be . Delegates to the native         forEach function if it exists."},{"url":"http:\/\/underscores.org\/#map","title":"map","description":"_.map(list, iterator, [context]) Alias: collect                                     Produces a new array of values by mapping each value in list         through a transformation function (iterator). If the native map method         exists, it will be used instead. If list is a JavaScript object,         iterator's arguments will be ."},{"url":"http:\/\/underscores.org\/#reduce","title":"reduce","description":"_.reduce(list, iterator, memo, [context]) Aliases: inject, foldl                                     Also known as inject and foldl, reduce boils down a         list of values into a single value. Memo is the initial state         of the reduction, and each successive step of it should be returned by         iterator. The iterator is passed four arguments: the ,         then the  and  (or key) of the iteration,         and finally a reference to the entire ."},{"url":"http:\/\/underscores.org\/#reduceRight","title":"reduceRight","description":"_.reduceRight(list, iterator, memo, [context]) Alias: foldr                                     The right-associative version of reduce. Delegates to the         JavaScript 1.8 version of reduceRight, if it exists. Foldr         is not as useful in JavaScript as it would be in a language with lazy         evaluation."},{"url":"http:\/\/underscores.org\/#find","title":"find","description":"_.find(list, iterator, [context]) Alias: detect                                     Looks through each value in the list, returning the first one that         passes a truth test (iterator). The function returns as         soon as it finds an acceptable element, and doesn't traverse the         entire list."},{"url":"http:\/\/underscores.org\/#filter","title":"filter","description":"_.filter(list, iterator, [context]) Alias: select                                     Looks through each value in the list, returning an array of all         the values that pass a truth test (iterator). Delegates to the         native filter method, if it exists."},{"url":"http:\/\/underscores.org\/#where","title":"where","description":"_.where(list, properties)                             Looks through each value in the list, returning an array of all         the values that contain all of the key-value pairs listed in properties."},{"url":"http:\/\/underscores.org\/#findWhere","title":"findWhere","description":"_.findWhere(list, properties)                             Looks through the list and returns the  value that matches         all of the key-value pairs listed in properties."},{"url":"http:\/\/underscores.org\/#reject","title":"reject","description":"_.reject(list, iterator, [context])                             Returns the values in list without the elements that the truth         test (iterator) passes. The opposite of filter."},{"url":"http:\/\/underscores.org\/#every","title":"every","description":"_.every(list, [iterator], [context]) Alias: all                                     Returns  if all of the values in the list pass the iterator         truth test. Delegates to the native method every, if present."},{"url":"http:\/\/underscores.org\/#some","title":"some","description":"_.some(list, [iterator], [context]) Alias: any                                     Returns  if any of the values in the list pass the         iterator truth test. Short-circuits and stops traversing the list         if a true element is found. Delegates to the native method some,         if present."},{"url":"http:\/\/underscores.org\/#contains","title":"contains","description":"_.contains(list, value) Alias: include                                     Returns  if the value is present in the list.         Uses indexOf internally, if list is an Array."},{"url":"http:\/\/underscores.org\/#invoke","title":"invoke","description":"_.invoke(list, methodName, [*arguments])                             Calls the method named by methodName on each value in the list.         Any extra arguments passed to invoke will be forwarded on to the         method invocation."},{"url":"http:\/\/underscores.org\/#pluck","title":"pluck","description":"_.pluck(list, propertyName)                             A convenient version of what is perhaps the most common use-case for         map: extracting a list of property values."},{"url":"http:\/\/underscores.org\/#max","title":"max","description":"_.max(list, [iterator], [context])                             Returns the maximum value in list. If iterator is passed,         it will be used on each value to generate the criterion by which the         value is ranked."},{"url":"http:\/\/underscores.org\/#min","title":"min","description":"_.min(list, [iterator], [context])                             Returns the minimum value in list. If iterator is passed,         it will be used on each value to generate the criterion by which the         value is ranked."},{"url":"http:\/\/underscores.org\/#sortBy","title":"sortBy","description":"_.sortBy(list, iterator, [context])                             Returns a sorted copy of list, ranked in ascending order by the         results of running each value through iterator. Iterator may         also be the string name of the property to sort by (eg. )."},{"url":"http:\/\/underscores.org\/#groupBy","title":"groupBy","description":"_.groupBy(list, iterator, [context])                             Splits a collection into sets, grouped by the result of running each         value through iterator. If iterator is a string instead of         a function, groups by the property named by iterator on each of         the values."},{"url":"http:\/\/underscores.org\/#countBy","title":"countBy","description":"_.countBy(list, iterator, [context])                             Sorts a list into groups and returns a count for the number of objects         in each group.         Similar to , but instead of returning a list of values,         returns a count for the number of values in that group."},{"url":"http:\/\/underscores.org\/#shuffle","title":"shuffle","description":"_.shuffle(list)                             Returns a shuffled copy of the list, using a version of the         ."},{"url":"http:\/\/underscores.org\/#toArray","title":"toArray","description":"_.toArray(list)                             Converts the list (anything that can be iterated over), into a         real Array. Useful for transmuting the arguments object."},{"url":"http:\/\/underscores.org\/#size","title":"size","description":"_.size(list)                             Return the number of values in the list."},{"url":"http:\/\/underscores.org\/#first","title":"first","description":"_.first(array, [n]) Alias: head, take                                     Returns the first element of an array. Passing n will         return the first n elements of the array."},{"url":"http:\/\/underscores.org\/#initial","title":"initial","description":"_.initial(array, [n])                             Returns everything but the last entry of the array. Especially useful on         the arguments object. Pass n to exclude the last n elements         from the result."},{"url":"http:\/\/underscores.org\/#last","title":"last","description":"_.last(array, [n])                             Returns the last element of an array. Passing n will return         the last n elements of the array."},{"url":"http:\/\/underscores.org\/#rest","title":"rest","description":"_.rest(array, [index]) Alias: tail, drop                                     Returns the rest of the elements in an array. Pass an index         to return the values of the array from that index onward."},{"url":"http:\/\/underscores.org\/#compact","title":"compact","description":"_.compact(array)                             Returns a copy of the array with all falsy values removed.         In JavaScript, , , , ,          and  are all falsy."},{"url":"http:\/\/underscores.org\/#flatten","title":"flatten","description":"_.flatten(array, [shallow])                             Flattens a nested array (the nesting can be to any depth). If you         pass shallow, the array will only be flattened a single level."},{"url":"http:\/\/underscores.org\/#without","title":"without","description":"_.without(array, [*values])                             Returns a copy of the array with all instances of the values         removed."},{"url":"http:\/\/underscores.org\/#union","title":"union","description":"_.union(*arrays)                             Computes the union of the passed-in arrays: the list of unique items,         in order, that are present in one or more of the arrays."},{"url":"http:\/\/underscores.org\/#intersection","title":"intersection","description":"_.intersection(*arrays)                             Computes the list of values that are the intersection of all the arrays.         Each value in the result is present in each of the arrays."},{"url":"http:\/\/underscores.org\/#difference","title":"difference","description":"_.difference(array, *others)                             Similar to without, but returns the values from array that         are not present in the other arrays."},{"url":"http:\/\/underscores.org\/#uniq","title":"uniq","description":"_.uniq(array, [isSorted], [iterator]) Alias: unique                                     Produces a duplicate-free version of the array, using  to test         object equality. If you know in advance that the array is sorted,         passing  for isSorted will run a much faster algorithm.         If you want to compute unique items based on a transformation, pass an         iterator function."},{"url":"http:\/\/underscores.org\/#zip","title":"zip","description":"_.zip(*arrays)                             Merges together the values of each of the arrays with the         values at the corresponding position. Useful when you have separate         data sources that are coordinated through matching array indexes.         If you're working with a matrix of nested arrays, zip.apply         can transpose the matrix in a similar fashion."},{"url":"http:\/\/underscores.org\/#object","title":"object","description":"_.object(list, [values])                             Converts arrays into objects. Pass either a single list of          pairs, or a list of keys, and a list of values."},{"url":"http:\/\/underscores.org\/#indexOf","title":"indexOf","description":"_.indexOf(array, value, [isSorted])                             Returns the index at which value can be found in the array,         or  if value is not present in the array. Uses the native         indexOf function unless it's missing. If you're working with a         large array, and you know that the array is already sorted, pass          for isSorted to use a faster binary search ... or, pass a number as         the third argument in order to look for the first matching value in the         array after the given index."},{"url":"http:\/\/underscores.org\/#lastIndexOf","title":"lastIndexOf","description":"_.lastIndexOf(array, value, [fromIndex])                             Returns the index of the last occurrence of value in the array,         or  if value is not present. Uses the native lastIndexOf         function if possible. Pass fromIndex to start your search at a         given index."},{"url":"http:\/\/underscores.org\/#sortedIndex","title":"sortedIndex","description":"_.sortedIndex(list, value, [iterator], [context])                             Uses a binary search to determine the index at which the value          be inserted into the list in order to maintain the list's         sorted order. If an iterator is passed, it will be used to compute         the sort ranking of each value, including the value you pass."},{"url":"http:\/\/underscores.org\/#range","title":"range","description":"_.range([start], stop, [step])                             A function to create flexibly-numbered lists of integers, handy for          and  loops. start, if omitted, defaults         to ; step defaults to . Returns a list of integers         from start to stop, incremented (or decremented) by step,         exclusive."},{"url":"http:\/\/underscores.org\/#bind","title":"bind","description":"_.bind(function, object, [*arguments])                             Bind a function to an object, meaning that whenever         the function is called, the value of  will be the object.         Optionally, pass arguments to the function to pre-fill them,         also known as partial application."},{"url":"http:\/\/underscores.org\/#bindAll","title":"bindAll","description":"_.bindAll(object, [*methodNames])                             Binds a number of methods on the object, specified by         methodNames, to be run in the context of that object whenever they         are invoked. Very handy for binding functions that are going to be used         as event handlers, which would otherwise be invoked with a fairly useless         . methodNames are required."},{"url":"http:\/\/underscores.org\/#partial","title":"partial","description":"_.partial(function, [*arguments])                             Partially apply a function by filling in any number of its arguments,          changing its dynamic  value. A close cousin         of ."},{"url":"http:\/\/underscores.org\/#memoize","title":"memoize","description":"_.memoize(function, [hashFunction])                             Memoizes a given function by caching the computed result. Useful         for speeding up slow-running computations. If passed an optional         hashFunction, it will be used to compute the hash key for storing         the result, based on the arguments to the original function. The default         hashFunction just uses the first argument to the memoized function         as the key."},{"url":"http:\/\/underscores.org\/#delay","title":"delay","description":"_.delay(function, wait, [*arguments])                             Much like setTimeout, invokes function after wait         milliseconds. If you pass the optional arguments, they will be         forwarded on to the function when it is invoked."},{"url":"http:\/\/underscores.org\/#defer","title":"defer","description":"_.defer(function, [*arguments])                             Defers invoking the function until the current call stack has cleared,         similar to using setTimeout with a delay of 0. Useful for performing         expensive computations or HTML rendering in chunks without blocking the UI thread         from updating. If you pass the optional arguments, they will be         forwarded on to the function when it is invoked."},{"url":"http:\/\/underscores.org\/#throttle","title":"throttle","description":"_.throttle(function, wait)                             Creates and returns a new, throttled version of the passed function,         that, when invoked repeatedly, will only actually call the original function         at most once per every wait         milliseconds. Useful for rate-limiting events that occur faster than you         can keep up with."},{"url":"http:\/\/underscores.org\/#debounce","title":"debounce","description":"_.debounce(function, wait, [immediate])                             Creates and returns a new debounced version of the passed function which         will postpone its execution until after         wait milliseconds have elapsed since the last time it         was invoked. Useful for implementing behavior that should only happen          the input has stopped arriving. For example: rendering a         preview of a Markdown comment, recalculating a layout after the window         has stopped being resized, and so on."},{"url":"http:\/\/underscores.org\/#once","title":"once","description":"_.once(function)                             Creates a version of the function that can only be called one time.         Repeated calls to the modified function will have no effect, returning         the value from the original call. Useful for initialization functions,         instead of having to set a boolean flag and then check it later."},{"url":"http:\/\/underscores.org\/#after","title":"after","description":"_.after(count, function)                             Creates a version of the function that will only be run after first         being called count times. Useful for grouping asynchronous responses,         where you want to be sure that all the async calls have finished, before         proceeding."},{"url":"http:\/\/underscores.org\/#wrap","title":"wrap","description":"_.wrap(function, wrapper)                             Wraps the first function inside of the wrapper function,         passing it as the first argument. This allows the wrapper to         execute code before and after the function runs, adjust the arguments,         and execute it conditionally."},{"url":"http:\/\/underscores.org\/#compose","title":"compose","description":"_.compose(*functions)                             Returns the composition of a list of functions, where each function         consumes the return value of the function that follows. In math terms,         composing the functions , , and  produces         ."},{"url":"http:\/\/underscores.org\/#keys","title":"keys","description":"_.keys(object)                             Retrieve all the names of the object's properties."},{"url":"http:\/\/underscores.org\/#values","title":"values","description":"_.values(object)                             Return all of the values of the object's properties."},{"url":"http:\/\/underscores.org\/#pairs","title":"pairs","description":"_.pairs(object)                             Convert an object into a list of  pairs."},{"url":"http:\/\/underscores.org\/#invert","title":"invert","description":"_.invert(object)                             Returns a copy of the object where the keys have become the values         and the values the keys. For this to work, all of your object's values         should be unique and string serializable."},{"url":"http:\/\/underscores.org\/#object-functions","title":"object-functions","description":"_.functions(object) Alias: methods                                     Returns a sorted list of the names of every method in an object \u2014         that is to say, the name of every function property of the object."},{"url":"http:\/\/underscores.org\/#extend","title":"extend","description":"_.extend(destination, *sources)                             Copy all of the properties in the source objects over to the         destination object, and return the destination object.         It's in-order, so the last source will override properties of the same         name in previous arguments."},{"url":"http:\/\/underscores.org\/#pick","title":"pick","description":"_.pick(object, *keys)                             Return a copy of the object, filtered to only have values for         the whitelisted keys (or array of valid keys)."},{"url":"http:\/\/underscores.org\/#omit","title":"omit","description":"_.omit(object, *keys)                             Return a copy of the object, filtered to omit the blacklisted         keys (or array of keys)."},{"url":"http:\/\/underscores.org\/#defaults","title":"defaults","description":"_.defaults(object, *defaults)                             Fill in undefined properties in object with values from the         defaults objects, and return the object. As soon as the         property is filled, further defaults will have no effect."},{"url":"http:\/\/underscores.org\/#clone","title":"clone","description":"_.clone(object)                             Create a shallow-copied clone of the object. Any nested objects         or arrays will be copied by reference, not duplicated."},{"url":"http:\/\/underscores.org\/#tap","title":"tap","description":"_.tap(object, interceptor)                             Invokes interceptor with the object, and then returns object.         The primary purpose of this method is to \"tap into\" a method chain, in order to perform operations on intermediate results within the chain."},{"url":"http:\/\/underscores.org\/#has","title":"has","description":"_.has(object, key)                             Does the object contain the given key? Identical to         , but uses a safe reference to the          function, in case it's been         ."},{"url":"http:\/\/underscores.org\/#isEqual","title":"isEqual","description":"_.isEqual(object, other)                             Performs an optimized deep comparison between the two objects, to determine         if they should be considered equal."},{"url":"http:\/\/underscores.org\/#isEmpty","title":"isEmpty","description":"_.isEmpty(object)                             Returns  if object contains no values."},{"url":"http:\/\/underscores.org\/#isElement","title":"isElement","description":"_.isElement(object)                             Returns  if object is a DOM element."},{"url":"http:\/\/underscores.org\/#isArray","title":"isArray","description":"_.isArray(object)                             Returns  if object is an Array."},{"url":"http:\/\/underscores.org\/#isObject","title":"isObject","description":"_.isObject(value)                             Returns  if value is an Object. Note that JavaScript         arrays and functions are objects, while (normal) strings and numbers are not."},{"url":"http:\/\/underscores.org\/#isArguments","title":"isArguments","description":"_.isArguments(object)                             Returns  if object is an Arguments object."},{"url":"http:\/\/underscores.org\/#isFunction","title":"isFunction","description":"_.isFunction(object)                             Returns  if object is a Function."},{"url":"http:\/\/underscores.org\/#isString","title":"isString","description":"_.isString(object)                             Returns  if object is a String."},{"url":"http:\/\/underscores.org\/#isNumber","title":"isNumber","description":"_.isNumber(object)                             Returns  if object is a Number (including )."},{"url":"http:\/\/underscores.org\/#isFinite","title":"isFinite","description":"_.isFinite(object)                             Returns  if object is a finite Number."},{"url":"http:\/\/underscores.org\/#isBoolean","title":"isBoolean","description":"_.isBoolean(object)                             Returns  if object is either  or ."},{"url":"http:\/\/underscores.org\/#isDate","title":"isDate","description":"_.isDate(object)                             Returns  if object is a Date."},{"url":"http:\/\/underscores.org\/#isRegExp","title":"isRegExp","description":"_.isRegExp(object)                             Returns  if object is a RegExp."},{"url":"http:\/\/underscores.org\/#isNaN","title":"isNaN","description":"_.isNaN(object)                             Returns  if object is . Note: this is not         the same as the native isNaN function, which will also return         true if the variable is ."},{"url":"http:\/\/underscores.org\/#isNull","title":"isNull","description":"_.isNull(object)                             Returns  if the value of object is ."},{"url":"http:\/\/underscores.org\/#isUndefined","title":"isUndefined","description":"_.isUndefined(value)                             Returns  if value is ."},{"url":"http:\/\/underscores.org\/#noConflict","title":"noConflict","description":"_.noConflict()                             Give control of the \"_\" variable back to its previous owner. Returns         a reference to the Underscore object."},{"url":"http:\/\/underscores.org\/#identity","title":"identity","description":"_.identity(value)                             Returns the same value that is used as the argument. In math:                  This function looks useless, but is used throughout Underscore as         a default iterator."},{"url":"http:\/\/underscores.org\/#times","title":"times","description":"_.times(n, iterator, [context])                             Invokes the given iterator function n times. Each invocation of         iterator is called with an  argument. Produces an         array of the returned values.         ."},{"url":"http:\/\/underscores.org\/#random","title":"random","description":"_.random(min, max)                             Returns a random integer between min and max, inclusive.         If you only pass one argument, it will return a number between          and that number."},{"url":"http:\/\/underscores.org\/#mixin","title":"mixin","description":"_.mixin(object)                             Allows you to extend Underscore with your own utility functions. Pass         a hash of  definitions to have your functions         added to the Underscore object, as well as the OOP wrapper."},{"url":"http:\/\/underscores.org\/#uniqueId","title":"uniqueId","description":"_.uniqueId([prefix])                             Generate a globally-unique id for client-side models or DOM elements         that need one. If prefix is passed, the id will be appended to it."},{"url":"http:\/\/underscores.org\/#escape","title":"escape","description":"_.escape(string)                             Escapes a string for insertion into HTML, replacing         , , , , , and  characters."},{"url":"http:\/\/underscores.org\/#unescape","title":"unescape","description":"_.unescape(string)                             The opposite of , replaces         , , ,         , , and          with their unescaped counterparts."},{"url":"http:\/\/underscores.org\/#result","title":"result","description":"_.result(object, property)                             If the value of the named property is a function then invoke it         with the object as context; otherwise, return it."},{"url":"http:\/\/underscores.org\/#template","title":"template","description":"_.template(templateString, [data], [settings])                             Compiles JavaScript templates into functions that can be evaluated         for rendering. Useful for rendering complicated bits of HTML from JSON         data sources. Template functions can both interpolate variables, using         , as well as execute arbitrary JavaScript code, with         . If you wish to interpolate a value, and have         it be HTML-escaped, use  When you evaluate a template function, pass in a         data object that has properties corresponding to the template's free         variables. If you're writing a one-off, you can pass the data         object as the second parameter to template in order to render         immediately instead of returning a template function.  The settings argument         should be a hash containing any  that should be overridden."},{"url":"http:\/\/underscores.org\/#chain","title":"chain","description":"_.chain(obj)                             Returns a wrapped object. Calling methods on this object will continue         to return wrapped objects until  is used."},{"url":"http:\/\/underscores.org\/#value","title":"value","description":"_(obj).value()                             Extracts the value of a wrapped object."}]