[{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date","title":"Date","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean","title":"Boolean","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects","title":"Global Objects","description":"Standard global objects (by category) General-purpose constructors  Array Boolean Date Function Iterator Number Object RegExp String  Typed array constructors  ArrayBuffer Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray  Error constructors  Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError  Non-constructor functions  decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval  Other  Infinity JSON Math NaN undefined  General-purpose constructors  Array Boolean Date Function Iterator Number Object RegExp String  Typed array constructors  ArrayBuffer Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray  Error constructors  Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError  Non-constructor functions  decodeURI decodeURIComponent encodeURI encodeURIComponent eval isFinite isNaN parseFloat parseInt uneval  Other  Infinity JSON Math NaN undefined  Standard global objects (alphabetically)  Array ArrayBuffer Boolean Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error eval EvalError Float32Array Float64Array Function Infinity Int16Array Int32Array Int8Array isFinite isNaN Iterator JSON Math NaN Number Object parseFloat parseInt RangeError ReferenceError RegExp StopIteration String SyntaxError TypeError Uint16Array Uint32Array Uint8Array Uint8ClampedArray undefined uneval URIError  Other objects in the global scope are either created by the user script or provided by the host application. The host objects available in Gecko-based browsers are documented in the Gecko DOM Reference. For more information about the distinction between the DOM and core JavaScript, see The DOM and JavaScript article."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array","title":"Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function","title":"Function","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number","title":"Number","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object","title":"Object","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp","title":"RegExp","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String","title":"String","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/ArrayBuffer","title":"ArrayBuffer","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Float32Array","title":"Float32Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Float64Array","title":"Float64Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int16Array","title":"Int16Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int32Array","title":"Int32Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Int8Array","title":"Int8Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint16Array","title":"Uint16Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint32Array","title":"Uint32Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/Uint8Array","title":"Uint8Array","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error","title":"Error","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/EvalError","title":"EvalError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RangeError","title":"RangeError","description":"Represents an error when a number is not within the correct range allowed. Syntax new RangeError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description A RangeError is thrown when trying to pass a number as an argument to a function that does not allow a range that includes that number. This can be encountered when to create an array of an illegal length with the Array constructor, or when passing bad values to the numeric methods toExponential, toFixed, or toPrecision. Properties For properties available on RangeError instances, see Properties of RangeError instances.             prototype Allows the addition of properties to an RangeError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on RangeError instances, see Methods of RangeError instances.            The global RangeError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    RangeError instances Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  Array Error RangeError.prototype toExponential toFixed toPrecision"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError","title":"ReferenceError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/SyntaxError","title":"SyntaxError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/TypeError","title":"TypeError","description":"Represents an error when a value is not of the expected type. Syntax new TypeError([message[, fileName[, lineNumber]]]) Parameters  message Human-readable description of the error   fileName Non-standard      The name of the file containing the code that caused the exception   lineNumber Non-standard      The line number of the code that caused the exception  Description A TypeError is thrown when an operand or argument passed to a function is incompatible with the type expected by that operator or function. Properties For properties available on TypeError instances, see Properties of TypeError instances.             prototype Allows the addition of properties to an TypeError object.     Properties inherited from Function.prototype  caller, constructor, length, name    Methods For methods available on TypeError instances, see Methods of TypeError instances.            The global TypeError contains no methods of its own, however, it does inherit some methods through the prototype chain.    Methods inherited from Function.prototype  apply, call, toSource, toString, valueOf       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch    TypeError instances All TypeError instances inherit from TypeError.prototype. You can use the prototype to add properties or methods to all instances. Properties   constructor Specifies the function that created an instance's prototype.   name Error name.  Note: Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack     Methods  Although the TypeError prototype object does not contain any methods of its own, TypeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch     See also  Error apply call TypeError.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/URIError","title":"URIError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/decodeURI","title":"decodeURI","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/decodeURIComponent","title":"decodeURIComponent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseFloat","title":"parseFloat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/parseInt","title":"parseInt","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Infinity","title":"Infinity","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON","title":"JSON","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math","title":"Math","description":"A built-in object that has properties and methods for mathematical constants and functions. Description Unlike the other global objects, Math is not a constructor. All properties and methods of Math are static. You refer to the constant pi as Math.PI and you call the sine function as Math.sin(x), where x is the method's argument. Constants are defined with the full precision of real numbers in JavaScript.Properties  E Euler's constant and the base of natural logarithms, approximately 2.718.   LN2 Natural logarithm of 2, approximately 0.693.   LN10 Natural logarithm of 10, approximately 2.302.   LOG2E Base 2 logarithm of E, approximately 1.442.   LOG10E Base 10 logarithm of E, approximately 0.434.   PI Ratio of the circumference of a circle to its diameter, approximately 3.14159.   SQRT1_2 Square root of 1\/2; equivalently, 1 over the square root of 2, approximately 0.707.   SQRT2 Square root of 2, approximately 1.414.    Properties inherited from  Object:constructor, __parent__, __proto__   Methods   Note that the trigonometric functions (sin, cos, tan, asin, acos, atan, atan2) expect or return angles in radians - to convert radians to degrees divide by (Math.PI \/ 180), and multiply by this to convert the other way. abs Returns the absolute value (modulus) of a number.   acos Returns the arccosine of a number.   asin Returns the arcsine of a number.   atan Returns the arctangent of a number.   atan2 Returns the arctangent of the quotient of its arguments.   ceil Returns the smallest integer greater than or equal to a number.   cos Returns the cosine of a number.   exp Returns Enumber, where number is the argument, and E is Euler's constant (2.718...), the base of the natural logarithm.   floor Returns the largest integer less than or equal to a number.   log Returns the natural logarithm (loge, also ln) of a number.   max Returns the largest of zero or more numbers.   min Returns the smallest of zero or more numbers.   pow Returns base to the exponent power, that is, baseexponent.   random Returns a pseudo-random number between 0 and 1.   round Returns the value of a number rounded to the nearest integer.   sin Returns the sine of a number.   sqrt Returns the positive square root of a number.   tan Returns the tangent of a number.   toSource Non-standard      Returns the string \"Math\".    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, toString, unwatch, valueOf, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/NaN","title":"NaN","description":"A value representing Not-A-Number.    Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax NaN Description NaN is a property of the global object. The initial value of NaN is Not-A-Number - the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use NaN in a program. It is the returned value when Math functions fail (Math.sqrt(-1)) or when a function trying to parse a number fails (parseInt(\"blabla\")). Testing against NaN Equality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead. \r           NaN === NaN;        \/\/ false Number.NaN === NaN; \/\/ false isNaN(NaN);         \/\/ true isNaN(Number.NaN);  \/\/ true\r          Testing against NaN Equality operator (== and ===) cannot be used to test a value against NaN. Use isNaN instead. \r           NaN === NaN;        \/\/ false Number.NaN === NaN; \/\/ false isNaN(NaN);         \/\/ true isNaN(Number.NaN);  \/\/ true\r          See also isNaN"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/undefined","title":"undefined","description":"The value undefined.    Core Global Property     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax  undefined  Description undefined is a property of the global object, i.e. it is a variable in global scope. The initial value of undefined is the primitive value undefined.   JavaScript 1.8.5 noteStarting in JavaScript 1.8.5 (Firefox 4), undefined is non-writable, as per the ECMAScript 5 specification. A variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. A function returns undefined if a value was not returned. You can use undefined and the strict equality and inequality operators to determine whether a variable has a value. In the following code, the variable x is not defined, and the if statement evaluates to true. \r           var x; if (x === undefined) {    \/\/ these statements execute } if (x !== undefined) {    \/\/ these statements do not execute }\r          Note: The strict equality operator rather than the standard equality operator must be used here, because x == undefined also checks whether x is null, while strict equality doesn't. null is not equivalent to undefined. See comparison operators for details. Alternatively, typeof can be used: \r           var x; if (typeof x == 'undefined') {    \/\/ these statements execute }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/block","title":"block","description":"A block statement is used to group zero or more statements. The block is delimited by a pair of curly brackets. Version Information    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax \r           {    statement_1    statement_2    ...    statement_n }\r          Parameters  statement_1, statement_2, statement_n Statements grouped within the block statement.  Description This statement is commonly used with control flow statements (e.g. if, for, while). For example: \r           while (x < 10) {    x++; }\r          Important: JavaScript does not have block scope. Variables introduced with a block are scoped to the containing function or script, and the effects of setting them persist beyond the block itself. In other words, block statements do not introduce a scope. Although \"standalone\" blocks are valid syntax, you do not want to use standalone blocks in JavaScript, because they don't do what you think they do, if you think they do anything like such blocks in C or Java. For example: \r           var x = 1; {    var x = 2; } alert(x); \/\/ outputs 2\r          This outputs 2 because the var x statement within the conditional is in the same scope as the var x statement before the conditional. In C or Java, the equivalent code would have outputted 1."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/break","title":"break","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/const","title":"const","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/continue","title":"continue","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/debugger","title":"debugger","description":"Invokes any available debugging functionality. If no debugging functionality is available, this statement has no effect.    Statement   Implemented in JavaScript 1.0   ECMAScript Edition ECMA-262 5th Edition   Syntax debugger; Examples  The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.  function potentiallyBuggyCode() {   debugger;   \/\/ do potentially buggy stuff to examine, step through, etc. }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/do...while","title":"do...while","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/export","title":"export","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for","title":"for","description":"Creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement executed in the loop.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax for ([initialization]; [condition]; [final-expression])    statement  Parameters  initialization An expression (including assignment expressions) or variable declaration. Typically used to initialize a counter variable. This expression may optionally declare new variables with the var keyword. These variables are not local to the loop, i.e. they are in the same scope the for loop is in. The result of this expression is discarded.   condition An expression to be evaluated before each loop iteration. If this expression evaluates to true, statement is executed. This conditional test is optional. If omitted, the condition always evaluates to true. If the expression evaluates to false, execution skips to the first expression following the for construct.   final-expression An expression to be evaluated at the end of each loop iteration. This occurs before the next evaluation of condition. Generally used to update or increment the counter variable.   statement A statement that is executed as long as the condition evaluates to true. To execute multiple statements within the loop, use a block statement ({ ... }) to group those statements.  Examples Example: Using for The following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop. \r           for (var i = 0; i < 9; i++) {    n += i;    myfunc(n); }\r          Example: Using for without the statement section The following for cycle calculates the offset position of a node in the [final-expression] section, and therefore it does not require the use of a statement or block statement section: \r           function showOffsetPos (sId) {   var nLeft = 0, nTop = 0;   for (var oItNode = document.getElementById(sId); oItNode; nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent);   alert(\"Offset position of \\\"\" + sId + \"\\\" element:\\n left: \" + nLeft + \"px;\\n top: \" + nTop + \"px;\"); }\r          Note: In this case, when you do not use the statement section, a semicolon is put immediately after the declaration of the cycle. Example: Using for The following for statement starts by declaring the variable i and initializing it to 0. It checks that i is less than nine, performs the two succeeding statements, and increments i by 1 after each pass through the loop. \r           for (var i = 0; i < 9; i++) {    n += i;    myfunc(n); }\r          Example: Using for without the statement section The following for cycle calculates the offset position of a node in the [final-expression] section, and therefore it does not require the use of a statement or block statement section: \r           function showOffsetPos (sId) {   var nLeft = 0, nTop = 0;   for (var oItNode = document.getElementById(sId); oItNode; nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent);   alert(\"Offset position of \\\"\" + sId + \"\\\" element:\\n left: \" + nLeft + \"px;\\n top: \" + nTop + \"px;\"); }\r          Note: In this case, when you do not use the statement section, a semicolon is put immediately after the declaration of the cycle. See also while, do...while, for...in"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for...in","title":"for...in","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/for_each...in","title":"for each...in","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/function","title":"function","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/if...else","title":"if...else","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/import","title":"import","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/label","title":"label","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/let","title":"let","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/return","title":"return","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/switch","title":"switch","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/throw","title":"throw","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/try...catch","title":"try...catch","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/while","title":"while","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/var","title":"var","description":"Declares a variable, optionally initializing it to a value.    Statement   Implemented in: JavaScript 1.0, NES 2.0   ECMA Version: ECMA-262    Syntax var varname1 [= value1 [, varname2 [, varname3 ... [, varnameN]]]]; Parameters  varnameN Variable name. It can be any legal identifier.   valueN Initial value of the variable. It can be any legal expression.  Description The scope of a variable declared with var is the enclosing function or, for variables declared outside a function, the global scope (which is bound to the global object). Using var outside a function is optional; assigning a value to an undeclared variable implicitly declares it as a global variable (also a property of the global object). The difference is that z declared variable is a non-configurable property of the global object while an undeclared is configurable. \r           var a = 1; b = 2;  delete this.a; \/\/ Throws a TypeError in strict mode. Fails silently otherwise. delete this.b;  console.log(a, b); \/\/ Throws a ReferenceError. Since the 'b' property doesn't exist in the global object, \/\/ the 'b' variable stops being a variable\r          Consequently, it is recommended to always declare your variables, regardless of being in the global scope or in a function Failure to declare the variable in these cases will very likely lead to unexpected results. For that reason, in ECMAScript 5 strict mode, assigning a value an undeclared variable inside a function throws an error. var hoisting In JavaScript, variable can be declared after being used. \r           bla = 2 var bla; \/\/ ...  \/\/ is implicitly understood as:  var bla; bla = 2;\r          For that reason, it is recommanded to always declare variable at the top of functions. Otherwise, it may lead to confusing cases: \r           var cells = document.getElementsByTagName('td');  for(var i=0; i<cells.length; i++){   var cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F'; \/\/ which 'cell' ?   }, false); }\r          Here, while the intention is to capture the 'local' cell within the loop, what happened is the following: \r           var i, cell; var cells = document.getElementsByTagName('td');  for(i=0; i<cells.length; i++){   cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F';   }, false); }\r          The 'cell' captured in the event listener is the global 'cell' variable which, at the end of the loop contains the last cell traversed in the loop. Consequently, clicking on any cell will only affect the last cell.var hoisting In JavaScript, variable can be declared after being used. \r           bla = 2 var bla; \/\/ ...  \/\/ is implicitly understood as:  var bla; bla = 2;\r          For that reason, it is recommanded to always declare variable at the top of functions. Otherwise, it may lead to confusing cases: \r           var cells = document.getElementsByTagName('td');  for(var i=0; i<cells.length; i++){   var cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F'; \/\/ which 'cell' ?   }, false); }\r          Here, while the intention is to capture the 'local' cell within the loop, what happened is the following: \r           var i, cell; var cells = document.getElementsByTagName('td');  for(i=0; i<cells.length; i++){   cell = cells[i];   cell.addEventListener('click', function(){     cell.style.backgroundColor = '#00F';   }, false); }\r          The 'cell' captured in the event listener is the global 'cell' variable which, at the end of the loop contains the last cell traversed in the loop. Consequently, clicking on any cell will only affect the last cell.Examples Declaring and initializing two variables: \r           var a = 0, b = 0;\r          Assigning 2 variables with single string value. \r           var a = \"A\"; var b = a;  \/\/ Equivalent to:  var a, b = a = \"A\";\r          Be careful of the order though: \r           var x = y, y = 'A'; console.log(x + y); \/\/ undefinedA  \/\/ Here, x is declared. y declaration (but not initialisation!) is hoisted \/\/ so, at the time of \"x = y\", y is declared (no ReferenceError is thrown) and its value is 'undefined' \/\/ then, y is assigned its value. \/\/ Consequently, after the first line, x === undefined && y === 'A'. Hence the concatenation\r          Be careful of initialization of several variables: \r           var x = 0;  function f(){   var x = y = 1; \/\/ x is declared locally. y is not! } f();  console.log(x, y); \/\/ 0, 1 \/\/ x is the global one as expected \/\/ y leaked outside of the function, though!\r          See also  let const How One Missing `var` Ruined our Launch."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Statements\/with","title":"with","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Arithmetic_Operators","title":"Arithmetic Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Assignment_Operators","title":"Assignment Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Bitwise_Operators","title":"Bitwise Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Comparison_Operators","title":"Comparison Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Logical_Operators","title":"Logical Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/String_Operators","title":"String Operators","description":"Summary  In addition to the comparison operators, which can be used on string values, the concatenation operator (+) concatenates two string values together, returning another string that is the union of the two operand strings. For example, \"my \" + \"string\" returns the string \"my string\". The shorthand assignment operator += can also be used to concatenate strings. For example, if the variable mystring has the value \"alpha\", then the expression mystring += \"bet\" evaluates to \"alphabet\" and assigns this value to mystring.    Operator   Implemented in: JavaScript 1.0   ECMA Version: ECMA-262"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Member_Operators","title":"Member Operators","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Conditional_Operator","title":"Conditional Operator","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Comma_Operator","title":"Comma Operator","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/delete","title":"delete","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/get","title":"get","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/in","title":"in","description":"The in operator returns true if the specified property is in the specified object.    Operator   Implemented in: JavaScript 1.4    Syntax  prop in objectName  Parameters  prop A string or numeric expression representing a property name or array index.   objectName Name of an object.  Description The following examples show some uses of the in operator.  \/\/ Arrays var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); 0 in trees        \/\/ returns true 3 in trees        \/\/ returns true 6 in trees        \/\/ returns false \"bay\" in trees    \/\/ returns false (you must specify the index number,                   \/\/ not the value at that index) \"length\" in trees \/\/ returns true (length is an Array property)  \/\/ Predefined objects \"PI\" in Math          \/\/ returns true  \/\/ Custom objects var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; \"make\" in mycar  \/\/ returns true \"model\" in mycar \/\/ returns true  You must specify an object on the right side of the in operator. For example, you can specify a string created with the String constructor, but you cannot specify a string literal.  var color1 = new String(\"green\"); \"length\" in color1 \/\/ returns true var color2 = \"coral\"; \"length\" in color2 \/\/ generates an error (color is not a String object)  Using in with deleted or undefined properties If you delete a property with the delete operator, the in operator returns false for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; delete mycar.make; \"make\" in mycar;  \/\/ returns false  var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); delete trees[3]; 3 in trees; \/\/ returns false  If you set a property to undefined but do not delete it, the in operator returns true for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; mycar.make = undefined; \"make\" in mycar;  \/\/ returns true   var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); trees[3] = undefined; 3 in trees; \/\/ returns true  Inherited properties The in operator returns true for properties in the prototype chain.  \"toString\" in {}; \/\/ returns true Using in with deleted or undefined properties If you delete a property with the delete operator, the in operator returns false for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; delete mycar.make; \"make\" in mycar;  \/\/ returns false  var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); delete trees[3]; 3 in trees; \/\/ returns false  If you set a property to undefined but do not delete it, the in operator returns true for that property.  var mycar = {make: \"Honda\", model: \"Accord\", year: 1998}; mycar.make = undefined; \"make\" in mycar;  \/\/ returns true   var trees = new Array(\"redwood\", \"bay\", \"cedar\", \"oak\", \"maple\"); trees[3] = undefined; 3 in trees; \/\/ returns true  Inherited properties The in operator returns true for properties in the prototype chain.  \"toString\" in {}; \/\/ returns true See also  delete Object.prototype.hasOwnProperty"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/instanceof","title":"instanceof","description":"The instanceof operator tests whether an object has in its prototype chain the prototype property of a constructor.    Operator     Implemented in: JavaScript 1.4   ECMAScript Edition: ECMA-262 ? Edition    Syntax object instanceof constructorParameters  object The object to test.   constructor Function to test against  Description The instanceof operator tests presence of constructor.prototype in object prototype chain. \r           function C(){} \/\/ defining a constructor function D(){} \/\/ defining another constructor  var o = new C(); o instanceof C; \/\/ true, because: Object.getPrototypeOf(o) === C.prototype o instanceof D; \/\/ false, because D.prototype is nowhere in o's prototype chain o instanceof Object; \/\/ true, because: C.prototype instanceof Object \/\/ true  C.prototype = {}; var o2 = new C(); o2 instanceof C; \/\/ true o instanceof C; \/\/ false, because C.prototype is nowhere in o's prototype chain anymore  D.prototype = Object.getPrototypeOf(o); o instanceof D; \/\/ true\r          Note that if the value of an instanceof test can change based on changes to the prototype property of constructors, it cannot be changed by changing an object prototype, because changing an object prototype is not possible in standard ECMAScript. It is however possible using the non-standard __proto__ pseudo-property. instanceof and multiple context (e.g. frames or windows) Different scope have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, if Array2 is the Array constructor of another context, [] instanceof Array2 will return false, because Array.prototype !== Array2.prototype and arrays inherit from the former.Mozilla developers In code using XPCOM instanceof has special effect: obj instanceof xpcomInterface (e.g. Components.interfaces.nsIFile) calls obj.QueryInterface(xpcomInterface) and returns true if QueryInterface succeeded. A side effect of such call is that you can use xpcomInterface's properties on obj after a successful instanceof test. Unlike standard JavaScript globals, the test obj instanceof xpcomInterface works as expected even if obj is from a different scope. instanceof and multiple context (e.g. frames or windows) Different scope have different execution environments. This means that they have different built-ins (different global object, different constructors, etc.). This may result in unexpected results. For instance, if Array2 is the Array constructor of another context, [] instanceof Array2 will return false, because Array.prototype !== Array2.prototype and arrays inherit from the former.Mozilla developers In code using XPCOM instanceof has special effect: obj instanceof xpcomInterface (e.g. Components.interfaces.nsIFile) calls obj.QueryInterface(xpcomInterface) and returns true if QueryInterface succeeded. A side effect of such call is that you can use xpcomInterface's properties on obj after a successful instanceof test. Unlike standard JavaScript globals, the test obj instanceof xpcomInterface works as expected even if obj is from a different scope. Examples Also see the examples for throw. Example: Determining whether theDay is a Date object The following code uses instanceof to determine whether theDay is a Date object. Because theDay is a Date object, the statements in the if statement execute.  var theDay = new Date(1995, 11, 17); \/\/ Dec. 17, 1995 if (theDay instanceof Date) {   print(\"theDay is a Date object\");   \/\/ whatever else... }   Example: Demonstrating that String and Date are of type Object The following code uses instanceof to demonstrate that String and Date objects are also of type Object (they are derived from Object). \r           var myString = new String(); var myDate = new Date();  myString instanceof String; \/\/ returns true myString instanceof Object; \/\/ returns true myString instanceof Date;   \/\/ returns false  myDate instanceof Date;     \/\/ returns true myDate instanceof Object;   \/\/ returns true myDate instanceof String;   \/\/ returns false\r          Example: Demonstrating that mycar is of type Car and type Object The following code creates an object type Car and an instance of that object type, mycar. The instanceof operator demonstrates that the mycar object is of type Car and of type Object. \r           function Car(make, model, year) {   this.make = make;   this.model = model;   this.year = year; } var mycar = new Car(\"Honda\", \"Accord\", 1998); var a = mycar instanceof Car;    \/\/ returns true var b = mycar instanceof Object; \/\/ returns true\r          Example: Determining whether theDay is a Date object The following code uses instanceof to determine whether theDay is a Date object. Because theDay is a Date object, the statements in the if statement execute.  var theDay = new Date(1995, 11, 17); \/\/ Dec. 17, 1995 if (theDay instanceof Date) {   print(\"theDay is a Date object\");   \/\/ whatever else... }   Example: Demonstrating that String and Date are of type Object The following code uses instanceof to demonstrate that String and Date objects are also of type Object (they are derived from Object). \r           var myString = new String(); var myDate = new Date();  myString instanceof String; \/\/ returns true myString instanceof Object; \/\/ returns true myString instanceof Date;   \/\/ returns false  myDate instanceof Date;     \/\/ returns true myDate instanceof Object;   \/\/ returns true myDate instanceof String;   \/\/ returns false\r          Example: Demonstrating that mycar is of type Car and type Object The following code creates an object type Car and an instance of that object type, mycar. The instanceof operator demonstrates that the mycar object is of type Car and of type Object. \r           function Car(make, model, year) {   this.make = make;   this.model = model;   this.year = year; } var mycar = new Car(\"Honda\", \"Accord\", 1998); var a = mycar instanceof Car;    \/\/ returns true var b = mycar instanceof Object; \/\/ returns true"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/set","title":"set","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/new","title":"new","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/this","title":"this","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/typeof","title":"typeof","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/void","title":"void","description":"Syntax void expression The void operator evaluates the given expression and then returns undefined.    Operator   Implemented in: JavaScript 1.1   ECMA Version: ECMA-262    Uses This operator allows inserting expressions that produce side effects into places where an expression that evaluates to undefined is desired. The void operator is often used merely to obtain the undefined primitive value, usually using \"void(0)\" (which is equivalent to \"void 0\"). In these cases, the global variable undefined can be used instead (assuming it has not been assigned to a non-default value). JavaScript URIs When a browser follows a javascript: URI, it evaluates the code in the URI and then replaces the contents of the page with the returned value, unless the returned value is undefined. The void operator can be used to return undefined. For example:  <a href=\"javascript:void(0);\">Click here to do nothing<\/a> <a href=\"javascript:void(document.body.style.backgroundColor='green');\">Click here for green background<\/a>  Note, however, that the javascript: pseudo protocol is discouraged over other alternatives, such as unobtrusive event handlers."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Operators\/Operator_Precedence","title":"Operator Precedence","description":"Operator precedence determines the order in which operators are evaluated. Operators with higher precedence are evaluated first. A common example:  3 + 4 * 5 \/\/ returns 23\t   The multiplication operator (\"*\") has higher precedence than the addition operator (\"+\") and thus will be evaluated first. Associativity Associativity determines the order in which operators of the same precedence are processed. For example, consider an expression:  a OP b OP c  Left-associativity (left-to-right) means that it is processed as (a OP b) OP c, while right-associativity (right-to-left) means it is interpreted as a OP (b OP c). Assignment operators are right-associative, so you can write:  a = b = 5;  with the expected result that a and b get the value 5. This is because the assignment operator returns the value that it assigned. First, b is set to 5. Then the a is set to the value of b. Table The following table is ordered from highest (1) to lowest (17) precedence.    Precedence Operator type Associativity Individual operators   1 member left-to-right .   []   new right-to-left new   2 function call left-to-right ()   3 increment n\/a ++   decrement n\/a --   4 logical-not right-to-left !   bitwise not right-to-left ~   unary + right-to-left +   unary negation right-to-left -   typeof right-to-left typeof   void right-to-left void   delete right-to-left delete   5 multiplication left-to-right *   division left-to-right \/   modulus left-to-right    6 addition left-to-right +   subtraction left-to-right -   7 bitwise shift left-to-right <<   >>   >>>   8 relational left-to-right <   <=   >   >=   in left-to-right in   instanceof left-to-right instanceof   9 equality left-to-right ==   !=   ===   !==   10 bitwise-and left-to-right &   11 bitwise-xor left-to-right ^   12 bitwise-or left-to-right |   13 logical-and left-to-right &&   14 logical-or left-to-right ||   15 conditional right-to-left ?:   16 assignment right-to-left =   +=   -=   *=   \/=   %=   <<=   >>=   >>>=   &=   ^=   |=   17 comma left-to-right ,"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/parse","title":"Date.parse","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/prototype","title":"Date.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Arity","title":"Function.Arity","description":"Specifies the number of arguments expected by the function.    Property of Function     Implemented in JavaScript 1.2   ECMAScript Edition None    Description The arity property no longer exists and has been replaced by the Function.prototype.length property."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Caller","title":"Function.Caller","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Constructor","title":"Function.Constructor","description":"Summary  Returns a reference to the Function function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Length","title":"Function.Length","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Name","title":"Function.Name","description":"The name of the function.    Property of Function     Implemented in JavaScript ?   ECMAScript Edition None    Description The name property returns the name of a function, or an empty string for anonymous functions: function doSomething() {} alert(doSomething.name); \/\/ alerts \"doSomething\"  Functions created with the syntax new Function(...) or just Function(...) have their name property set to \"anonymous\" on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer. Note that in these examples anonymous functions are created, so name returns an empty string: var f = function() { }; var object = {   someMethod: function() {} };  alert(f.name == \"\"); \/\/ true alert(object.someMethod.name == \"\"); \/\/ also true  You can define a function with a name in a function expression: var object = {   someMethod: function object_someMethod() {} }; alert(object.someMethod.name); \/\/ alerts \"object_someMethod\"  try { object_someMethod } catch(e) { alert(e); } \/\/ ReferenceError: object_someMethod is not defined  You cannot change the name of a function, this property is read-only: var object = {   \/\/ anonymous   someMethod: function(){} }; object.someMethod.name = \"someMethod\"; alert(object.someMethod.name); \/\/ empty string, someMethod is anonymous  Examples You can use obj.constructor.name to check the \"class\" of an object: function a() { }  var b = new a(); alert(b.constructor.name); \/\/Alerts \"a\""},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/now","title":"Date.now","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/UTC","title":"Date.UTC","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Apply","title":"Function.Apply","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/Call","title":"Function.Call","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/ToSource","title":"Function.ToSource","description":"Summary  Returns a string representing the source code for the function.     Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  var sourceString = function.toSource();   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Function object, toSource returns the following string indicating that the source code is not available:  function Function() {    [native code] }   For custom functions, toSource returns the JavaScript source that defines the object as a string.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an object.   See Also  toString Object.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/ToString","title":"Function.ToString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getFullYear","title":"Date.getFullYear","description":"Summary  Returns the year of the specified date according to local time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getFullYear()    Parameters  None.   Description  The value returned by getFullYear is an absolute number. For dates between the years 1000 and 9999, getFullYear returns a four-digit number, for example, 1995. Use this function to make sure a year is compliant with years after 2000. Use this method instead of the getYear method.   Examples   Example: Using getFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var today = new Date(); var yr = today.getFullYear();    Example: Using getFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var today = new Date(); var yr = today.getFullYear();    See Also  getYear, getUTCFullYear, setFullYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setFullYear","title":"Date.setFullYear","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCFullYear","title":"Date.getUTCFullYear","description":"Summary  Returns the year in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCFullYear()    Parameters  None.   Description  The value returned by getUTCFullYear is an absolute number that is compliant with year-2000, for example, 1995.   Examples   Example: Using getUTCFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var yr; Today = new Date(); yr = Today.getUTCFullYear();    Example: Using getUTCFullYear  The following example assigns the four-digit value of the current year to the variable yr.   var yr; Today = new Date(); yr = Today.getUTCFullYear();    See Also  getFullYear, setFullYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCFullYear","title":"Date.setUTCFullYear","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/constructor","title":"Date.constructor","description":"Summary  Returns a reference to the Date function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Parent","title":"Object.Parent","description":"Points to an object's context. Syntax obj.__parent__ Description For top-level objects, this is the e.g. window. See Also  SpiderMonkey change du jour: the special __parent__ property has been removed"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Proto","title":"Object.Proto","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getDate","title":"Date.getDate","description":"Summary  Returns the day of the month for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   getDate()    Parameters  None.   Description  The value returned by getDate is an integer between 1 and 31.   Examples   Example: Using getDate  The second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") day = Xmas95.getDate()    Example: Using getDate  The second statement below assigns the value 25 to the variable day, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") day = Xmas95.getDate()    See Also  getUTCDate, getUTCDay, setDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getDay","title":"Date.getDay","description":"Summary  Returns the day of the week for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getDay()    Parameters  None.   Description  The value returned by getDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.   Examples   Example: Using getDay  The second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.   Xmas95 = new Date(\"December 25, 1995 23:15:00\"); weekday = Xmas95.getDay();   Example: Using getDay  The second statement below assigns the value 1 to weekday, based on the value of the Date object Xmas95. December 25, 1995, is a Monday.   Xmas95 = new Date(\"December 25, 1995 23:15:00\"); weekday = Xmas95.getDay();   See Also  getUTCDay, setDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getHours","title":"Date.getHours","description":"Summary  Returns the hour for the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getHours()    Parameters  None.   Description  The value returned by getHours is an integer between 0 and 23.   Examples   Example: Using getHours  The second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") hours = Xmas95.getHours()    Example: Using getHours  The second statement below assigns the value 23 to the variable hours, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") hours = Xmas95.getHours()    See Also  getUTCHours, setHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMilliseconds","title":"Date.getMilliseconds","description":"Summary  Returns the milliseconds in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMilliseconds()    Parameters  None.   Description  The value returned by getMilliseconds is a number between 0 and 999.   Examples   Example: Using getMilliseconds  The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getMilliseconds();    Example: Using getMilliseconds  The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getMilliseconds();    See Also  getUTCMilliseconds, setMilliseconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMinutes","title":"Date.getMinutes","description":"Summary  Returns the minutes in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMinutes()    Parameters  None.   Description  The value returned by getMinutes is an integer between 0 and 59.   Examples   Example: Using getMinutes  The second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") minutes = Xmas95.getMinutes()   Example: Using getMinutes  The second statement below assigns the value 15 to the variable minutes, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") minutes = Xmas95.getMinutes()   See Also  getUTCMinutes, setMinutes"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getMonth","title":"Date.getMonth","description":"Summary  Returns the month in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getMonth()    Parameters  None.   Description  The value returned by getMonth is an integer between 0 and 11. 0 corresponds to January, 1 to February, and so on.   Examples   Example: Using getMonth  The second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") month = Xmas95.getMonth()    Example: Using getMonth  The second statement below assigns the value 11 to the variable month, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:00\") month = Xmas95.getMonth()    See Also  getUTCMonth, setMonth"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getSeconds","title":"Date.getSeconds","description":"Summary  Returns the seconds in the specified date according to local time.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getSeconds()    Parameters  None.   Description  The value returned by getSeconds is an integer between 0 and 59.   Examples   Example: Using getSeconds  The second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:30\") secs = Xmas95.getSeconds()   Example: Using getSeconds  The second statement below assigns the value 30 to the variable secs, based on the value of the Date object Xmas95.   Xmas95 = new Date(\"December 25, 1995 23:15:30\") secs = Xmas95.getSeconds()   See Also  getUTCSeconds, setSeconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getTime","title":"Date.getTime","description":"Returns the numeric value corresponding to the time for the specified date according to universal time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  getTime()  Parameters None. Description The value returned by the getTime method is the number of milliseconds since 1 January 1970 00:00:00 UTC. You can use this method to help assign a date and time to another Date object. This method is functionally equivalent to the valueOf method. Examples Using getTime for copying dates Constructing a date object with the identical time value. \r           var birthday = new Date(1994, 12, 10); var copy = new Date(); copy.setTime(birthday.getTime());\r          Measuring execution time Subtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations. \r           var end, start;  start = new Date(); for (var i = 0; i < 1000; i++)   Math.sqrt(i); end = new Date();  console.log(\"Operation took \" + (end.getTime() - start.getTime()) + \" msec\");\r         Using getTime for copying dates Constructing a date object with the identical time value. \r           var birthday = new Date(1994, 12, 10); var copy = new Date(); copy.setTime(birthday.getTime());\r          Measuring execution time Subtracting two subsequent getTime calls on newly generated Date objects, give the time span between these two calls. This can be used to calculate the executing time of some operations. \r           var end, start;  start = new Date(); for (var i = 0; i < 1000; i++)   Math.sqrt(i); end = new Date();  console.log(\"Operation took \" + (end.getTime() - start.getTime()) + \" msec\");\r         See also getUTCHours, setTime, valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getTimezoneOffset","title":"Date.getTimezoneOffset","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCDate","title":"Date.getUTCDate","description":"Summary  Returns the day (date) of the month in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCDate()    Parameters  None.   Description  The value returned by getUTCDate is an integer between 1 and 31.   Examples   Example: Using getUTCDate  The following example assigns the day portion of the current date to the variable d.   var d; Today = new Date(); d = Today.getUTCDate();    Example: Using getUTCDate  The following example assigns the day portion of the current date to the variable d.   var d; Today = new Date(); d = Today.getUTCDate();    See Also  getDate, getUTCDay, setUTCDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCDay","title":"Date.getUTCDay","description":"Summary  Returns the day of the week in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCDay()    Parameters  None.   Description  The value returned by getUTCDay is an integer corresponding to the day of the week: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.   Examples   Example: Using getUTCDay  The following example assigns the weekday portion of the current date to the variable weekday.   var weekday; Today = new Date() weekday = Today.getUTCDay()   Example: Using getUTCDay  The following example assigns the weekday portion of the current date to the variable weekday.   var weekday; Today = new Date() weekday = Today.getUTCDay()   See Also  getDay, getUTCDate, setUTCDate"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCHours","title":"Date.getUTCHours","description":"Summary  Returns the hours in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCHours    Parameters  None.   Description  The value returned by getUTCHours is an integer between 0 and 23.   Examples   Example: Using getUTCHours  The following example assigns the hours portion of the current time to the variable hrs.   var hrs; Today = new Date(); hrs = Today.getUTCHours();   Example: Using getUTCHours  The following example assigns the hours portion of the current time to the variable hrs.   var hrs; Today = new Date(); hrs = Today.getUTCHours();   See Also  getHours, setUTCHours"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMilliseconds","title":"Date.getUTCMilliseconds","description":"Summary  Returns the milliseconds in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMilliseconds()    Parameters  None.   Description  The value returned by getUTCMilliseconds is an integer between 0 and 999.   Examples   Example: Using getUTCMilliseconds = The following example assigns the milliseconds portion of the current time to the variable ms.   var ms; Today = new Date(); ms = Today.getUTCMilliseconds();   See Also  getMilliseconds, setUTCmilliseconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMinutes","title":"Date.getUTCMinutes","description":"Summary  Returns the minutes in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMinutes()    Parameters  None.   Description  The value returned by getUTCMinutes is an integer between 0 and 59.   Examples   Example: Using getUTCMinutes  The following example assigns the minutes portion of the current time to the variable min.   var min; Today = new Date(); min = Today.getUTCMinutes();   Example: Using getUTCMinutes  The following example assigns the minutes portion of the current time to the variable min.   var min; Today = new Date(); min = Today.getUTCMinutes();   See Also  getMinutes, setUTCMinutes"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCMonth","title":"Date.getUTCMonth","description":"Summary  Returns the month of the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCMonth()    Parameters  None.   Description  The value returned by getUTCMonth is an integer between 0 and 11 corresponding to the month. 0 for January, 1 for February, 2 for March, and so on.   Examples   Example: Using getUTCMonth  The following example assigns the month portion of the current date to the variable mon.   var mon; Today = new Date(); mon = Today.getUTCMonth();   Example: Using getUTCMonth  The following example assigns the month portion of the current date to the variable mon.   var mon; Today = new Date(); mon = Today.getUTCMonth();   See Also  getMonth, setUTCMonth"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getUTCSeconds","title":"Date.getUTCSeconds","description":"Summary  Returns the seconds in the specified date according to universal time.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax   getUTCSeconds()    Parameters  None.   Description  The value returned by getUTCSeconds is an integer between 0 and 59.   Examples   Example: Using getUTCSeconds  The following example assigns the seconds portion of the current time to the variable sec.   var sec; Today = new Date(); sec = Today.getUTCSeconds();   Example: Using getUTCSeconds  The following example assigns the seconds portion of the current time to the variable sec.   var sec; Today = new Date(); sec = Today.getUTCSeconds();   See Also  getSeconds, setUTCSeconds"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/getYear","title":"Date.getYear","description":"Returns the year in the specified date according to local time.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   getYear()    Parameters  None.   Description  getYear is no longer used and has been replaced by the getFullYear method. The getYear method returns the year minus 1900; thus:   For years greater than or equal to 2000, the value returned by getYear is 100 or greater. For example, if the year is 2026, getYear returns 126.   For years between and including 1900 and 1999, the value returned by getYear is between 0 and 99. For example, if the year is 1976, getYear returns 76.   For years less than 1900, the value returned by getYear is less than 0. For example, if the year is 1800, getYear returns -100.  To take into account years before and after 2000, you should use getFullYear instead of getYear so that the year is specified in full.   Backward Compatibility   JavaScript 1.2 and earlier  The getYear method returns either a 2-digit or 4-digit year:   For years between and including 1900 and 1999, the value returned by getYear is the year minus 1900. For example, if the year is 1976, the value returned is 76.   For years less than 1900 or greater than 1999, the value returned by getYear is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.   JavaScript 1.2 and earlier  The getYear method returns either a 2-digit or 4-digit year:   For years between and including 1900 and 1999, the value returned by getYear is the year minus 1900. For example, if the year is 1976, the value returned is 76.   For years less than 1900 or greater than 1999, the value returned by getYear is the four-digit year. For example, if the year is 1856, the value returned is 1856. If the year is 2026, the value returned is 2026.   Examples   Example: Years between 1900 and 1999  The second statement assigns the value 95 to the variable year.   Xmas = new Date(\"December 25, 1995 23:15:00\") year = Xmas.getYear() \/\/ returns 95   Example: Years above 1999  The second statement assigns the value 100 to the variable year.   Xmas = new Date(\"December 25, 2000 23:15:00\") year = Xmas.getYear() \/\/ returns 100   Example: Years below 1900  The second statement assigns the value -100 to the variable year.   Xmas = new Date(\"December 25, 1800 23:15:00\") year = Xmas.getYear() \/\/ returns -100   Example: Setting and getting a year between 1900 and 1999  The second statement assigns the value 95 to the variable year, representing the year 1995.   Xmas.setYear(95) year = Xmas.getYear() \/\/ returns 95    Example: Years between 1900 and 1999  The second statement assigns the value 95 to the variable year.   Xmas = new Date(\"December 25, 1995 23:15:00\") year = Xmas.getYear() \/\/ returns 95   Example: Years above 1999  The second statement assigns the value 100 to the variable year.   Xmas = new Date(\"December 25, 2000 23:15:00\") year = Xmas.getYear() \/\/ returns 100   Example: Years below 1900  The second statement assigns the value -100 to the variable year.   Xmas = new Date(\"December 25, 1800 23:15:00\") year = Xmas.getYear() \/\/ returns -100   Example: Setting and getting a year between 1900 and 1999  The second statement assigns the value 95 to the variable year, representing the year 1995.   Xmas.setYear(95) year = Xmas.getYear() \/\/ returns 95    See Also  getFullYear, getUTCFullYear, setYear"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setDate","title":"Date.setDate","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setHours","title":"Date.setHours","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMilliseconds","title":"Date.setMilliseconds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMinutes","title":"Date.setMinutes","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setSeconds","title":"Date.setSeconds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setMonth","title":"Date.setMonth","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCDate","title":"Date.setUTCDate","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setTime","title":"Date.setTime","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCHours","title":"Date.setUTCHours","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMilliseconds","title":"Date.setUTCMilliseconds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMinutes","title":"Date.setUTCMinutes","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCMonth","title":"Date.setUTCMonth","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setUTCSeconds","title":"Date.setUTCSeconds","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/setYear","title":"Date.setYear","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toDateString","title":"Date.toDateString","description":"Returns the date portion of a Date object in human readable form in American English.    Method of Date     Implemented in JavaScript ?   ECMAScript Edition ECMAScript ?    Syntax date.toDateString() Description Date instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the date portion; such a thing can be accomplished with the toDateString method. The toDateString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent and simple string slicing approaches may not produce consistent results across multiple engines. Example Example: A basic usage of toDateString var d = new Date(1993, 6, 28, 14, 39, 7); println(d.toString()); \/\/ prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT) println(d.toDateString()); \/\/ prints Wed Jul 28 1993  See also  toLocaleDateString toTimeString toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toISOString","title":"Date.toISOString","description":"JavaScript provides a direct way to convert a date object into a string in ISO format, the ISO 8601 Extended Format. The Date.prototype.toISOString is an ECMAScript 5 addition. Format is as follows: YYYY-MM-DDTHH:mm:ss.sssZ     Method of Date     Implemented in JavaScript 1.8   ECMAScript Edition ECMAScript 5th Edition    Syntax myDate.toISOString()  Note: mydate is a Date object. Parameters None. Examples \r           var today = new Date(\"05 October 2011 14:48 UTC\"); alert(today.toISOString()); \/\/ Returns 2011-10-10T14:48:00.000z\r          See Also toUTCString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toJSON","title":"Date.toJSON","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toGMTString","title":"Date.toGMTString","description":"Converts a date to a string, using Internet GMT conventioins.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition   Syntax  toGMTString()  Parameters None. Description toGMTString is deprecated and should no longer be used, it's only there for backwards compatibility, use toUTCString instead. The exact format of the value returned by toGMTString varies according to the platform and browser, in general it should represent a human readable date string.Examples Example: Using toGMTString In the following example, today is a Date object: today.toGMTString()  In this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform. Mon, 18 Dec 1995 17:28:35 GMT  Example: Using toGMTString In the following example, today is a Date object: today.toGMTString()  In this example, the toGMTString method converts the date to GMT (UTC) using the operating system's time-zone offset and returns a string value that is similar to the following form. The exact format depends on the platform. Mon, 18 Dec 1995 17:28:35 GMT  See Also toLocaleString, toUTCString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toUTCString","title":"Date.toUTCString","description":"Converts a date to a string, using the universal time convention.    Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition    Syntax toUTCString()  Parameters None. Description The value returned by toUTCString is a readable string in American English in the UTC time zone. The format of the return value may vary according to the platform. The most common return value is a RFC-1123 formatted date stamp, which is a slightly updated version of RFC-822 date stamps. Examples Example: Using toUTCString var today = new Date(); var UTCstring = today.toUTCString(); \/\/ Mon, 03 Jul 2006 21:44:38 GMT  Example: Using toUTCString var today = new Date(); var UTCstring = today.toUTCString(); \/\/ Mon, 03 Jul 2006 21:44:38 GMT  See Also toLocaleString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleDateString","title":"Date.toLocaleDateString","description":"Summary  Converts a date to a string, returning the \"date\" portion using the operating system's locale's conventions.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   toLocaleDateString()    Parameters  None.  Description The toLocaleDateString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleDateString returns a string that is not year-2000 compliant. toLocaleDateString behaves similarly to toString when converting a year that the operating system does not properly format. Methods such as getDate, getMonth, and getFullYear give more portable results than toLocaleDateString. Use toLocaleDateString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.Examples Using toLocaleDateString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleDateString()  In this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleDateString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleDateString(); \/\/ Bad exampleUsing toLocaleDateString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleDateString()  In this example, toLocaleDateString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleDateString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleDateString(); \/\/ Bad exampleSee Also  toDateString toLocaleString toLocaleTimeString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toLocaleString","title":"Object.toLocaleString","description":"Summary  Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.    Method of Object   ECMA Version: ECMA-262 Edition 3    Syntax   toLocaleString()    Parameters  None.   Description  Object's toLocaleString returns the result of calling toString. This function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.   See also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleTimeString","title":"Date.toLocaleTimeString","description":"Converts a date to a string, returning the \"time\" portion using the current locale's conventions.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleTimeString()  Parameters None. Description The toLocaleTimeString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). Methods such as getHours, getMinutes, and getSeconds give more consistent results than toLocaleTimeString. Use toLocaleTimeString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings. Examples Using toLocaleTimeString In the following example, today is a Date object:  today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleTimeString()  In this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.  17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale.  \"Last visit: \" + someDate.toLocaleTimeString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleTimeString(); \/\/ Bad example Using toLocaleTimeString In the following example, today is a Date object:  today = new Date(95,11,18,17,28,35) \/\/months are represented by 0 to 11 today.toLocaleTimeString()  In this example, toLocaleTimeString returns a string value that is similar to the following form. The exact format depends on the platform.  17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale.  \"Last visit: \" + someDate.toLocaleTimeString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleTimeString(); \/\/ Bad example See Also  toTimeString toLocaleString toLocaleDateString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleFormat","title":"Date.toLocaleFormat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toLocaleString","title":"Date.toLocaleString","description":"Summary  Converts a date to a string, using the operating system's locale's conventions.     Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Syntax   toLocaleString()    Parameters  None.  Description The toLocaleString method relies on the underlying operating system in formatting dates. It converts the date to a string using the formatting convention of the operating system where the script is running. For example, in the United States, the month appears before the date (04\/15\/98), whereas in Germany the date appears before the month (15.04.98). If the operating system is not year-2000 compliant and does not use the full year for years before 1900 or over 2000, toLocaleString returns a string that is not year-2000 compliant. toLocaleString behaves similarly to toString when converting a year that the operating system does not properly format. Methods such as getDate, getMonth, getFullYear, getHours, getMinutes, and getSeconds give more portable results than toLocaleString. Use toLocaleString when the intent is to display to the user a string formatted using the regional format chosen by the user. Be aware that this method, due to its nature, behaves differently depending on the operating system and on the user's settings.Examples Using toLocaleString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35); \/\/months are represented by 0 to 11 today.toLocaleString();  In this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95 17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleString(); \/\/ Bad example Using toLocaleString In the following example, today is a Date object: today = new Date(95,11,18,17,28,35); \/\/months are represented by 0 to 11 today.toLocaleString();  In this example, toLocaleString returns a string value that is similar to the following form. The exact format depends on the platform, locale and user's settings. 12\/18\/95 17:28:35  You shouldn't use this method in contexts where you rely on a particular format or locale. \"Last visit: \" + someDate.toLocaleString(); \/\/ Good example \"Last visit was at \" + someDate.toLocaleString(); \/\/ Bad example See also  toString toUTCString toLocaleDateString toLocaleTimeString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toSource","title":"Date.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition ECMAScript 1st Edition     Syntax  date.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Date object, toSource returns the following string indicating that the source code is not available:  function Date() {    [native code] }   For instances of Date, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toSource","title":"Object.toSource","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toString","title":"Date.toString","description":"Returns a string representing the specified Date object.    Method of Date     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition   Syntax  toString()  Parameters None. Description The Date object overrides the toString method of the Object object; it does not inherit Object.toString. For Date objects, the toString method returns a string representation of the object. toString always returns a string representation of the date in American English. JavaScript calls the toString method automatically when a date is to be represented as a text value or when a date is referred to in a string concatenation. Examples Example: Using toString The following assigns the toString value of a Date object to myVar: x = new Date(); myVar=x.toString();   \/\/assigns a value to myVar similar to:      \/\/Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)  Example: Using toString The following assigns the toString value of a Date object to myVar: x = new Date(); myVar=x.toString();   \/\/assigns a value to myVar similar to:      \/\/Mon Sep 28 1998 14:36:22 GMT-0700 (Pacific Daylight Time)  See also  Object.toString toDateString toTimeString toLocaleString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/toString","title":"Object.toString","description":"Returns a string representing the object.    Method of Object     Implemented in JavaScript 1.0   ECMAScript Edition ECMSScript 1st Edition    Syntax object.toString() Description Every object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:  var o = new Object(); o.toString();           \/\/ returns [object Object]  Starting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type. Examples Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         See Also  toSource valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/toTimeString","title":"Date.toTimeString","description":"Syntax date.toTimeString() Description Date instances refer to a specific point in time. Calling toString will return the date formatted in a human readable form in American English. In SpiderMonkey, this consists of the date portion (day, month, and year) followed by the time portion (hours, minutes, seconds, and time zone). Sometimes it is desirable to obtain a string of the time portion; such a thing can be accomplished with the toTimeString method. The toTimeString method is especially useful because compliant engines implementing ECMA-262 may differ in the string obtained from toString for Date objects, as the format is implementation-dependent; simple string slicing approaches may not produce consistent results across multiple engines. Example Example: A basic usage of toTimeString  var d = new Date(1993, 6, 28, 14, 39, 7); println(d.toString()); \/\/ prints Wed Jul 28 1993 14:39:07 GMT-0600 (PDT) println(d.toTimeString()); \/\/ prints 14:39:07 GMT-0600 (PDT)  See also  toLocaleTimeString toDateString toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Date\/valueOf","title":"Date.valueOf","description":"Summary  Returns the primitive value of a Date object.     Method of Date     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  The valueOf method returns the primitive value of a Date object as a number data type, the number of milliseconds since midnight 01 January, 1970 UTC. This method is functionally equivalent to the getTime method. This method is usually called internally by JavaScript and not explicitly in code.   Examples   Example: Using valueOf  x = new Date(56, 6, 17); myVar = x.valueOf();      \/\/assigns -424713600000 to myVar     Example: Using valueOf  x = new Date(56, 6, 17); myVar = x.valueOf();      \/\/assigns -424713600000 to myVar     See also  Object.valueOf, getTime"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/valueOf","title":"Object.valueOf","description":"Summary  Returns the primitive value of the specified object     Method of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected. By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:   [object Object]  You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.   Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function. Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function.See Also  parseInt toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/DefineGetter","title":"Object.DefineGetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/DefineSetter","title":"Object.DefineSetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/HasOwnProperty","title":"Object.HasOwnProperty","description":"Returns a boolean indicating whether the object has the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition   Syntax obj.hasOwnProperty(prop) Parameters  prop The name of the property to test.  Description Every object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain. Examples Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          See also for...in in inheritance"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/IsPrototypeOf","title":"Object.IsPrototypeOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/LookupGetter","title":"Object.LookupGetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/LookupSetter","title":"Object.LookupSetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/NoSuchMethod","title":"Object.NoSuchMethod","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/PropertyIsEnumerable","title":"Object.PropertyIsEnumerable","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Unwatch","title":"Object.Unwatch","description":"Removes a watchpoint set with the watch() method.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax unwatch(prop)  Parameters  prop The name of a property of the object to stop watching.  Description The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. By default, this method is inherited by every object descended from Object. Note: The reason for unwatch() to take the property name prop as its only parameter is due to the \"single handler allowing\" behavior of the watch() method.Examples See watch()."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Watch","title":"Object.Watch","description":"Watches for a property to be assigned a value and runs a function when that occurs.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax object.watch(prop, handler)  Parameters  prop The name of a property of the object on which you wish to monitor changes.   handler A function to call when the specified property's value changes.  Description Warning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Compatibility for details. Watches for assignment to a property named prop in this object, calling handler(prop, oldval, newval) whenever prop is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified newval (or by returning oldval). If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect. To remove a watchpoint, use the unwatch() method. By default, the watch method is inherited by every object descended from Object. The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. In Firefox, handler is only called from assignments in script, not from native code. For example, window.watch('location', myHandler) will not call myHandler if the user clicks a link to an anchor within the current document. However, window.location += '#myAnchor' will call myHandler. Note: Calling watch() on an object for a specific property overrides and previous handler attached for that property. Examples Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Compatibility  This Polyfill that offers watch to all ES5 compatible browser Using a Proxy enables you do that even deeper changes to how property assignments work  See also unwatch()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/prototype","title":"Boolean.prototype","description":"Represents the prototype for the Boolean constructor. Description Boolean instances inherit from Boolean.prototype. You can use the constructor's prototype object to add properties or methods to all Boolean instances. Properties  constructor Returns the function that created an instance's prototype. This is the Boolean function by default.    Properties inherited from  Object:__parent__, __proto__   Methods  toSource Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. Overrides the Object.prototype.toSource method.   toString Returns a string of either \"true\" or \"false\" depending upon the value of the object. Overrides the Object.prototype.toStringmethod.   valueOf Returns the primitive value of the Boolean object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/constructor","title":"Boolean.constructor","description":"Summary  Returns a reference to the Boolean function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/toSource","title":"Boolean.toSource","description":"Returns a string representing the source code of the object.    Method of Boolean     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  boolean.toSource()    Parameters  None.   Description  The toSource method returns the following values:    For the built-in Boolean object, toSource returns the following string indicating that the source code is not available:  function Boolean() {    [native code] }   For instances of Boolean, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/toString","title":"Boolean.toString","description":"Returns a string representing the specified Boolean object.    Method of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax bool.toString() Parameters  None.  Description The Boolean object overrides the toString method of the Object object; it does not inherit Object.toString. For Boolean objects, the toString method returns a string representation of the object. JavaScript calls the toString method automatically when a Boolean is to be represented as a text value or when a Boolean is referred to in a string concatenation. For Boolean objects and values, the built-in toString method returns the string \"true\" or \"false\" depending on the value of the boolean object. In the following code, flag.toString returns \"true\".  var flag = new Boolean(true) var myVar = flag.toString()  See Also  Object.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Boolean\/valueOf","title":"Boolean.valueOf","description":"Returns the primitive value of a Boolean object.    Method of Boolean     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax bool.valueOf() Parameters None. Description The valueOf method of Boolean returns the primitive value of a Boolean object or literal Boolean as a Boolean data type. This method is usually called internally by JavaScript and not explicitly in code. Examples Example: Using valueOf  x = new Boolean(); myVar = x.valueOf()      \/\/assigns false to myVar  Example: Using valueOf  x = new Boolean(); myVar = x.valueOf()      \/\/assigns false to myVar  See Also Object.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToLocaleString","title":"Object.ToLocaleString","description":"Summary  Returns a string representing the object. This method is meant to be overriden by derived objects for locale-specific purposes.    Method of Object   ECMA Version: ECMA-262 Edition 3    Syntax   toLocaleString()    Parameters  None.   Description  Object's toLocaleString returns the result of calling toString. This function is provided to give objects a generic toLocaleString method, even though not all may use it. Currently, only Array, Number, and Date override toLocaleString.   See also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/length","title":"Array.length","description":"An unsigned, 32-bit integer that specifies the number of elements in an array.    Property of Array     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description  The value of the length property is an integer with a positive sign and a value less than 2 to the 32 power (232). You can set the length property to truncate an array at any time. When you extend an array by changing its length property, the number of actual elements does not increase; for example, if you set length to 3 when it is currently 2, the array still contains only 2 elements.   Examples   Example: Iterating over an array  In the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.   var numbers = [1,2,3,4,5]; for (var i = 0; i < numbers.length; i++) {   numbers[i] *= 2; } \/\/ numbers is now [2,4,6,8,10];   Example: Shortening an array  The following example shortens the array statesUS to a length of 50 if the current length is greater than 50.   if (statesUS.length > 50) {    statesUS.length=50 }     Example: Iterating over an array  In the following example the array numbers is iterated through by looking at the length property to see how many elements it has. Each value is then doubled.   var numbers = [1,2,3,4,5]; for (var i = 0; i < numbers.length; i++) {   numbers[i] *= 2; } \/\/ numbers is now [2,4,6,8,10];   Example: Shortening an array  The following example shortens the array statesUS to a length of 50 if the current length is greater than 50.   if (statesUS.length > 50) {    statesUS.length=50 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/join","title":"Array.join","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/slice","title":"Array.slice","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/indexOf","title":"Array.indexOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/push","title":"Array.push","description":"Mutates an array by appending the given elements and returning the new length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax array.push(element1, ..., elementN) Parameters  element1, ..., elementN The elements to add to the end of the array.  Returns The new length property of the object upon which the method was called. Description The push method is useful for easily appending values to an array. push is intentionally generic. This method can be called or applied to objects resembling arrays. The push method relies on a length property to determine where to start inserting the given values. If the length property cannot be converted into a number, the index used is 0. This includes the possibility of length being nonexistent, in which case length will also be created. The only native, array-like objects are strings, although they are not suitable in applications of this method, as strings are immutable. Examples Example: Adding elements to an array The following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: \"soccer\", \"baseball\", \"football\" and \"swimming\". \r           var sports = [\"soccer\", \"baseball\"]; sports.push(\"football\", \"swimming\");\r          Example: Adding elements to an array The following code creates the sports array containing two elements, then appends two elements to it. After the code executes, sports contains 4 elements: \"soccer\", \"baseball\", \"football\" and \"swimming\". \r           var sports = [\"soccer\", \"baseball\"]; sports.push(\"football\", \"swimming\");\r          See Also  pop shift unshift concat"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/splice","title":"Array.splice","description":"Changes the content of an array, adding new elements while removing old elements.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax array.splice(index , howMany[, element1[, ...[, elementN]]]) array.splice(index[, howMany[, element1[, ...[, elementN]]]]) Parameters  index Index at which to start changing the array. If negative, will begin that many elements from the end.   howMany An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.   element1, ..., elementN The elements to add to the array. If you don't specify any elements, splice simply removes elements from the array.  Returns An array containing the removed elements. If only one element is removed, an array of one element is returned. Description If you specify a different number of elements to insert than the number you're removing, the array will have a different length at the end of the call. Backward Compatibility JavaScript 1.2 The splice method returns the element removed, if only one element is removed (howMany parameter is 1); otherwise, the method returns an array containing the removed elements. Note that the last browser to use JavaScript 1.2 was Netscape Navigator 4, so you can depend on splice always returning an array. JavaScript 1.2 The splice method returns the element removed, if only one element is removed (howMany parameter is 1); otherwise, the method returns an array containing the removed elements. Note that the last browser to use JavaScript 1.2 was Netscape Navigator 4, so you can depend on splice always returning an array. Examples Example: Using splice The following script illustrate the use of splice: \r           \/\/ assumes a print function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; print(\"myFish: \" + myFish);  var removed = myFish.splice(2, 0, \"drum\"); print(\"After adding 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(3, 1); print(\"After removing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(2, 1, \"trumpet\"); print(\"After replacing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\"); print(\"After replacing 2: \" + myFish); print(\"removed is: \" + removed);\r          This script displays:  myFish: angel,clown,mandarin,surgeon After adding 1: angel,clown,drum,mandarin,surgeon removed is:  After removing 1: angel,clown,drum,surgeon removed is: mandarin After replacing 1: angel,clown,trumpet,surgeon removed is: drum After replacing 2: parrot,anemone,blue,trumpet,surgeon removed is: angel,clown  Example: Using splice The following script illustrate the use of splice: \r           \/\/ assumes a print function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; print(\"myFish: \" + myFish);  var removed = myFish.splice(2, 0, \"drum\"); print(\"After adding 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(3, 1); print(\"After removing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(2, 1, \"trumpet\"); print(\"After replacing 1: \" + myFish); print(\"removed is: \" + removed);  removed = myFish.splice(0, 2, \"parrot\", \"anemone\", \"blue\"); print(\"After replacing 2: \" + myFish); print(\"removed is: \" + removed);\r          This script displays:  myFish: angel,clown,mandarin,surgeon After adding 1: angel,clown,drum,mandarin,surgeon removed is:  After removing 1: angel,clown,drum,surgeon removed is: mandarin After replacing 1: angel,clown,trumpet,surgeon removed is: drum After replacing 2: parrot,anemone,blue,trumpet,surgeon removed is: angel,clown"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/isArray","title":"Array.isArray","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/prototype","title":"Array.prototype","description":"Represents the prototype for the Array constructor. Description Array instances inherit from Array.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all Array instances. Properties  constructor Specifies the function that creates an object's prototype. length Reflects the number of elements in an array.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toSource, toLocaleString, toString, unwatch, valueOf, watch  Methods Mutator methods These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.  Accessor methods  These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.  Iteration methods Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.  Generic methods Many methods on the JavaScript Array object are designed to be generally applied to all objects which \"look like\" Arrays. That is, they can be used on any object which has a length property, and which can usefully be accessed using numeric property names (as with array[5] indexing).  Some methods, such as join, only read the length and numeric properties of the object they are called on. Others, like reverse, require that the object's numeric properties and length be mutable; these methods can therefore not be called on objects like String, which does not permit its length property or synthesized numeric properties to be set.   concat join pop push reverse shift slice sort splice toSource toString unshift   Introduced in JavaScript 1.6  every filter forEach indexOf lastIndexOf map some    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   Mutator methods These methods modify the array:  pop Removes the last element from an array and returns that element. push Adds one or more elements to the end of an array and returns the new length of the array. reverse Reverses the order of the elements of an array -- the first becomes the last, and the last becomes the first. shift Removes the first element from an array and returns that element. sort Sorts the elements of an array. splice Adds and\/or removes elements from an array. unshift Adds one or more elements to the front of an array and returns the new length of the array.  Accessor methods  These methods do not modify the array and return some representation of the array.  concat Returns a new array comprised of this array joined with other array(s) and\/or value(s). join Joins all elements of an array into a string. slice Extracts a section of an array and returns a new array. toSource Non-standard      Returns an array literal representing the specified array; you can use this value to create a new array. Overrides the Object.prototype.toSource method. toString Returns a string representing the array and its elements. Overrides the Object.prototype.toString method. indexOf  Requires JavaScript 1.6  Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. lastIndexOf  Requires JavaScript 1.6  Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.  Iteration methods Several methods take as arguments functions to be called back while processing the array. When these methods are called, the length of the array is sampled, and any element added beyond this length from within the callback is not visited. Other changes to the array (setting the value of or deleting an element) may affect the results of the operation if the method visits the changed element afterwards. While the specific behavior of these methods in such cases is well-defined, you should not rely upon it so as not to confuse others who might read your code. If you must mutate the array, copy into a new array instead.  filter  Requires JavaScript 1.6  Creates a new array with all of the elements of this array for which the provided filtering function returns true. forEach  Requires JavaScript 1.6  Calls a function for each element in the array. every  Requires JavaScript 1.6  Returns true if every element in this array satisfies the provided testing function. map  Requires JavaScript 1.6  Creates a new array with the results of calling a provided function on every element in this array. some  Requires JavaScript 1.6  Returns true if at least one element in this array satisfies the provided testing function. reduce  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value. reduceRight  Requires JavaScript 1.8  Apply a function simultaneously against two values of the array (from right-to-left) as to reduce it to a single value.  Generic methods Many methods on the JavaScript Array object are designed to be generally applied to all objects which \"look like\" Arrays. That is, they can be used on any object which has a length property, and which can usefully be accessed using numeric property names (as with array[5] indexing).  Some methods, such as join, only read the length and numeric properties of the object they are called on. Others, like reverse, require that the object's numeric properties and length be mutable; these methods can therefore not be called on objects like String, which does not permit its length property or synthesized numeric properties to be set.   concat join pop push reverse shift slice sort splice toSource toString unshift   Introduced in JavaScript 1.6  every filter forEach indexOf lastIndexOf map some    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   See also  Core JavaScript 1.5 Reference:Global Objects:Array Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/constructor","title":"Array.constructor","description":"Summary  Returns a reference to the Array function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.    Property of Array   Implemented in: JavaScript 1.1, NES 2.0   ECMA Version: ECMA-262    Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToSource","title":"Object.ToSource","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ToString","title":"Object.ToString","description":"Returns a string representing the object.    Method of Object     Implemented in JavaScript 1.0   ECMAScript Edition ECMSScript 1st Edition    Syntax object.toString() Description Every object has a toString() method that is automatically called when the object is to be represented as a text value or when an object is referred to in a manner in which a string is expected. By default, the toString() method is inherited by every object descended from Object. If this method is not overridden in a custom object, toString() returns \"[object type]\", where type is the object type. The following code illustrates this:  var o = new Object(); o.toString();           \/\/ returns [object Object]  Starting in JavaScript 1.8.5 toString() called on null returns [object Null], and undefined returns [object Undefined], as defined in the 5th Edition of ECMAScript and a subsequent Errata. See Using toString to detect object type. Examples Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         Overriding the default toString method You can create a function to be called in place of the default toString() method. The toString() method takes no arguments and should return a string. The toString() method you create can be any value you want, but it will be most useful if it carries information about the object. The following code defines the Dog object type and creates theDog, an object of type Dog: \r           function Dog(name,breed,color,sex) {    this.name=name;    this.breed=breed;    this.color=color;    this.sex=sex; }  theDog = new Dog(\"Gabby\",\"Lab\",\"chocolate\",\"female\");\r          If you call the toString() method on this custom object, it returns the default value inherited from Object:  theDog.toString(); \/\/returns [object Object]  The following code creates and assigns dogToString() to override the default toString() method. This function generates a string containing the name, breed, color, and sex of the object, in the form \"property = value;\". \r           Dog.prototype.toString = function dogToString() {   var ret = \"Dog \" + this.name + \" is a \" + this.sex + \" \" + this.color + \" \" + this.breed;   return ret; }\r          With the preceding code in place, any time theDog is used in a string context, JavaScript automatically calls the dogToString() function, which returns the following string:  Dog Gabby is a female chocolate Lab  Using toString() to detect object class toString() can be used with every object and allows you to get its class. To use the Object.prototype.toString() with every object, you need to call Function.prototype.call() or Function.prototype.apply() on it, passing the object you want to inspect as the first parameter called thisArg. \r           var toString = Object.prototype.toString;  toString.call(new Date); \/\/ [object Date] toString.call(new String); \/\/ [object String] toString.call(Math); \/\/ [object Math]  \/\/Since JavaScript 1.8.5 toString.call(undefined); \/\/ [object Undefined] toString.call(null); \/\/ [object Null]\r         See Also  toSource valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/ValueOf","title":"Object.ValueOf","description":"Summary  Returns the primitive value of the specified object     Method of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax   valueOf()    Parameters  None.   Description  JavaScript calls the valueOf method to convert an object to a primitive value. You rarely need to invoke the valueOf method yourself; JavaScript automatically invokes it when encountering an object where a primitive value is expected. By default, the valueOf method is inherited by every object descended from Object. Every built-in core object overrides this method to return an appropriate value. If an object has no primitive value, valueOf returns the object itself, which is displayed as:   [object Object]  You can use valueOf within your own code to convert a built-in object into a primitive value. When you create a custom object, you can override Object.valueOf to call a custom method instead of the default Object method.   Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function. Overriding valueOf for custom objects  You can create a function to be called in place of the default valueOf method. Your function must take no arguments. Suppose you have an object type myNumberType and you want to create a valueOf method for it. The following code assigns a user-defined function to the object's valueOf method:   myNumberType.prototype.valueOf = new Function(functionText)  With the preceding code in place, any time an object of type myNumberType is used in a context where it is to be represented as a primitive value, JavaScript automatically calls the function defined in the preceding code. An object's valueOf method is usually invoked by JavaScript, but you can invoke it yourself as follows:   myNumber.valueOf()  Note Objects in string contexts convert via the toString method, which is different from String objects converting to string primitives using valueOf. All objects have a string conversion, if only \"[object type]\". But many objects do not convert to number, boolean, or function.See Also  parseInt toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/pop","title":"Array.pop","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/reverse","title":"Array.reverse","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/shift","title":"Array.shift","description":"Removes the first element from an array and returns that element. This method changes the length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition   Syntax array.shift() Description The shift method removes the element at the zeroeth index and shifts the values at consecutive indexes down, then returns the removed value. shift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner. Examples Example: Removing an element from an array The following code displays the myFish array before and after removing its first element. It also displays the removed element:  \/\/ assumes a println function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; println(\"myFish before: \" + myFish); var shifted = myFish.shift(); println(\"myFish after: \" + myFish); println(\"Removed this element: \" + shifted);  This example displays the following:  myFish before: angel,clown,mandarin,surgeon myFish after: clown,mandarin,surgeon Removed this element: angel  Example: Removing an element from an array The following code displays the myFish array before and after removing its first element. It also displays the removed element:  \/\/ assumes a println function is defined var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"]; println(\"myFish before: \" + myFish); var shifted = myFish.shift(); println(\"myFish after: \" + myFish); println(\"Removed this element: \" + shifted);  This example displays the following:  myFish before: angel,clown,mandarin,surgeon myFish after: clown,mandarin,surgeon Removed this element: angel  See also  pop push unshift"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/sort","title":"Array.sort","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/toSource","title":"Array.toSource","description":"Summary  Returns a string representing the source code of the array.     Method of Array     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  array.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Array object, toSource returns the following string indicating that the source code is not available:  function Array() {     [native code] }   For instances of Array, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an array.   Examples   Example: Examining the source code of an array  To examine the source code of an array:  alpha = new Array(\"a\", \"b\", \"c\"); alpha.toSource()                    \/\/returns [\"a\", \"b\", \"c\"]   Example: Examining the source code of an array  To examine the source code of an array:  alpha = new Array(\"a\", \"b\", \"c\"); alpha.toSource()                    \/\/returns [\"a\", \"b\", \"c\"]   See Also  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/concat","title":"Array.concat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/unshift","title":"Array.unshift","description":"Adds one or more elements to the beginning of an array and returns the new length of the array.    Method of Array     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax arrayName.unshift(element1, ..., elementN)  Parameters  element1, ..., elementN The elements to add to the front of the array.  Returns The new length property of the object upon which the method was called.   Description The unshift method inserts the given values to the beginning of an array-like object. unshift is intentionally generic; this method can be called or applied to objects resembling arrays. Objects which do not contain a length property reflecting the last in a series of consecutive, zero-based numerical properties may not behave in any meaningful manner. Examples Example: Adding elements to an array The following code displays the myFish array before and after adding elements to it.  \/\/ assumes a println function exists myFish = [\"angel\", \"clown\"]; println(\"myFish before: \" + myFish); unshifted = myFish.unshift(\"drum\", \"lion\"); println(\"myFish after: \" + myFish); println(\"New length: \" + unshifted);  This example displays the following:  myFish before: [\"angel\", \"clown\"] myFish after: [\"drum\", \"lion\", \"angel\", \"clown\"] New length: 4  Example: Adding elements to an array The following code displays the myFish array before and after adding elements to it.  \/\/ assumes a println function exists myFish = [\"angel\", \"clown\"]; println(\"myFish before: \" + myFish); unshifted = myFish.unshift(\"drum\", \"lion\"); println(\"myFish after: \" + myFish); println(\"New length: \" + unshifted);  This example displays the following:  myFish before: [\"angel\", \"clown\"] myFish after: [\"drum\", \"lion\", \"angel\", \"clown\"] New length: 4  See Also  pop push shift"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/toString","title":"Array.toString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/lastIndexOf","title":"Array.lastIndexOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/filter","title":"Array.filter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/forEach","title":"Array.forEach","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/every","title":"Array.every","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/map","title":"Array.map","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/some","title":"Array.some","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/ReduceRight","title":"Array.ReduceRight","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Array\/Reduce","title":"Array.Reduce","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays","title":"JavaScript typed arrays","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/prototype","title":"Function.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/arguments","title":"Function.arguments","description":"Summary  An array-like object corresponding to the arguments passed to a function.  Description Use the arguments object available within functions instead of Function.arguments. Notes  In the case of recursion, i.e. if function f appears several times on the call stack, the value of f.arguments represents the arguments corresponding to the most recent invocation of the function.   Example  function f(n) { g(n-1) } function g(n) {   print(\"before: \" + g.arguments[0]);   if(n>0)     f(n);   print(\"after: \" + g.arguments[0]); } f(2)  outputs:  before: 1 before: 0 after: 0 after: 1"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/arity","title":"Function.arity","description":"Specifies the number of arguments expected by the function.    Property of Function     Implemented in JavaScript 1.2   ECMAScript Edition None    Description The arity property no longer exists and has been replaced by the Function.prototype.length property."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/length","title":"Function.length","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/constructor","title":"Function.constructor","description":"Summary  Returns a reference to the Function function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Function     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/caller","title":"Function.caller","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/name","title":"Function.name","description":"The name of the function.    Property of Function     Implemented in JavaScript ?   ECMAScript Edition None    Description The name property returns the name of a function, or an empty string for anonymous functions: function doSomething() {} alert(doSomething.name); \/\/ alerts \"doSomething\"  Functions created with the syntax new Function(...) or just Function(...) have their name property set to \"anonymous\" on Firefox and Safari, or to an empty string on Chrome and Opera. This property is not supported on Internet Explorer. Note that in these examples anonymous functions are created, so name returns an empty string: var f = function() { }; var object = {   someMethod: function() {} };  alert(f.name == \"\"); \/\/ true alert(object.someMethod.name == \"\"); \/\/ also true  You can define a function with a name in a function expression: var object = {   someMethod: function object_someMethod() {} }; alert(object.someMethod.name); \/\/ alerts \"object_someMethod\"  try { object_someMethod } catch(e) { alert(e); } \/\/ ReferenceError: object_someMethod is not defined  You cannot change the name of a function, this property is read-only: var object = {   \/\/ anonymous   someMethod: function(){} }; object.someMethod.name = \"someMethod\"; alert(object.someMethod.name); \/\/ empty string, someMethod is anonymous  Examples You can use obj.constructor.name to check the \"class\" of an object: function a() { }  var b = new a(); alert(b.constructor.name); \/\/Alerts \"a\""},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/bind","title":"Function.bind","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/apply","title":"Function.apply","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/call","title":"Function.call","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/isGenerator","title":"Function.isGenerator","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/toSource","title":"Function.toSource","description":"Summary  Returns a string representing the source code for the function.     Method of Function     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  var sourceString = function.toSource();   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Function object, toSource returns the following string indicating that the source code is not available:  function Function() {    [native code] }   For custom functions, toSource returns the JavaScript source that defines the object as a string.  This method is usually called internally by JavaScript and not explicitly in code. You can call toSource while debugging to examine the contents of an object.   See Also  toString Object.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Function\/toString","title":"Function.toString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/MAX_VALUE","title":"Number.MAX_VALUE","description":"Summary  The maximum numeric value representable in JavaScript.     Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  The MAX_VALUE property has a value of approximately 1.79E+308. Values larger than MAX_VALUE are represented as \"Infinity\". Because MAX_VALUE is a static property of Number, you always use it as Number.MAX_VALUE, rather than as a property of a Number object you created.   Examples   Example: Using MAX_VALUE  The following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 * num2 <= Number.MAX_VALUE)    func1(); else    func2();   Example: Using MAX_VALUE  The following code multiplies two numeric values. If the result is less than or equal to MAX_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 * num2 <= Number.MAX_VALUE)    func1(); else    func2();"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/MIN_VALUE","title":"Number.MIN_VALUE","description":"The smallest positive numeric value representable in JavaScript.    Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description The MIN_VALUE property is the number closest to 0, not the most negative number, that JavaScript can represent. MIN_VALUE has a value of approximately 5e-324. Values smaller than MIN_VALUE (\"underflow values\") are converted to 0. Because MIN_VALUE is a static property of Number, you always use it as Number.MIN_VALUE, rather than as a property of a Number object you created. Examples Example: Using MIN_VALUE The following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 \/ num2 >= Number.MIN_VALUE)    func1() else    func2()  Example: Using MIN_VALUE The following code divides two numeric values. If the result is greater than or equal to MIN_VALUE, the func1 function is called; otherwise, the func2 function is called.  if (num1 \/ num2 >= Number.MIN_VALUE)    func1() else    func2()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/NEGATIVE_INFINITY","title":"Number.NEGATIVE_INFINITY","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/NaN","title":"Number.NaN","description":"A value representing Not-A-Number.    Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description Number.NaN is the same thing than NaN. See the NaN page for more info."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/POSITIVE_INFINITY","title":"Number.POSITIVE_INFINITY","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/prototype","title":"Number.prototype","description":"Represents the prototype for the Number constructor. Description All Number instances inherit from Number.prototype. The prototype object of the Number constructor can be modified to affect all Number instances. Properties  constructor Returns the function that created this object's instance. By default this is the Number object.    Properties inherited from  Object:__parent__, __proto__   Methods  toExponential Returns a string representing the number in exponential notation. toFixed Returns a string representing the number in fixed-point notation. toLocaleString Returns a human readable string representing the number using the locale of the environment. Overrides the Object.prototype.toLocaleString method. toPrecision Returns a string representing the number to a specified precision in fixed-point or exponential notation. toSource Non-standard      Returns an object literal representing the specified Number object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, watch"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/constructor","title":"Number.constructor","description":"Summary  Returns a reference to the Number function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toExponential","title":"Number.toExponential","description":"Returns a string representing the Number object in exponential notation    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition     Syntax  number.toExponential( [fractionDigits] )   Parameter   fractionDigits  An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number.   Returns  A string representing a Number object in exponential notation with one digit before the decimal point, rounded to fractionDigits digits after the decimal point. If the fractionDigits argument is omitted, the number of digits after the decimal point defaults to the number of digits necessary to represent the value uniquely. If you use the toExponential method for a numeric literal and the numeric literal has no exponent and no decimal point, leave a space before the dot that precedes the method call to prevent the dot from being interpreted as a decimal point. If a number has more digits that requested by the fractionDigits parameter, the number is rounded to the nearest number represented by fractionDigits digits. See the discussion of rounding in the description of the toFixed method, which also applies to toExponential.   Example   var num=77.1234;  alert(\"num.toExponential() is \" + num.toExponential()); \/\/displays 7.71234e+1  alert(\"num.toExponential(4) is \" + num.toExponential(4)); \/\/displays 7.7123e+1  alert(\"num.toExponential(2) is \" + num.toExponential(2)); \/\/displays 7.71e+1  alert(\"77.1234.toExponential() is \" + 77.1234.toExponential()); \/\/displays 7.71234e+1  alert(\"77 .toExponential() is \" + 77 .toExponential()); \/\/displays 7.7e+1   See Also  Number.toFixed(), Number.toPrecision(), Number.toString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toFixed","title":"Number.toFixed","description":"Formats a number using fixed-point notation    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition    Syntax number.toFixed( [digits] ) Parameter  digits The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as 0.  Returns A string representation of number that does not use exponential notation and has exactly digits digits after the decimal place. The number is rounded if necessary, and the fractional part is padded with zeros if necessary so that it has the specified length. If number is greater than 1e+21, this method simply calls Number.toString() and returns a string in exponential notation. Throws  RangeError If digits is too small or too large. Values between 0 and 20, inclusive, will not cause a RangeError. Implementations are allowed to support larger and smaller values as well.   TypeError If this method is invoked on an object that is not a Number.  Example  var n = 12345.6789;  n.toFixed();              \/\/ Returns \"12346\": note rounding, no fractional part  n.toFixed(1);             \/\/ Returns \"12345.7\": note rounding  n.toFixed(6);             \/\/ Returns \"12345.678900\": note added zeros  (1.23e+20).toFixed(2);    \/\/ Returns \"123000000000000000000.00\"  (1.23e-10).toFixed(2);    \/\/ Returns \"0.00\"  2.34.toFixed(1);          \/\/ Returns \"2.3\"  -2.34.toFixed(1);         \/\/ Returns -2.3 (due to operator precedence, negative numbers don't return a string...)  (-2.24).toFixed(1);       \/\/ Returns \"-2.3\" (...unless you use parentheses)  See Also Number.toExponential(), Number.toLocaleString(), Number.toPrecision(), Number.toString(), Number.toSource(), Number.valueOf()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/ToLocaleString","title":"Number.ToLocaleString","description":"Syntax number.toLocaleString() Examples \r           var number = 3500 console.log(number.toLocaleString()); \/* Displays \"3,500\" in English locale *\/\r          See Also Number.toString()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toPrecision","title":"Number.toPrecision","description":"Returns a string representing the Number object to the specified precision.    Method of Number     Implemented in JavaScript 1.5   ECMAScript Edition ECMAScript 3rd Edition    Syntax number.toPrecision( [ precision ] ) Parameter  precision An integer specifying the number of significant digits.  Returns A string representing a Number object in fixed-point or exponential notation rounded to precision significant digits. See the discussion of rounding in the description of the toFixed method, which also applies to toPrecision. If the precision argument is omitted, behaves as Number.toString. If it is a non-integer value, it is rounded to the nearest integer. After rounding, if that value is not between 1 and 100 (inclusive), a RangeError is thrown. ECMA-262 only requires a precision of up to 21 significant digits. Other implementations may not support precisions higher than required by the standard. Example  var num = 5.123456; println(\"num.toPrecision() is \" + num.toPrecision());   \/\/displays 5.123456 println(\"num.toPrecision(5) is \" + num.toPrecision(5)); \/\/displays 5.1235 println(\"num.toPrecision(2) is \" + num.toPrecision(2)); \/\/displays 5.1 println(\"num.toPrecision(1) is \" + num.toPrecision(1)); \/\/displays 5  See Also  toExponential toFixed toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toSource","title":"Number.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of Number     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  number.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in Number object, toSource returns the following string indicating that the source code is not available:  function Number() {[native code]}   For instances of Number, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/toString","title":"Number.toString","description":"Summary  Returns a string representing the specified Number object     Method of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Syntax  number.toString( [radix] )   Parameter   radix  An integer between 2 and 36 specifying the base to use for representing numeric values.   Description  The Number object overrides the toString method of the Object object; it does not inherit Object.toString. For Number objects, the toString method returns a string representation of the object in the specified radix. The toString method parses its first argument, and attempts to return a string representation in the specified radix (base). For radixes above 10, the letters of the alphabet indicate numerals greater than 9. For example, for hexadecimal numbers (base 16), A through F are used. If toString is given a radix not between 2 and 36, an exception is thrown. If the radix is not specified, JavaScript assumes the preferred radix is 10.   Examples  var count = 10; print(count.toString());   \/\/ displays \"10\" print((17).toString());    \/\/ displays \"17\"  var x = 7; print(x.toString(2));      \/\/ displays \"111\"   See Also  Number.prototype.toExponential Number.prototype.toLocaleString Number.prototype.toPrecision Number.prototype.toFixed Number.prototype.toSource Number.prototype.valueOf"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Number\/valueOf","title":"Number.valueOf","description":"Summary  Returns the primitive value of a Number object.     Method of Number     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Syntax number.valueOf() Parameters  None.   Description  The valueOf method of Number returns the primitive value of a Number object as a number data type. This method is usually called internally by JavaScript and not explicitly in code.   Examples  var x = new Number(); print(x.valueOf());     \/\/ prints \"0\"   See Also  Object.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperty","title":"Object.defineProperty","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/create","title":"Object.create","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/prototype","title":"Object.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineProperties","title":"Object.defineProperties","description":"Defines new or modifies existing properties directly on an object, returning the object.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.defineProperties(obj, props) Parameters  obj The object on which to define or modify properties. props An object whose own enumerable properties constitute descriptors for the properties to be defined or modified.  Description Object.defineProperties, in essence, defines all properties corresponding to the enumerable own properties of props on the object objrops object. Assuming a pristine execution environment with all names and properties referring to their initial values, Object.defineProperties is almost completely equivalent (note the comment in isCallable) to the following reimplementation in JavaScript: \r           function defineProperties(obj, properties) {   function convertToDescriptor(desc)   {     function hasProperty(obj, prop)     {       return Object.prototype.hasOwnProperty.call(obj, prop);     }      function isCallable(v)     {       \/\/ NB: modify as necessary if other values than functions are callable.       return typeof v === \"function\";     }      if (typeof desc !== \"object\" || desc === null)       throw new TypeError(\"bad desc\");      var d = {};     if (hasProperty(desc, \"enumerable\"))       d.enumerable = !!obj.enumerable;     if (hasProperty(desc, \"configurable\"))       d.configurable = !!obj.configurable;     if (hasProperty(desc, \"value\"))       d.value = obj.value;     if (hasProperty(desc, \"writable\"))       d.writable = !!desc.writable;     if (hasProperty(desc, \"get\"))     {       var g = desc.get;       if (!isCallable(g) && g !== \"undefined\")         throw new TypeError(\"bad get\");       d.get = g;     }     if (hasProperty(desc, \"set\"))     {       var s = desc.set;       if (!isCallable(s) && s !== \"undefined\")         throw new TypeError(\"bad set\");       d.set = s;     }      if ((\"get\" in d || \"set\" in d) && (\"value\" in d || \"writable\" in d))       throw new TypeError(\"identity-confused descriptor\");      return d;   }    if (typeof obj !== \"object\" || obj === null)     throw new TypeError(\"bad obj\");    properties = Object(properties);   var keys = Object.keys(properties);   var descs = [];   for (var i = 0; i < keys.length; i++)     descs.push([keys[i], convertToDescriptor(properties[keys[i]])]);   for (var i = 0; i < descs.length; i++)     Object.defineProperty(obj, descs[i][0], descs[i][1]);    return obj; }\r          Browser compatibility Based on Kangax's compat tables.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty Object.keys Browser compatibility Based on Kangax's compat tables.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2) 5 (previous versions untested) 9 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty Object.keys"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getOwnPropertyDescriptor","title":"Object.getOwnPropertyDescriptor","description":"Syntax Object.getOwnPropertyDescriptor(obj, prop) Parameters  obj The object in which to look for the property. prop The name of the property whose description is to be retrieved  Description This method permits examination of the precise description of a property. A property in JavaScript consists of a string-valued name and a property descriptor. A property descriptor is a record with some of the following attributes:  value The value associated with the property (data descriptors only). writable true if and only if the value associated with the property may be changed (data descriptors only). get A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only). set A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only). configurable true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. enumerable true if and only if this property shows up during enumeration of the properties on the corresponding object.  Further information about property descriptor attributes can be found on the Object.defineProperty descriptionExamples \r           var o, d;  o = { get foo() { return 17; } }; d = Object.getOwnPropertyDescriptor(o, \"foo\"); \/\/ d is { configurable: true, enumerable: true, get: \/*the getter function*\/, set: undefined }  o = { bar: 42 }; d = Object.getOwnPropertyDescriptor(o, \"bar\"); \/\/ d is { configurable: true, enumerable: true, value: 42, writable: true }  o = {}; Object.defineProperty(o, \"baz\", { value: 8675309, writable: false, enumerable: false }); d = Object.getOwnPropertyDescriptor(o, \"baz\"); \/\/ d is { value: 8675309, writable: false, enumerable: false, configurable: false }\r          Cross-browser compatibility Based on Kangax's compat table.     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 5 8 -- 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  Object.defineProperty"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/keys","title":"Object.keys","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getOwnPropertyNames","title":"Object.getOwnPropertyNames","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/GetPrototypeOf","title":"Object.GetPrototypeOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/preventExtensions","title":"Object.preventExtensions","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isExtensible","title":"Object.isExtensible","description":"Determines if an object is extensible (whether it can have new properties added to it).    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.isExtensible(obj) Parameters  obj The object which should be checked.  Description Objects are extensible by default: they can have new properties added to them, and (in engines that support __proto__   Deprecated   their __proto__ property) can be modified. An object can be marked as non-extensible using Object.preventExtensions, Object.seal, or Object.freeze. Examples \r           \/\/ New objects are extensible. var empty = {}; assert(Object.isExtensible(empty) === true);  \/\/ ...but that can be changed. Object.preventExtensions(empty); assert(Object.isExtensible(empty) === false);  \/\/ Sealed objects are by definition non-extensible. var sealed = Object.seal({}); assert(Object.isExtensible(sealed) === false);  \/\/ Frozen objects are also by definition non-extensible. var frozen = Object.freeze({}); assert(Object.isExtensible(frozen) === false);\r          Cross-browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table.See also  Object.preventExtensions Object.seal Object.isSealed Object.freeze Object.isFrozen"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/seal","title":"Object.seal","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/freeze","title":"Object.freeze","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isSealed","title":"Object.isSealed","description":"Determine if an object is sealed.    Method of Object     Implemented in JavaScript 1.8.5   ECMAScript Edition ECMAScript 5th Edition    Syntax Object.isSealed(obj) Parameters  obj The object which should be checked.  Description Returns true if the object is sealed, otherwise false. An object is sealed if it is non-extensible and if all its properties are non-configurable and therefore not removable (but not necessarily non-writable). Examples \r           \/\/ Objects aren't sealed by default. var empty = {}; assert(Object.isSealed(empty) === false);  \/\/ If you make an empty object non-extensible, it is vacuously sealed. Object.preventExtensions(empty); assert(Object.isSealed(empty) === true);  \/\/ The same is not true of a non-empty object, unless its properties are all non-configurable. var hasProp = { fee: \"fie foe fum\" }; Object.preventExtensions(hasProp); assert(Object.isSealed(hasProp) === false);  \/\/ But make them all non-configurable and the object becomes sealed. Object.defineProperty(hasProp, \"fee\", { configurable: false }); assert(Object.isSealed(hasProp) === true);  \/\/ The easiest way to seal an object, of course, is Object.seal. var sealed = {}; Object.seal(sealed); assert(Object.isSealed(sealed) === true);  \/\/ A sealed object is, by definition, non-extensible. assert(Object.isExtensible(sealed) === false);  \/\/ A sealed object might be frozen, but it doesn't have to be. assert(Object.isFrozen(sealed) === true); \/\/ all properties also non-writable  var s2 = Object.seal({ p: 3 }); assert(Object.isFrozen(s2) === false); \/\/ \"p\" is still writable  var s3 = Object.seal({ get p() { return 0; } }); assert(Object.isFrozen(s3) === true); \/\/ only configurability matters for accessor properties\r          Examples \r           \/\/ Objects aren't sealed by default. var empty = {}; assert(Object.isSealed(empty) === false);  \/\/ If you make an empty object non-extensible, it is vacuously sealed. Object.preventExtensions(empty); assert(Object.isSealed(empty) === true);  \/\/ The same is not true of a non-empty object, unless its properties are all non-configurable. var hasProp = { fee: \"fie foe fum\" }; Object.preventExtensions(hasProp); assert(Object.isSealed(hasProp) === false);  \/\/ But make them all non-configurable and the object becomes sealed. Object.defineProperty(hasProp, \"fee\", { configurable: false }); assert(Object.isSealed(hasProp) === true);  \/\/ The easiest way to seal an object, of course, is Object.seal. var sealed = {}; Object.seal(sealed); assert(Object.isSealed(sealed) === true);  \/\/ A sealed object is, by definition, non-extensible. assert(Object.isExtensible(sealed) === false);  \/\/ A sealed object might be frozen, but it doesn't have to be. assert(Object.isFrozen(sealed) === true); \/\/ all properties also non-writable  var s2 = Object.seal({ p: 3 }); assert(Object.isFrozen(s2) === false); \/\/ \"p\" is still writable  var s3 = Object.seal({ get p() { return 0; } }); assert(Object.isFrozen(s3) === true); \/\/ only configurability matters for accessor properties\r          Cross-browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 4 (2.0) 6 9 -- 5.1         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Based on Kangax's compat table.See also  Object.seal Object.preventExtensions Object.isExtensible  Object.freeze Object.isFrozen"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isFrozen","title":"Object.isFrozen","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/constructor","title":"Object.constructor","description":"Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, \"read-only\").    Property of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description All objects inherit a constructor property from their prototype:  o = new Object \/\/ or o = {} in JavaScript 1.2 o.constructor == Object a = new Array \/\/ or a = [] in JavaScript 1.2 a.constructor == Array n = new Number(3) n.constructor == Number  Even though you cannot construct most HTML objects, you can do comparisons. For example,  document.constructor == Document document.form3.constructor == Form  Examples Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));  Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/proto","title":"Object.proto","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineGetter","title":"Object.defineGetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/defineSetter","title":"Object.defineSetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/eval","title":"Object.eval","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/hasOwnProperty","title":"Object.hasOwnProperty","description":"Returns a boolean indicating whether the object has the specified property.    Method of Object     Implemented in JavaScript ?   ECMAScript Edition ECMAScript 3rd Edition   Syntax obj.hasOwnProperty(prop) Parameters  prop The name of the property to test.  Description Every object descended from Object inherits the hasOwnProperty method. This method can be used to determine whether an object has the specified property as a direct property of that object; unlike the in operator, this method does not check down the object's prototype chain. Examples Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          Example: Using hasOwnProperty to test for a property's existence The following example determines whether the o object contains a property named prop: \r           o = new Object(); o.prop = 'exists';  function changeO() {   o.newprop = o.prop;   delete o.prop; }  o.hasOwnProperty('prop');   \/\/returns true changeO(); o.hasOwnProperty('prop');   \/\/returns false\r          Example: Direct versus inherited properties The following example differentiates between direct properties and properties inherited through the prototype chain: \r           o = new Object(); o.prop = 'exists'; o.hasOwnProperty('prop');             \/\/ returns true o.hasOwnProperty('toString');         \/\/ returns false o.hasOwnProperty('hasOwnProperty');   \/\/ returns false\r          Example: Iterating over the properties of an object The following example shows how to iterate over the properties of an object without executing on inherit properties. \r           var buz = {     fog: 'stack' };  for (var name in buz) {     if (buz.hasOwnProperty(name)) {         alert(\"this is fog (\" + name + \") for sure. Value: \" + buz[name]);     }     else {         alert(name); \/\/ toString or something else     } }\r          See also for...in in inheritance"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/isPrototypeOf","title":"Object.isPrototypeOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/lookupGetter","title":"Object.lookupGetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/noSuchMethod","title":"Object.noSuchMethod","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/propertyIsEnumerable","title":"Object.propertyIsEnumerable","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/lookupSetter","title":"Object.lookupSetter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/unwatch","title":"Object.unwatch","description":"Removes a watchpoint set with the watch() method.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax unwatch(prop)  Parameters  prop The name of a property of the object to stop watching.  Description The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. By default, this method is inherited by every object descended from Object. Note: The reason for unwatch() to take the property name prop as its only parameter is due to the \"single handler allowing\" behavior of the watch() method.Examples See watch()."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/constructor","title":"RegExp.constructor","description":"Summary  Returns a reference to the RegExp function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of RegExp     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See Object.constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/prototype","title":"RegExp.prototype","description":"Represents the prototype object for the RegExp constructor. Description See RegExp for a description of RegExp instances. RegExp instances inherit from RegExp.prototype. Modifications to the prototype object are propagated to all RegExp instances. Properties See also Deprecated RegExp Properties Note that several of the RegExp properties have both long and short (Perl-like) names. Both names always refer to the same value. Perl is the programming language from which JavaScript modeled its regular expressions.  constructor Specifies the function that creates an object's prototype. global Whether to test the regular expression against all possible matches in a string, or only against the first. ignoreCase Whether to ignore case while attempting a match in a string. lastIndex The index at which to start the next match. multiline Whether or not to search in strings across multiple lines. source The text of the pattern. sticky  New in Firefox 3  Non-standard      Whether or not the search is sticky.    Properties inherited from  Object:__parent__, __proto__   Methods   See also Deprecated RegExp Methods  exec Executes a search for a match in its string parameter. test Tests for a match in its string parameter. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method.    Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, valueOf, watch   See also  RegExp Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/watch","title":"Object.watch","description":"Watches for a property to be assigned a value and runs a function when that occurs.    Method of Object     Implemented in JavaScript 1.8.6   ECMAScript Edition none    Syntax object.watch(prop, handler)  Parameters  prop The name of a property of the object on which you wish to monitor changes.   handler A function to call when the specified property's value changes.  Description Warning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Compatibility for details. Watches for assignment to a property named prop in this object, calling handler(prop, oldval, newval) whenever prop is set and storing the return value in that property. A watchpoint can filter (or nullify) the value assignment, by returning a modified newval (or by returning oldval). If you delete a property for which a watchpoint has been set, that watchpoint does not disappear. If you later recreate the property, the watchpoint is still in effect. To remove a watchpoint, use the unwatch() method. By default, the watch method is inherited by every object descended from Object. The JavaScript debugger has functionality similar to that provided by this method, as well as other debugging options. For information on the debugger, see Venkman. In Firefox, handler is only called from assignments in script, not from native code. For example, window.watch('location', myHandler) will not call myHandler if the user clicks a link to an anchor within the current document. However, window.location += '#myAnchor' will call myHandler. Note: Calling watch() on an object for a specific property overrides and previous handler attached for that property. Examples Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Example: Using watch and unwatch \r           var o = {p:1}; o.watch(\"p\",   function (id, oldval, newval) {     console.log(\"o.\" + id + \" changed from \" + oldval + \" to \" + newval);     return newval;   });  o.p = 2; o.p = 3; delete o.p; o.p = 4;  o.unwatch('p'); o.p = 5;\r          This script displays the following: o.p changed from 1 to 2 o.p changed from 2 to 3 o.p changed from undefined to 4  Example: Using watch to validate an object's properties You can use watch to test any assignment to an object's properties. This example ensures that every Person always has a valid name and an age between 0 and 200. \r           Person = function(name,age) {   this.watch(\"age\", Person.prototype._isValidAssignment);   this.watch(\"name\", Person.prototype._isValidAssignment);   this.name = name;   this.age = age; }  Person.prototype.toString = function() {   return this.name + \", \" + this.age; };  Person.prototype._isValidAssignment = function(id, oldval, newval) {   if (id === \"name\" && (!newval || newval.length > 30)) {     throw new RangeError(\"invalid name for \" + this);   }   if (id === \"age\"  && (newval < 0 || newval > 200)) {     throw new RangeError(\"invalid age for \" + this);   }   return newval; }  will = new Person(\"Will\", 29); print(will);   \/\/ Will, 29  try {   will.name = \"\"; } catch (e) {   print(e); }  try {   will.age = -4; } catch (e) {   print(e); }\r          This script displays the following: Will, 29 RangeError: invalid name for Will, 29 RangeError: invalid age for Will, 29  Compatibility  This Polyfill that offers watch to all ES5 compatible browser Using a Proxy enables you do that even deeper changes to how property assignments work  See also unwatch()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/global","title":"RegExp.global","description":"Summary  Whether or not the \"g\" flag is used with the regular expression.    Property of RegExp instances    Read-only     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: global is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  global is a property of an individual regular expression object. The value of global is true if the \"g\" flag was used; otherwise, false. The \"g\" flag indicates that the regular expression should be tested against all possible matches in a string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/ignoreCase","title":"RegExp.ignoreCase","description":"Summary  Whether or not the \"i\" flag is used with the regular expression.    Property of RegExp instances   Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: ignoreCase is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  ignoreCase is a property of an individual regular expression object. The value of ignoreCase is true if the \"i\" flag was used; otherwise, false. The \"i\" flag indicates that case should be ignored while attempting a match in a string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/multiline","title":"RegExp.multiline","description":"Summary  Reflects whether or not to search in strings across multiple lines.    Property of RegExp instances    Static     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: multiline is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  multiline is a property of an individual regular expression object.. The value of multiline is true if the \"m\" flag was used; otherwise, false. The \"m\" flag indicates that a multiline input string should be treated as multiple lines. For example, if \"m\" is used, \"^\" and \"$\" change from matching at only the start or end of the entire string to the start or end of any line within the string. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/lastIndex","title":"RegExp.lastIndex","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/source","title":"RegExp.source","description":"Summary  A read-only property that contains the text of the pattern, excluding the forward slashes.    Property of RegExp instances    Static     Implemented in: JavaScript 1.2, NES3.0 JavaScript 1.5: source is a property of a RegExp instance, not the RegExp object.     ECMA Version: ECMA-262, Edition 3    Description  source is a property of an individual regular expression object. You cannot change this property directly."},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/test","title":"RegExp.test","description":"Executes the search for a match between a regular expression and a specified string. Returns true or false.    Method of RegExp     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax regexp.test([str])  Parameters  regexp The name of the regular expression. It can be a variable name or a literal.   str The string against which to match the regular expression.  Description When you want to know whether a pattern is found in a string use the test method (similar to the String.search method); for more information (but slower execution) use the exec method (similar to the String.match method). As with exec (or in combination with it), test called multiple times on the same global regular expression instance will advance past the previous match.   Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , test() was implemented incorrectly; when it was called with no parameters, it would match against the value of the previous input (RegExp.input property) instead of against the string \"undefined\". This is fixed; now \/undefined\/.test() correctly results in true, instead of an error.  Examples Example: Using test The following example prints a message which depends on the success of the test: \r           function testinput(re, str){    if (re.test(str)) {       midstring = \" contains \";    } else {       midstring = \" does not contain \";    }    document.write (str + midstring + re.source); }\r          Example: Using test The following example prints a message which depends on the success of the test: \r           function testinput(re, str){    if (re.test(str)) {       midstring = \" contains \";    } else {       midstring = \" does not contain \";    }    document.write (str + midstring + re.source); }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/exec","title":"RegExp.exec","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/toSource","title":"RegExp.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of RegExp     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  regexp.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in RegExp object, toSource returns the following string indicating that the source code is not available:  function RegExp() {[native code]}   For instances of RegExp, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See Also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/replace","title":"String.replace","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RegExp\/toString","title":"RegExp.toString","description":"Summary  Returns a string representing the specified object.     Method of RegExp     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 3rd Edition     Syntax  regexp.toString()   Parameters  None.   Description  The RegExp object overrides the toString method of the Object object; it does not inherit Object.toString. For RegExp objects, the toString method returns a string representation of the regular expression.   Examples   Example: Using toString  The following example displays the string value of a RegExp object:   myExp = new RegExp(\"a+b+c\"); alert(myExp.toString());       \/\/ displays \"\/a+b+c\/\"   Example: Using toString  The following example displays the string value of a RegExp object:   myExp = new RegExp(\"a+b+c\"); alert(myExp.toString());       \/\/ displays \"\/a+b+c\/\"   See Also  Object.prototype.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/length","title":"String.length","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/substring","title":"String.substring","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/substr","title":"String.substr","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/charAt","title":"String.charAt","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/valueOf","title":"String.valueOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/prototype","title":"String.prototype","description":"Represents the String prototype object. Description All String instances inherit from String.prototype. Changes to the String prototype object are propagated to all String instances. Properties  constructor Specifies the function that creates an object's prototype. length Reflects the length of the string. N Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. These properties are read-only.    Properties inherited from  Object:__parent__, __proto__   Methods  Methods unrelated to HTML    charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (\"\"\"). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim  Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the left side of the string. trimRight  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.   HTML wrapper methods     Non-standard  Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.  anchor <a name=\"name\"> (hypertext target) big <big> blink <blink> bold <b> fixed <tt> fontcolor <font color=\"color\"> fontsize <font size=\"size\"> italics <i> link <a href=\"url\"> (link to URL) small <small>. strike <strike> sub <sub> sup <sup>  These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.   Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch   Methods unrelated to HTML    charAt Returns the character at the specified index. charCodeAt Returns a number indicating the Unicode value of the character at the given index. concat Combines the text of two strings and returns a new string. indexOf Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found. lastIndexOf Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found. localeCompare Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. match Used to match a regular expression against a string. quote Non-standard      Wraps the string in double quotes (\"\"\"). replace Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring. search Executes the search for a match between a regular expression and a specified string. slice Extracts a section of a string and returns a new string. split Splits a String object into an array of strings by separating the string into substrings. substr Returns the characters in a string beginning at the specified location through the specified number of characters. substring Returns the characters in a string between two indexes into the string. toLocaleLowerCase The characters within a string are converted to lower case while respecting the current locale. For most languages, this will return the same as toLowerCase. toLocaleUpperCase The characters within a string are converted to upper case while respecting the current locale. For most languages, this will return the same as toUpperCase. toLowerCase Returns the calling string value converted to lower case. toSource Non-standard      Returns an object literal representing the specified object; you can use this value to create a new object. Overrides the Object.prototype.toSource method. toString Returns a string representing the specified object. Overrides the Object.prototype.toString method. toUpperCase Returns the calling string value converted to uppercase. trim  Requires JavaScript 1.8.1  Trims whitespace from the beginning and end of the string. Part of the ECMAScript 5 standard. trimLeft  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the left side of the string. trimRight  Requires JavaScript 1.8.1  Non-standard      Trims whitespace from the right side of the string. valueOf Returns the primitive value of the specified object. Overrides the Object.prototype.valueOf method.   HTML wrapper methods     Non-standard  Each of the following methods returns a copy of the string wrapped inside the appropriate HTML tag.  anchor <a name=\"name\"> (hypertext target) big <big> blink <blink> bold <b> fixed <tt> fontcolor <font color=\"color\"> fontsize <font size=\"size\"> italics <i> link <a href=\"url\"> (link to URL) small <small>. strike <strike> sub <sub> sup <sup>  These methods are of limited use, as they provide only a subset of the available HTML tags and attributes.   Methods inherited from  Object:__defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, toLocaleString, unwatch, watch   Examples Example: Extending string instances with a repeat method The following example creates a method, str_rep, and uses the statement String.prototype.repeat = str_rep to add the method to all String objects. All String instances then have that method, even objects already created. The example then creates an alternate method and overrides the previous method in one of the String objects using the statement s1.repeat = fake_rep. The str_rep method of the remaining String objects is not altered. \r           var s1 = new String(\"a\"); var s2 = new String(\"b\"); var s3 = new String(\"c\");  \/\/ Create a repeat-string-N-times method for all String objects function str_rep(n) {    var s = \"\", t = this.toString();    while (--n >= 0) {      s += t    }    return s; }  String.prototype.repeat = str_rep;  s1a=s1.repeat(3); \/\/ returns \"aaa\" s2a=s2.repeat(5); \/\/ returns \"bbbbb\" s3a=s3.repeat(2); \/\/ returns \"cc\"  \/\/ Create an alternate method and assign it to only one String variable function fake_rep(n) {    return \"repeat \" + this + \" \" + n + \" times.\"; }  s1.repeat = fake_rep s1b=s1.repeat(1); \/\/ returns \"repeat a 1 times.\" s2b=s2.repeat(4); \/\/ returns \"bbbb\" s3b=s3.repeat(6); \/\/ returns \"cccccc\"\r          The function in this example also works on String objects not created with the String constructor. The following code returns \"zzz\". \"z\".repeat(3);  Example: Extending string instances with a repeat method The following example creates a method, str_rep, and uses the statement String.prototype.repeat = str_rep to add the method to all String objects. All String instances then have that method, even objects already created. The example then creates an alternate method and overrides the previous method in one of the String objects using the statement s1.repeat = fake_rep. The str_rep method of the remaining String objects is not altered. \r           var s1 = new String(\"a\"); var s2 = new String(\"b\"); var s3 = new String(\"c\");  \/\/ Create a repeat-string-N-times method for all String objects function str_rep(n) {    var s = \"\", t = this.toString();    while (--n >= 0) {      s += t    }    return s; }  String.prototype.repeat = str_rep;  s1a=s1.repeat(3); \/\/ returns \"aaa\" s2a=s2.repeat(5); \/\/ returns \"bbbbb\" s3a=s3.repeat(2); \/\/ returns \"cc\"  \/\/ Create an alternate method and assign it to only one String variable function fake_rep(n) {    return \"repeat \" + this + \" \" + n + \" times.\"; }  s1.repeat = fake_rep s1b=s1.repeat(1); \/\/ returns \"repeat a 1 times.\" s2b=s2.repeat(4); \/\/ returns \"bbbb\" s3b=s3.repeat(6); \/\/ returns \"cccccc\"\r          The function in this example also works on String objects not created with the String constructor. The following code returns \"zzz\". \"z\".repeat(3);"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fromCharCode","title":"String.fromCharCode","description":"Returns a string created by using the specified sequence of Unicode values.    Static Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition   Syntax  String.fromCharCode(num1, ..., numN)  Parameters  num1, ..., numN A sequence of numbers that are Unicode values.  Description This method returns a string and not a String object. Because fromCharCode is a static method of String, you always use it as String.fromCharCode(), rather than as a method of a String object you created. Getting it to work with higher values Although most common Unicode values can be represented in a fixed width system\/with one number (as expected early on during JavaScript standardization) and fromCharCode() can be used to return a single character for the most common values (i.e., UCS-2 values which are the subset of UTF-16 with the most common characters), in order to deal with ALL legal Unicode values, fromCharCode() alone is inadequate. Since the higher code point characters use two (lower value) \"surrogate\" numbers to form a single character, fromCharCode() can be used to return such a pair and thus adequately represent these higher valued characters. Be aware, therefore, that the following utility function to grab the accurate character even for higher value code points, may be returning a value which is rendered as a single character, but which has a string count of two (though usually the count will be one). \r           \/\/ String.fromCharCode() alone cannot get the character at such a high code point \/\/ The following, on the other hand, can return a 4-byte character as well as the  \/\/   usual 2-byte ones (i.e., it can return a single character which actually has  \/\/   a string length of 2 instead of 1!) alert(fixedFromCharCode(0x2F804)); \/\/ or 194564 in decimal   function fixedFromCharCode (codePt) {     if (codePt > 0xFFFF) {         codePt -= 0x10000;         return String.fromCharCode(0xD800 + (codePt >> 10), 0xDC00 + (codePt & 0x3FF));     }     else {         return String.fromCharCode(codePt);     } }\r         Examples Example: Using fromCharCode The following example returns the string \"ABC\". String.fromCharCode(65,66,67)  Example: Using fromCharCode The following example returns the string \"ABC\". String.fromCharCode(65,66,67)  See also String.prototype.charCodeAt"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/localeCompare","title":"String.localeCompare","description":"Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  localeCompare(compareString)  Parameters compareString - The string against which the referring string is comparing Description Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order. Returns -1 if the string occurs earlier in a sort than compareString, returns 1 if the string occurs afterwards in such a sort, and returns 0 if they occur at the same level. Examples Example: Using localeCompare The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another: \r           alert('a'.localeCompare('b')); \/\/ -1 alert('b'.localeCompare('a')); \/\/ 1 alert('b'.localeCompare('b')); \/\/ 0\r          Example: Using localeCompare The following example demonstrates the different potential results for a string occurring before, after, or at the same level as another: \r           alert('a'.localeCompare('b')); \/\/ -1 alert('b'.localeCompare('a')); \/\/ 1 alert('b'.localeCompare('b')); \/\/ 0"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/constructor","title":"String.constructor","description":"Summary  Returns a reference to the String function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name.     Property of String     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition     Description  See constructor"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/charCodeAt","title":"String.charCodeAt","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/concat","title":"String.concat","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/indexOf","title":"String.indexOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/lastIndexOf","title":"String.lastIndexOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/match","title":"String.match","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/quote","title":"String.quote","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/search","title":"String.search","description":"Executes the search for a match between a regular expression and this String object.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 3rd Edition    Syntax string.search(regexp) Parameters  regexp A  regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).  Description If successful, search returns the index of the regular expression inside the string. Otherwise, it returns -1. When you want to know whether a pattern is found in a string use search (similar to the regular expression test method); for more information (but slower execution) use match (similar to the regular expression exec method).   Gecko 8.0 note(Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5)   Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , search() was implemented incorrectly; when it was called with no parameters or with undefined, it would match against the string \"undefined\", instead of matching against the empty string. This is fixed; now \"a\".search() and \"a\".search(undefined) correctly return 0.  Examples Example: Using search The following example prints a message which depends on the success of the test. \r           function testinput(re, str){    if (str.search(re) != -1){       midstring = \" contains \";    }    else{       midstring = \" does not contain \";    }    document.write (str + midstring + re); }\r          Example: Using search The following example prints a message which depends on the success of the test. \r           function testinput(re, str){    if (str.search(re) != -1){       midstring = \" contains \";    }    else{       midstring = \" does not contain \";    }    document.write (str + midstring + re); }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/slice","title":"String.slice","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/split","title":"String.split","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLocaleLowerCase","title":"String.toLocaleLowerCase","description":"Returns the calling string value converted to lower case, according to any locale-specific case mappings.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleLowerCase()  Parameters None. Description The toLocaleLowerCase method returns the value of the string converted to lower case according to any locale-specific case mappings. toLocaleLowerCase does not affect the value of the string itself. In most cases, this will produce the same result as toLowerCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result. Examples Example: Using toLocaleLowerCase The following example displays the string \"alphabet\": \r           var upperText=\"ALPHABET\"; document.write(upperText.toLocaleLowerCase());\r         Example: Using toLocaleLowerCase The following example displays the string \"alphabet\": \r           var upperText=\"ALPHABET\"; document.write(upperText.toLocaleLowerCase());\r         See also toLowerCase()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLowerCase","title":"String.toLowerCase","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toUpperCase","title":"String.toUpperCase","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toLocaleUpperCase","title":"String.toLocaleUpperCase","description":"Returns the calling string value converted to upper case, according to any locale-specific case mappings.    Method of String     Implemented in JavaScript 1.2   ECMAScript Edition ECMAScript 1st Edition    Syntax  toLocaleUpperCase()  Parameters None. Description The toLocaleUpperCase method returns the value of the string converted to upper case according to any locale-specific case mappings. toLocaleUpperCase does not affect the value of the string itself. In most cases, this will produce the same result as toUpperCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result. Examples Example: Using toLocaleUpperCase The following example displays the string \"ALPHABET\": \r           var lowerText=\"alphabet\"; document.write(lowerText.toLocaleUpperCase());\r          Example: Using toLocaleUpperCase The following example displays the string \"ALPHABET\": \r           var lowerText=\"alphabet\"; document.write(lowerText.toLocaleUpperCase());\r          See also toUpperCase()"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toSource","title":"String.toSource","description":"Summary  Returns a string representing the source code of the object.     Method of String     Implemented in JavaScript 1.3   ECMAScript Edition none     Syntax  string.toSource()   Parameters  None.   Description  The toSource method returns the following values:    For the built-in String object, toSource returns the following string indicating that the source code is not available:  function String() {[native code]}   For instances of String or string literals, toSource returns a string representing the source code.  This method is usually called internally by JavaScript and not explicitly in code.   See also  Object.prototype.toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/toString","title":"String.toString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/Trim","title":"String.Trim","description":"Removes whitespace from both ends of the string.    Method of String     Implemented in JavaScript 1.8.1   ECMAScript Edition ECMAScript 5th Edition    Syntax string.trim() Parameters None. Description The trim method returns the string stripped of whitespace from both ends. trim does not affect the value of the string itself. Examples Example: Using trim The following example displays the lowercase string \"foo\": \r           var orig = \"   foo  \"; alert(orig.trim());\r          Example: Using trim The following example displays the lowercase string \"foo\": \r           var orig = \"   foo  \"; alert(orig.trim());\r          See Also  trimLeft() trimRight()  Compatibility Running the following code before any other code will create String.trim if it's not natively available. \r           if(!String.prototype.trim) {   String.prototype.trim = function () {     return this.replace(\/^\\s+|\\s+$\/g,'');   }; }\r          Browser compatibility Based on Kangax's compat tables     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) 9 10.5 5         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/TrimLeft","title":"String.TrimLeft","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/TrimRight","title":"String.TrimRight","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/anchor","title":"String.anchor","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/big","title":"String.big","description":"Summary  Causes a string to be displayed in a big font as if it were in a BIG tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   big()    Parameters  None.   Description  Use the big method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using big  The following example uses string methods to change the size of a string:   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   Example: Using big  The following example uses string methods to change the size of a string:   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   See Also  fontsize, small"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/blink","title":"String.blink","description":"Summary  Causes a string to blink as if it were in a BLINK tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   blink()    Parameters  None.   Description  Use the blink method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  bold, italics, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fixed","title":"String.fixed","description":"Summary  Causes a string to be displayed in fixed-pitch font as if it were in a TT tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   fixed()    Parameters  None.   Description  Use the fixed method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using fixed to change the formatting of a string  The following example uses the fixed method to change the formatting of a string:   var worldString=\"Hello, world\" document.write(worldString.fixed())  This example produces the same output as the following HTML:   <TT>Hello, world<\/TT>     Example: Using fixed to change the formatting of a string  The following example uses the fixed method to change the formatting of a string:   var worldString=\"Hello, world\" document.write(worldString.fixed())  This example produces the same output as the following HTML:   <TT>Hello, world<\/TT>"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/bold","title":"String.bold","description":"Summary  Causes a string to be displayed as bold as if it were in a B tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   bold()    Parameters  None.   Description  Use the bold method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, italics, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/italics","title":"String.italics","description":"Summary  Causes a string to be italic, as if it were in an I tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   italics()    Parameters  None.   Description  Use the italics method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, bold, strike"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fontcolor","title":"String.fontcolor","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/fontsize","title":"String.fontsize","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/small","title":"String.small","description":"Summary  Causes a string to be displayed in a small font, as if it were in a SMALL tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   small()    Parameters  None.   Description  Use the small method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the size of a string   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   Example: Using string methods to change the size of a string   var worldString=\"Hello, world\"  document.write(worldString.small()) document.write(\"<P>\" + worldString.big()) document.write(\"<P>\" + worldString.fontsize(7))  This example produces the same output as the following HTML:   <SMALL>Hello, world<\/SMALL> <P><BIG>Hello, world<\/BIG> <P><FONTSIZE=7>Hello, world<\/FONTSIZE>   See Also  big, fontsize"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/sub","title":"String.sub","description":"Summary  Causes a string to be displayed as a subscript, as if it were in a SUB tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   sub()    Parameters  None.   Description  Use the sub method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to generate the HTML.   Examples   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   See Also  sup"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/link","title":"String.link","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/strike","title":"String.strike","description":"Summary  Causes a string to be displayed as struck-out text, as if it were in a STRIKE tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   strike()    Parameters  None.   Description  Use the strike method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to display the string.   Examples   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   Example: Using string methods to change the formatting of a string  The following example uses string methods to change the formatting of a string:   var worldString=\"Hello, world\"  document.write(worldString.blink()) document.write(\"<P>\" + worldString.bold()) document.write(\"<P>\" + worldString.italics()) document.write(\"<P>\" + worldString.strike())  This example produces the same output as the following HTML:   <BLINK>Hello, world<\/BLINK> <P><B>Hello, world<\/B> <P><I>Hello, world<\/I> <P><STRIKE>Hello, world<\/STRIKE>   See Also  blink, bold, italics"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/String\/sup","title":"String.sup","description":"Summary  Causes a string to be displayed as a superscript, as if it were in a SUP tag.     Method of String     Implemented in JavaScript 1.0   ECMAScript Edition none     Syntax   sup()    Parameters  None.   Description  Use the sup method with the write or writeln methods to format and display a string in a document. In server-side JavaScript, use the write function to generate the HTML.   Examples   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   Example: Using sub and sup methods to format a string  The following example uses the sub and sup methods to format a string:   var superText=\"superscript\" var subText=\"subscript\"  document.write(\"This is what a \" + superText.sup() + \" looks like.\") document.write(\"<P>This is what a \" + subText.sub() + \" looks like.\")  This example produces the same output as the following HTML:   This is what a <SUP>superscript<\/SUP> looks like. <P>This is what a <SUB>subscript<\/SUB> looks like.   See Also  sub"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/ArrayBufferView","title":"ArrayBufferView","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/prototype","title":"Error.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/message","title":"Error.message","description":"A human-readable description of the error.    Property of Error     Implemented in JavaScript 1.?   ECMAScript Edition ECMAScript 1st Edition    Description This property contains a brief description of the error if one is available or has been set. SpiderMonkey makes extensive use of the message property for exceptions. The message property combined with the name property is used by the Error.prototype.toString method to create a string representation of the Error. By default, the message property is an empty string, but this behavior can be overridden for an instance by specifying a message as the first argument to the Error constructor. Examples Example: Throwing a custom error  var e = new Error(\"Could not parse input\"); \/\/ e.message is \"Could not parse input\" throw e;  Example: Throwing a custom error  var e = new Error(\"Could not parse input\"); \/\/ e.message is \"Could not parse input\" throw e;  See also  name toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/name","title":"Error.name","description":"A name for the type of error.    Property of Error     Implemented in JavaScript 1.?   ECMAScript Edition ECMAScript 1st Edition   Description By default, Error instances are given the name \"Error\". The name property, in addition to the message property, is used by the Error.prototype.toString method to create a string representation of the error. Examples Example: Throwing a custom error  var e = new Error(\"Malformed input\"); \/\/ e.name is \"Error\" e.name = \"ParseError\";                \/\/ e.toString() would return throw e;                              \/\/ \"ParseError: Malformed input\"  Example: Throwing a custom error  var e = new Error(\"Malformed input\"); \/\/ e.name is \"Error\" e.name = \"ParseError\";                \/\/ e.toString() would return throw e;                              \/\/ \"ParseError: Malformed input\"  See also  message toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/Stack","title":"Error.Stack","description":"Description This non-standard property of Error objects offers a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call. Each step will be separated by a newline, with the first part of the line being the function name (if not a call from the global scope), followed by the argument values converted to string in parentheses, then by an at (@) sign, the file location (except when the function is the error constructor as the error is being thrown), a colon, and, if there is a file location, the line number. (Note the Error object also possesses the fileName and lineNumber properties for retrieving these from the error thrown (but only the error, and not its trace).) While an object (or array, etc.) will appear in the converted form \"[object Object]\", and as such cannot be evaluated back into the actual objects, scalar values can be retrieved (though it may be easier to use arguments.callee.caller.arguments, as could the function name be retrieved by arguments.callee.caller.name). \"undefined\" is listed as \"(void 0)\". Note that if string arguments are passed in with values such as \"@\", \"(\", \")\" (or if in file names), you cannot easily rely on these for breaking the line into its component parts. Example The following HTML markup demonstrates the use of stack property. \r           <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\" \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=windows-1251\"> <meta http-equiv=\"Content-Script-Type\" content=\"text\/javascript\"> <title>Stack Trace Example<\/title> <body>     <script type=\"text\/javascript\">         function trace() {             try {                 throw new Error(\"myError\");             }             catch(e) {                 alert(e.stack);             }         }         function b() {             trace();         }         function a() {             b(3, 4, \"\\n\\n\", undefined, {});         }         a(\"first call, firstarg\");     <\/script>\r          Assuming the above markup is saved as C:\\example.html on a Windows file system and is open in a browser it produces an alert message box with the following text:  Error(\"myError\")@:0 trace()@file:\/\/\/C:\/example.html:9 b(3,4,\"\\n\\n\",(void 0),[object Object])@file:\/\/\/C:\/example.html:16 a(\"first call, firstarg\")@file:\/\/\/C:\/example.html:19 @file:\/\/\/C:\/example.html:21  See also Components.stack"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/toSource","title":"Error.toSource","description":"Returns code that could eval to the same error.    Method of Date     Implemented in JavaScript 1.3   ECMAScript Edition none    Syntax  error.toSource()   Parameters  None.   Description  Calling the toString method of an Error instance (including NativeErrors) will return a string containing the source code of the error. This string can be evaluated to create an (approximately) equal object. Naturally, the string containing the source follows the structure of the Error constructor. For example:  (new name(message, fileName, lineNumber))  where these attributes correspond to the respective properties of the error instance.  Be aware that the properties used by the toSource method in the creation of this string are mutable and may not accurately reflect the function used to create an error instance or the filename or line number where the actual error occurred.  See also   fileName  lineNumber  message  name"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/EvalError\/prototype","title":"EvalError.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Error\/toString","title":"Error.toString","description":"Returns a string representing the specified Error object.    Method of Error     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition   Syntax error.toString() Parameters None. Description The Error object overrides the Object.prototype.toString method inherited by all objects. According to ECMA-262, implementations are free to decide the behavior of this method. SpiderMonkey joins string representations of the name and message properties with a colon and a space separating the two. If the string representation of either of these two properties is an empty string, this method simply returns the string representation of the property that has a non-zero length. If both properties' string representations are empty strings, this method returns an empty string. Note that when creating a string representation of the name and message properties, this method does not invoke those properties' toString methods. If the value in either of these properties is not already a string, this method will behave as if that property contained an empty string. Example  var e = new Error(\"fatal error\"); e.toString(); \/\/ returns \"Error: fatal error\"  e.name = undefined; e.toString(); \/\/ returns \"fatal error\"  e.message = undefined; e.toString(); \/\/ returns \"\"  e.name = \"Error\"; e.toString(); \/\/ returns \"Error\"  See also toSource"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/RangeError\/prototype","title":"RangeError.prototype","description":"Represents the prototype the RangeError constructor. Description All RangeError instances inherit from RangeError.prototype. You can use the prototype to add properties or methods to all instances.Properties  constructor Specifies the function that created an instance's prototype.   name Error name.  Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the RangeError prototype object does not contain any methods of its own, RangeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError\/prototype","title":"ReferenceError.prototype","description":"Represents the prototype for the ReferenceError constructor. Description All ReferenceError instances inherit from ReferenceError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype.   name Error name.     Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the ReferenceError prototype object does not contain any methods of its own, ReferenceError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/ReferenceError\/name","title":"ReferenceError.name","description":"A name for the type of error.  Description By default, ReferenceError instances are given the name \"ReferenceError\". See also  message toString"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/SyntaxError\/prototype","title":"SyntaxError.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/TypeError\/prototype","title":"TypeError.prototype","description":"Represents the prototype for the TypeError constructor. Description All TypeError instances inherit from TypeError.prototype. You can use the prototype to add properties or methods to all instances. Properties  constructor Specifies the function that created an instance's prototype.   name Error name.  Note: Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.    Properties inherited from Error.prototype  fileName, lineNumber, message, name, number, stack    Methods Although the TypeError prototype object does not contain any methods of its own, TypeError instances do inherit some methods through the prototype chain.    Methods inherited from Error.prototype  toSource, toString       Methods inherited from Object.prototype  __defineGetter__, __defineSetter__, hasOwnProperty, isPrototypeOf, __lookupGetter__, __lookupSetter__, __noSuchMethod__, propertyIsEnumerable, unwatch, valueOf, watch    See also  Error.prototype Function.prototype"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/URIError\/prototype","title":"URIError.prototype","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/Constructor","title":"Object.Constructor","description":"Returns a reference to the Object function that created the instance's prototype. Note that the value of this property is a reference to the function itself, not a string containing the function's name, but it isn't read only (except for primitive Boolean, Number or String values: 1, true, \"read-only\").    Property of Object     Implemented in JavaScript 1.1   ECMAScript Edition ECMAScript 1st Edition    Description All objects inherit a constructor property from their prototype:  o = new Object \/\/ or o = {} in JavaScript 1.2 o.constructor == Object a = new Array \/\/ or a = [] in JavaScript 1.2 a.constructor == Array n = new Number(3) n.constructor == Number  Even though you cannot construct most HTML objects, you can do comparisons. For example,  document.constructor == Document document.form3.constructor == Form  Examples Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));  Example: Displaying the constructor of an object The following example creates a prototype, Tree, and an object of that type, theTree. The example then displays the constructor property for the object theTree.  function Tree(name) {    this.name = name; } theTree = new Tree(\"Redwood\"); console.log(\"theTree.constructor is \" + theTree.constructor);  This example displays the following output:  theTree.constructor is function Tree(name) {     this.name = name; }  Example: Changing the constructor of an object The following example shows how to modify constructor value of generic objects. Only true, 1 and \"test\" variable constructors will not be changed. This example explains that is not always so safe to believe in constructor function.  function Type(){}; var\ttypes = [ \tnew Array,\t[], \tnew Boolean,\ttrue, \tnew Date, \tnew Error, \tnew Function,\tfunction(){}, \tMath,\t \tnew Number,\t1, \tnew Object,\t{}, \tnew RegExp,\t\/(?:)\/, \tnew String,\t\"test\" ]; for(var i = 0; i < types.length; i++){ \ttypes[i].constructor = Type; \ttypes[i] = [types[i].constructor, types[i] instanceof Type, types[i].toString()]; }; alert(types.join(\"\\n\"));"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON\/parse","title":"JSON.parse","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/JSON\/stringify","title":"JSON.stringify","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LN2","title":"Math.LN2","description":"Summary  The natural logarithm of 2, approximately 0.693.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LN2 is a static property of Math, you always use it as Math.LN2, rather than as a property of a Math object you created.   Examples   Example: Using Math.LN2  The following function returns the natural log of 2:   function getNatLog2() {    return Math.LN2 }   Example: Using Math.LN2  The following function returns the natural log of 2:   function getNatLog2() {    return Math.LN2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/E","title":"Math.E","description":"The base of natural logarithms, e, approximately 2.718.    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description Because E is a static property of Math, you always use it as Math.E, rather than as a property of a Math object you created. Examples Example: Using Math.E The following function returns e:  function getNapier() {    return Math.E }  Example: Using Math.E The following function returns e:  function getNapier() {    return Math.E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LN10","title":"Math.LN10","description":"Summary  The natural logarithm of 10, approximately 2.302.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LN10 is a static property of Math, you always use it as Math.LN10, rather than as a property of a Math object you created.   Examples   Example: Using Math.LN10  The following function returns the natural log of 10:   function getNatLog10() {    return Math.LN10 }   Example: Using Math.LN10  The following function returns the natural log of 10:   function getNatLog10() {    return Math.LN10 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LOG2E","title":"Math.LOG2E","description":"The base 2 logarithm of E (approximately 1.442).    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description  Because LOG2E is a static property of Math, you always use it as Math.LOG2E, rather than as a property of a Math object you created.   Examples   Example: Using Math.LOG2E  The following function returns the base 2 logarithm of E:   function getLog2e() {    return Math.LOG2E }     Example: Using Math.LOG2E  The following function returns the base 2 logarithm of E:   function getLog2e() {    return Math.LOG2E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/LOG10E","title":"Math.LOG10E","description":"Summary  The base 10 logarithm of E (approximately 0.434).     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because LOG10E is a static property of Math, you always use it as Math.LOG10E, rather than as a property of a Math object you created.   Examples   Example: Using Math.LOG10E  The following function returns the base 10 logarithm of E:   function getLog10e() {    return Math.LOG10E }    Example: Using Math.LOG10E  The following function returns the base 10 logarithm of E:   function getLog10e() {    return Math.LOG10E }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/PI","title":"Math.PI","description":"Summary  The ratio of the circumference of a circle to its diameter, approximately 3.14159.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because PI is a static property of Math, you always use it as Math.PI, rather than as a property of a Math object you created.   Examples   Example: Using PI  The following function returns the value of pi:   function getPi() {    return Math.PI }   Example: Using PI  The following function returns the value of pi:   function getPi() {    return Math.PI }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/SQRT1_2","title":"Math.SQRT1_2","description":"The square root of 1\/2; equivalently, 1 over the square root of 2, approximately 0.707.    Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Description Because SQRT1_2 is a static property of Math, you always use it as Math.SQRT1_2, rather than as a property of a Math object you created. Examples Example: Using SQRT1_2 The following function returns 1 over the square root of 2:  function getRoot1_2() {    return Math.SQRT1_2 }  Example: Using SQRT1_2 The following function returns 1 over the square root of 2:  function getRoot1_2() {    return Math.SQRT1_2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/SQRT2","title":"Math.SQRT2","description":"Summary  The square root of 2, approximately 1.414.     Property of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition     Description  Because SQRT2 is a static property of Math, you always use it as Math.SQRT2, rather than as a property of a Math object you created.   Examples   Example: Using Math.SQRT2  The following function returns the square root of 2:   function getRoot2() {    return Math.SQRT2 }   Example: Using Math.SQRT2  The following function returns the square root of 2:   function getRoot2() {    return Math.SQRT2 }"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/abs","title":"Math.abs","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/acos","title":"Math.acos","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/asin","title":"Math.asin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/atan","title":"Math.atan","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/atan2","title":"Math.atan2","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/ceil","title":"Math.ceil","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/cos","title":"Math.cos","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/floor","title":"Math.floor","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/log","title":"Math.log","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/exp","title":"Math.exp","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/max","title":"Math.max","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/pow","title":"Math.pow","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/min","title":"Math.min","description":"Returns the smallest of zero or more numbers.    Method of Math     Implemented in JavaScript 1.0   ECMAScript Edition ECMAScript 1st Edition    Syntax Math.min([value1[,value2[, ...]]])  Parameters  value1, value2, ... Numbers.  Description Because min is a static method of Math, you always use it as Math.min(), rather than as a method of a Math object you created. If no arguments are given, the result is Infinity. If at least one of arguments cannot be converted to a number, the result is NaN. Examples Example: Using Math.min This finds the min of x and y and assigns it to z: var x = 10, y = -20; var z = Math.min(x, y);  Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. Example: Using Math.min This finds the min of x and y and assigns it to z: var x = 10, y = -20; var z = Math.min(x, y);  Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. Example: Clipping a value with Math.min Math.min is often used to clip a value so that it is always less than or equal to a boundary. For instance, this var x = f(foo); if (x > boundary)     x = boundary;  may be written as this var x = Math.min(f(foo), boundary);  Math.max can be used in a similar way to clip a value at the other end. See Also Math.max"},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/random","title":"Math.random","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/sin","title":"Math.sin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/round","title":"Math.round","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/sqrt","title":"Math.sqrt","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Math\/tan","title":"Math.tan","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Object\/getPrototypeOf","title":"Object.getPrototypeOf","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript\/Reference\/Global_Objects\/Proxy","title":"Proxy","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/JavaScript_typed_arrays\/DataView","title":"DataView","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM","title":"DOM","description":"Documentation about THE DOM  Gecko DOM Reference The Gecko Document Object Model Reference. About the Document Object Model A short introduction to the DOM. The DOM and JavaScript What is the DOM? What is JavaScript? How do I use them together on my web page? This document answers these questions and more. Using dynamic styling information How to obtain information on and manipulate styling via the DOM. DOM event reference Lists all the DOM events and their meanings. History API: Manipuling the browser history Demonstrates the HTML5-introduced DOM window.history  object, allowing dynamic changes to the browser history. File API: Using files from web applications Describes the HTML5-introduced capability to select a local file and read data from it. Using the Page Visibility API Explains how to detect and use information about a web page being in the foreground or in the background. Fullscreen API: Using the fullscreen mode Describes how to set up a page that use the whole screen, without any browser UI around it. Determining the dimensions of elements How to figure out the right way to determine the dimensions of elements, given your needs. The Document Object Model in Mozilla An older set of documentation about the DOM, hosted at mozilla.org. Dynamically modifying XUL-based user interface The basics of manipulating the XUL UI with DOM methods.  View All...Getting help from the community You need help on a DOM-related problem and can't find the solution in the documentation?  Consult the dedicated Mozilla forum:   as a mailing list as a newsgroup as a Google Group as a Web feed  Tools easing working with the DOM  Firebug  DOM Inspector Mouse-over DOM Inspector Aardvark Firefox extension  View All... Related Topics  AJAX, CSS, DHTML, JavaScript"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element","title":"element","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event","title":"Event","description":"Introduction This chapter describes the DOM Event Model. The Event interface itself is described, as well as the interfaces for event registration on nodes in the DOM, and event listeners, and several longer examples that show how the various event interfaces relate to one another. There is an excellent diagram that clearly explains the three phases of event flow through the DOM in the DOM Level 3 Events draft. DOM Event interface Event handlers may be attached to various objects including DOM elements, document, the window object, etc. When an event occurs, an event object is created and passed sequentially to the event listeners. The DOM Event interface is accessible from within the handler function, via the event object passed as the first argument. The following simple example shows how an event object is passed to the event handler function, and can be used from within one such function. \r           function foo(evt) {   \/\/ the evt parameter is automatically assigned the event object   alert(evt); } table_el.onclick = foo;\r          Also see Example 5: Event Propagation in the Examples chapter for a more detailed example of how events move through the DOM. DOM event subclasses  UIEvent  KeyboardEvent MouseEvent FocusEvent WheelEvent CompositionEvent   StorageEvent CustomEvent  Requires Gecko 6.0  MutationEvent  DOM Event interface Event handlers may be attached to various objects including DOM elements, document, the window object, etc. When an event occurs, an event object is created and passed sequentially to the event listeners. The DOM Event interface is accessible from within the handler function, via the event object passed as the first argument. The following simple example shows how an event object is passed to the event handler function, and can be used from within one such function. \r           function foo(evt) {   \/\/ the evt parameter is automatically assigned the event object   alert(evt); } table_el.onclick = foo;\r          Also see Example 5: Event Propagation in the Examples chapter for a more detailed example of how events move through the DOM. DOM event subclasses  UIEvent  KeyboardEvent MouseEvent FocusEvent WheelEvent CompositionEvent   StorageEvent CustomEvent  Requires Gecko 6.0  MutationEvent  DOM event subclasses  UIEvent  KeyboardEvent MouseEvent FocusEvent WheelEvent CompositionEvent   StorageEvent CustomEvent  Requires Gecko 6.0  MutationEvent  Registering event listeners There are 3 ways to register events to a DOM element. HTML attribute \r           <button onclick=\"alert('Hello world!')\">\r          This way should be avoided. This makes the markup bigger and less readable. Concerns of content\/structure and behavior are not well-separated, making a bug harder to find. DOM element properties \r           \/\/ Assuming myButton is a button element myButton.onclick = function(){alert('Hello world');};\r          The problem with this method is that only one handler can be set per element and per event. element.addEventListener \r           \/\/ Assuming myButton is a button element myButton.addEventListener('click', function(){alert('Hello world');}, false);\r          This is the standard method which has none of the problem mentioned before. You should use this method. More details can be found on the specific page. Internet Explorer 6-8 do not support it. Instead, they have the element.attachEvent method which works pretty much the same way. HTML attribute \r           <button onclick=\"alert('Hello world!')\">\r          This way should be avoided. This makes the markup bigger and less readable. Concerns of content\/structure and behavior are not well-separated, making a bug harder to find. DOM element properties \r           \/\/ Assuming myButton is a button element myButton.onclick = function(){alert('Hello world');};\r          The problem with this method is that only one handler can be set per element and per event. element.addEventListener \r           \/\/ Assuming myButton is a button element myButton.addEventListener('click', function(){alert('Hello world');}, false);\r          This is the standard method which has none of the problem mentioned before. You should use this method. More details can be found on the specific page. Internet Explorer 6-8 do not support it. Instead, they have the element.attachEvent method which works pretty much the same way. Properties  event.bubbles  A boolean indicating whether the event bubbles up through the DOM or not. event.cancelBubble    Deprecated   A boolean indicating whether the bubbling of the event has been canceled or not. event.cancelable  A boolean indicating whether the event is cancelable. event.currentTarget  A reference to the currently registered target for the event. event.defaultPrevented  Indicates whether or not event.preventDefault()  has been called on the event. event.detail  Detail about the event, depending on the type of event. event.eventPhase  Indicates which phase of the event flow is being processed. event.explicitOriginalTarget  The explicit original target of the event (Mozilla-specific). event.mozInputSource   Requires Gecko 1.9.3  Non-standard      The type of device that generated the event. This is a Gecko-specific value. event.originalTarget  The original target of the event, before any retargetings (Mozilla-specific). event.target  A reference to the target to which the event was originally dispatched. event.timeStamp  The time that the event was created. event.type  The name of the event (case-insensitive). event.isTrusted  Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like event.initEvent)  Methods  event.initEvent  Initializes the value of an Event created through the DocumentEvent interface. event.preventBubble    Obsolete since Gecko 1.9 Prevents the event from bubbling. Obsolete, use event.stopPropagation  instead. event.preventCapture    Obsolete since Gecko 1.9 Obsolete, use event.stopPropagation  instead. event.preventDefault  Cancels the event (if it is cancelable). event.stopImmediatePropagation  For this particular event, no other listener will be called. Neither those attached on the same element, nor those attached on elements which will be traversed later (in capture phase, for instance) event.stopPropagation  Stops the propagation of events further along in the DOM.  See also  Listening to events Listening to events on all tabs Creating and triggering custom events Mouse gesture events Mozilla related events"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Event\/UIEvent\/KeyEvent","title":"KeyboardEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document","title":"document","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Event\/UIEvent\/MouseEvent","title":"MouseEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection","title":"Selection","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range","title":"range","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLStyleElement","title":"HTMLStyleElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window","title":"window","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/File","title":"File","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Blob","title":"Blob","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/FileReader","title":"FileReader","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/BlobBuilder","title":"BlobBuilder","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Attr","title":"Attr","description":"Properties  isId Indicates whether the attribute is an \"ID attribute\". An \"ID attribute\" being an attribute which value is expected to be unique across a DOM Document. In HTML DOM, \"id\" is the only ID attribute, but XML documents could define others. Whether or not an attribute is unique is often determined by a DTD or other schema description. name The attribute's name. ownerElement   Deprecated since Gecko 7.0   This property has been deprecated and will be removed in the future. Since you can only get Attr objects from elements, you should already know th schemaTypeInfo ? specified   Deprecated since Gecko 7.0   This property has been deprecated and will be removed in the future; it now always returns true. value The attribute's value.  Deprecated properties and methods The following properties have been deprecated. Where available, the appropriate replacement is provided.  attributes This property now always returns NULL. childNodes This property now always returns NULL. firstChild This property now always returns NULL. lastChild This property now always returns NULL. nextSibling This property now always returns NULL. nodeName Use Attr.name  instead. nodeType This property now always returns 2 (ATTRIBUTE_NODE). nodeValue Use Attr.value  instead. ownerDocument You shouldn't have been using this in the first place, so you probably don't care that this is going away. ownerElement Since you get an Attr object from an Element , you should already know the associated element. parentNode This property now always returns NULL. previousSibling This property now always returns NULL. specified This property now always returns true. textContent Use Attr.value  instead.   The following methods have been deprecated:  appendChild() Modify the value of Attr.value  instead. cloneNode() You shouldn't have been using this in the first place, so you probably don't care that this is going away. createAttribute() Use Attr.setAttribute()  instead. createAttributeNS() Use Attr.setAttributeNS()  instead. getAttributeNode() Use Attr.getAttribute()  instead. getAttributeNodeNS() Use Attr.getAttributeNS()  instead. hasAttributes() This method now always returns false. hasChildNodes() This method now always returns false. insertBefore() Modify the value of Attr.value  instead. isSupported() You shouldn't have been using this in the first place, so you probably don't care that this is going away. isEqualNode() You shouldn't have been using this in the first place, so you probably don't care that this is going away. normalize() You shouldn't have been using this in the first place, so you probably don't care that this is going away. removeAttributeNode() Use Attr.removeAttribute()  instead. removeChild() Modify the value of {{domxref(\"Attr.value)\")) instead. replaceChild() Modify the value of Attr.value  instead. setAttributeNode() Use Attr.setAttribute()  instead. setAttributeNodeNS() Use Attr.setAttributeNS()  instead.  Specifications  Document Object Model Core level 3: Interface Attr Document Object Model 4: Interface Attr"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CDATASection","title":"CDATASection","description":"Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...l#ID-667469212"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CharacterData","title":"CharacterData","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Comment","title":"Comment","description":"Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...#ID-1728279322"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DocumentFragment","title":"DocumentFragment","description":"Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...ml#ID-B63ED1A3"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DocumentType","title":"DocumentType","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DomConfiguration","title":"DOMConfiguration","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMError","title":"DOMError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMErrorHandler","title":"DOMErrorHandler","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMException","title":"DOMException","description":"Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...ml#ID-17189187"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMImplementationList","title":"DOMImplementationList","description":"Properties length (read-only pos. integer) Methods item ( idx ) Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...ementationList"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMImplementation","title":"DOMImplementation","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMImplementationRegistry","title":"DOMImplementationRegistry","description":"Methods getDOMImplementation ( featuresStr ) - See also DOMImplementationSource.getDOMImplementation() getDOMImplementationList ( featuresStr ) - See also DOMImplementationSource.getDOMImplementationL() Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...html#Bootstrap http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...g-Extension-h2"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMImplementationSource","title":"DOMImplementationSource","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMObject","title":"DOMObject","description":"Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...html#DOMString"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMLocator","title":"DOMLocator","description":"Properties lineNumber (read-only pos. integer or -1) columnNumber (read-only pos. integer or -1) byteOffset (read-only pos. integer or -1) utf16Offset (read-only pos. integer or -1) relatedNode (read-only Node or null) uri (read-only String or null) Methods none Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...ces-DOMLocator"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMStringList","title":"DOMStringList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMString","title":"DOMString","description":"Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...html#DOMString"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMTimeStamp","title":"DOMTimeStamp","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMUserData","title":"DOMUserData","description":"DOMUserData refers to application data. In JavaScript, it maps directly to Object. It is returned or used as an argument by Node.setUserData(), Node.getUserData(), used as the third argument to handle() on UserDataHandler, and is used or returned by various DOMConfiguration methods. Note that although it can be an object, in Mozilla, it may be returned as a string or other type, if it was set as such a type (e.g., Node.setUserData() and Node.getUserData()). Persistence DOMUserData is not persisted nor serialized and will not be present after the application has restarted or after a crash. If you are interested in persisting data you might rather need to use nsISessionStore . Specification  DOM Level 3 Core: DOMUserData  See also  UserDataHandler node.getUserData, node.setUserData nsISessionStore"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Entity","title":"Entity","description":"Properties publicId (read-only DOMString) systemId (read-only DOMString) notationName (read-only DOMString) inputEncoding (read-only DOMString) xmlEncoding (read-only DOMString) xmlVersion (read-only DOMString) Methods None of its own Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...ml#ID-527DCFF2"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/EntityReference","title":"EntityReference","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/MediaQueryList","title":"MediaQueryList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/MediaQueryListListener","title":"MediaQueryListListener","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/NameList","title":"NameList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node","title":"Node","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/NamedNodeMap","title":"NamedNodeMap","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/NodeFilter","title":"NodeFilter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/NodeIterator","title":"NodeIterator","description":"Introduction The NodeIterator object allows you to iterate over the members of a list of the nodes in a subtree of the DOM, in document order. A NodeIterator can be created using the createNodeIterator() method of the document object, as follows: var nodeIterator = document.createNodeIterator(); Properties root whatToShow filter expandEntityReferences referenceNode Non-standard      pointerBeforeReferenceNode Non-standard      Methods detach previousNode nextNode  Specification DOM Level 2 Traversal: NodeIterator"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/NodeList","title":"NodeList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Notation","title":"Notation","description":"Properties publicId systemId Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...ml#ID-5431D1B9"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Plugin","title":"Plugin","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/PluginArray","title":"PluginArray","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/ProcessingInstruction","title":"ProcessingInstruction","description":"Attributes  target (DOMString) - after the <? and before whitespace delimiting it from data data (DOMString) - first non-whitespace character after target and before ?>  Specification  DOM Level 1 Core: ProcessingInstruction interface  See also  document.createProcessingInstruction"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SharedWorker","title":"SharedWorker","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/TimeRanges","title":"TimeRanges","description":"Properties    Name Description Return Type Availability   TimeRanges.length The number of time ranges represented by the time range object. Read only.  unsigned long  ?    Methods  TimeRanges.start  Returns the time for the start of the range with the specified index. TimeRanges.end  Returns the time for the end of the specified range.  Specification  WHATWG Working Draft"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Text","title":"Text","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Treewalker","title":"treeWalker","description":"Introduction The TreeWalker object represents the nodes of a document subtree and a position within them. A TreeWalker can be created using the createTreeWalker() method of the document object. Properties root whatToShow filter expandEntityReferences currentNode  Methods parentNode firstChild lastChild previousSibling nextSibling previousNode nextNode  Specification DOM Level 2 Traversal: TreeWalker"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/TypeInfo","title":"TypeInfo","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/UserDataHandler","title":"UserDataHandler","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Worker","title":"Worker","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLDocument","title":"HTMLDocument","description":"Specification  http:\/\/www.w3.org\/TR\/DOM-Level-2-HTM...ml#ID-26809268"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLElement","title":"HTMLElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLAnchorElement","title":"HTMLAnchorElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLAudioElement","title":"HTMLAudioElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLAreaElement","title":"HTMLAreaElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLBaseElement","title":"HTMLBaseElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLBodyElement","title":"HTMLBodyElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLBRElement","title":"HTMLBRElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLButtonElement","title":"HTMLButtonElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLCanvasElement","title":"HTMLCanvasElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLDivElement","title":"HTMLDivElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLDListElement","title":"HTMLDListElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLEmbedElement","title":"HTMLEmbedElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLFieldSetElement","title":"HTMLFieldSetElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLFormElement","title":"HTMLFormElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLHeadElement","title":"HTMLHeadElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLHRElement","title":"HTMLHRElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLImageElement","title":"HTMLImageElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLIFrameElement","title":"HTMLIFrameElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLInputElement","title":"HTMLInputElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLLabelElement","title":"HTMLLabelElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLHtmlElement","title":"HTMLHtmlElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLHeadingElement","title":"HTMLHeadingElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLKeygenElement","title":"HTMLKeygenElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLLIElement","title":"HTMLLIElement","description":"The HTML List Element Inteface The HTMLLIElement DOM interface expose specific properties (beyond the regular element object interface they also have available to them by inheritance) for manipulating list elements. Properties    Name Type Description     value long Indicates the ordinal position of the list element inside a given <ol> . It reflects the   value  attribute of the HTML <li>  element, and can be smaller than 0. If the <li>  element is not a child of an <ol>  element, the property has no meaning.    Note that prior to Firefox 10, Gecko incorrectly reflected negative   value  attributes to 0. See Also  The <li> , <ol> , <ul>  and <menu>  HTML elements."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLMetaElement","title":"HTMLMetaElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLLinkElement","title":"HTMLLinkElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLModElement","title":"HTMLModElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLOptionElement","title":"HTMLOptionElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLObjectElement","title":"HTMLObjectElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLOutputElement","title":"HTMLOutputElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLParagraphElement","title":"HTMLParagraphElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLQuoteElement","title":"HTMLQuoteElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLSelectElement","title":"HTMLSelectElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLSourceElement","title":"HTMLSourceElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLTableCaptionElement","title":"HTMLTableCaptionElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLTableElement","title":"HTMLTableElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLTableColElement","title":"HTMLTableColElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLTableRowElement","title":"HTMLTableRowElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLTextAreaElement","title":"HTMLTextAreaElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLTitleElement","title":"HTMLTitleElement","description":"Properties  text Gets or sets the text content of the document's title."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLVideoElement","title":"HTMLVideoElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CanvasRenderingContext2D","title":"CanvasRenderingContext2D","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CanvasGradient","title":"CanvasGradient","description":"Methods void addColorStop (in float offset, in DOMString color) Notes   Gecko 5.0 note(Firefox 5.0 \/ Thunderbird 5.0 \/ SeaMonkey 2.2)   Starting in Gecko 5.0 (Firefox 5.0 \/ Thunderbird 5.0 \/ SeaMonkey 2.2) , the following corrections were made to various behaviors, in order to improve compliance with the HTML5 specification:  Specifying non-finite values when adding color stops through a call to addColorStop() now correctly throws INDEX_SIZE_ERR instead of SYNTAX_ERR.   Specification  http:\/\/www.whatwg.org\/specs\/web-apps...canvasgradient"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CanvasPattern","title":"CanvasPattern","description":"Specification  http:\/\/www.whatwg.org\/specs\/web-apps...#canvaspattern"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/TextMetrics","title":"TextMetrics","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/ImageData","title":"ImageData","description":"Attributes readonly unsigned long width readonly unsigned long height readonly CanvasPixelArray data Specification  http:\/\/www.whatwg.org\/specs\/web-apps...html#imagedata  See also  Pixel manipulation with canvas"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/NotifyAudioAvailableEvent","title":"NotifyAudioAvailableEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CanvasPixelArray","title":"CanvasPixelArray","description":"Specification  http:\/\/www.whatwg.org\/specs\/web-apps...nvaspixelarray"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLCollection","title":"HTMLCollection","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLFormControlsCollection","title":"HTMLFormControlsCollection","description":"Methods    Name & Arguments Return Description     namedItem(in DOMString name) object Gets the node or list of nodes in the collection whose name or id match the specified name, or null if no nodes match.    Specification HTML 5, Section 2.7.2.3 HTMLFormControlsCollection"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLOptionsCollection","title":"HTMLOptionsCollection","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMTokenList","title":"DOMTokenList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOMStringMap","title":"DOMStringMap","description":"Method overview    DOMString getDataAttr(in DOMString prop); Native code only!   boolean hasDataAttr(in DOMString prop); Violates the xpcom interface guidelines!   void removeDataAttr(in DOMString prop); Violates the xpcom interface guidelines!   void removeProp(in nsIAtom attr); Violates the xpcom interface guidelines!   void setDataAttr(in DOMString prop, in DOMString value); Native code only!    Methods Native code only! getDataAttr()   DOMString getDataAttr(   in DOMString prop );  Parameters  prop The property for which to retrieve the value.  Return value The value for the specified property name. Violates the xpcom interface guidelines! hasDataAttr()   boolean hasDataAttr(   in DOMString prop );  Parameters  prop The property for which to check for the existence of a value.  Return value true if the property exists; otherwise false. Violates the xpcom interface guidelines! removeDataAttr()   void removeDataAttr(   in DOMString prop );  Parameters  prop The property to remove from the data set.  Violates the xpcom interface guidelines! removeProp()  Removes the property from the dataset object. Used to update the dataset object when data-* attribute has been removed from the element.  void removeProp(   in nsIAtom attr );  Parameters  attr The property to remove from the dataset.  Native code only! setDataAttr()  Sets the value of the specified property.  void setDataAttr(   in DOMString prop,   in DOMString value );  Parameters  prop The property whose value is to be set. value The property's new value.  Parameters  prop The property for which to retrieve the value.  Return value The value for the specified property name. Violates the xpcom interface guidelines! hasDataAttr()   boolean hasDataAttr(   in DOMString prop );  Parameters  prop The property for which to check for the existence of a value.  Return value true if the property exists; otherwise false. Violates the xpcom interface guidelines! removeDataAttr()   void removeDataAttr(   in DOMString prop );  Parameters  prop The property to remove from the data set.  Violates the xpcom interface guidelines! removeProp()  Removes the property from the dataset object. Used to update the dataset object when data-* attribute has been removed from the element.  void removeProp(   in nsIAtom attr );  Parameters  attr The property to remove from the dataset.  Native code only! setDataAttr()  Sets the value of the specified property.  void setDataAttr(   in DOMString prop,   in DOMString value );  Parameters  prop The property whose value is to be set. value The property's new value.  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 6.0 (6.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also  element.dataset    dataset"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGElement","title":"SVGElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAElement","title":"SVGAElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimationElement","title":"SVGAnimationElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimateColorElement","title":"SVGAnimateColorElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimateElement","title":"SVGAnimateElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimateMotionElement","title":"SVGAnimateMotionElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimateTransformElement","title":"SVGAnimateTransformElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGSetElement","title":"SVGSetElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGCircleElement","title":"SVGCircleElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGClipPathElement","title":"SVGClipPathElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGDefsElement","title":"SVGDefsElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGDescElement","title":"SVGDescElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGEllipseElement","title":"SVGEllipseElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGFontElement","title":"SVGFontElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGFontFaceElement","title":"SVGFontFaceElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGFontFaceFormatElement","title":"SVGFontFaceFormatElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGFontFaceNameElement","title":"SVGFontFaceNameElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGFontFaceSrcElement","title":"SVGFontFaceSrcElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGFontFaceUriElement","title":"SVGFontFaceUriElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGForeignObjectElement","title":"SVGForeignObjectElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGGElement","title":"SVGGElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGGlyphElement","title":"SVGGlyphElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGGradientElement","title":"SVGGradientElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGLinearGradientElement","title":"SVGLinearGradientElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGRadialGradientElement","title":"SVGRadialGradientElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGHKernElement","title":"SVGHKernElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGImageElement","title":"SVGImageElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGLineElement","title":"SVGLineElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGMaskElement","title":"SVGMaskElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGMissingGlyphElement","title":"SVGMissingGlyphElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGMPathElement","title":"SVGMPathElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGPathElement","title":"SVGPathElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGPatternElement","title":"SVGPatternElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGRectElement","title":"SVGRectElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGPolylineElement","title":"SVGPolylineElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGPolygonElement","title":"SVGPolygonElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGScriptElement","title":"SVGScriptElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGStopElement","title":"SVGStopElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGStyleElement","title":"SVGStyleElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGSVGElement","title":"SVGSVGElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGSymbolElement","title":"SVGSymbolElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGSwitchElement","title":"SVGSwitchElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTextElement","title":"SVGTextElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTitleElement","title":"SVGTitleElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTRefElement","title":"SVGTRefElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTSpanElement","title":"SVGTSpanElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGUseElement","title":"SVGUseElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGViewElement","title":"SVGViewElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGVKernElement","title":"SVGVKernElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGLengthList","title":"SVGLengthList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGNumberList","title":"SVGNumberList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAngle","title":"SVGAngle","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGLength","title":"SVGLength","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGMatrix","title":"SVGMatrix","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGNumber","title":"SVGNumber","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGRect","title":"SVGRect","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTransform","title":"SVGTransform","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGStringList","title":"SVGStringList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTransformList","title":"SVGTransformList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedAngle","title":"SVGAnimatedAngle","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedInteger","title":"SVGAnimatedInteger","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedBoolean","title":"SVGAnimatedBoolean","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedEnumeration","title":"SVGAnimatedEnumeration","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedLength","title":"SVGAnimatedLength","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedLengthList","title":"SVGAnimatedLengthList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedNumber","title":"SVGAnimatedNumber","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedNumberList","title":"SVGAnimatedNumberList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedRect","title":"SVGAnimatedRect","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedTransformList","title":"SVGAnimatedTransformList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedString","title":"SVGAnimatedString","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGAnimatedPoints","title":"SVGAnimatedPoints","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGStylable","title":"SVGStylable","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTests","title":"SVGTests","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTextPositioningElement","title":"SVGTextPositioningElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/SVGTransformable","title":"SVGTransformable","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/About_the_Document_Object_Model","title":"About the Document Object Model","description":"What is the DOM?  The Document Object Model is an API for HTML and XML documents. It provides a structural representation of the document, enabling you to modify its content and visual presentation. Essentially, it connects web pages to scripts or programming languages. All of the properties, methods, and events available to the web developer for manipulating and creating web pages are organized into objects (e.g., the document object that represents the document itself, the table object that represents a HTML table elements, and so forth). Those objects are accessible via scripting languages in most recent web browsers. The DOM is most often used in conjunction with JavaScript. That is, the code is written in JavaScript, but it uses the DOM to access the web page and its elements. However, the DOM was designed to be independent of any particular programming language, making the structural representation of the document available from a single, consistent API. Though we focus on JavaScript throughout this site, implementations of the DOM can be built for any language. The World Wide Web Consortium establishes a standard for the DOM, called the W3C DOM. It should, now that the most important browsers correctly implement it, enable powerful cross-browser applications.   Why is the DOM support in Mozilla important?  \"Dynamic HTML\" (DHTML) is a term used by some vendors to describe the combination of HTML, style sheets and scripts that allows documents to be animated. The W3C DOM Working Group is working hard to make sure interoperable and language-neutral solutions are agreed upon (see also the W3C FAQ). As Mozilla claims the title of \"Web Application Platform\", support for the DOM is one of the most requested features, and a necessary one if Mozilla wants to be a viable alternative to the other browsers. Even more important is the fact that the user interface of Mozilla (also Firefox and Thunderbird) is built using XUL -- an XML User interface Language. So Mozilla uses the DOM to manipulate its own UI."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Using_dynamic_styling_information","title":"Using dynamic styling information","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_reference","title":"DOM event reference","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Manipulating_the_browser_history","title":"Manipulating the browser history","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.history","title":"window.history","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Using_full-screen_mode","title":"Using full-screen mode","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Using_the_Page_Visibility_API","title":"Using the Page Visibility API","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM_Inspector","title":"DOM Inspector","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLLegendElement","title":"HTMLLegendElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.attributes","title":"Node.attributes","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.baseURI","title":"Node.baseURI","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.baseURIObject","title":"element.baseURIObject","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.childElementCount","title":"element.childElementCount","description":"childElementCount returns the number of child elements of the given element. Syntax and values var elCount = elementNodeReference.childElementCount;   elCount is the number of elements that are children of the current element. If the element has no children, then elCount is zero. This attribute is read only. See also  children firstElementChild lastElementChild nextElementSibling previousElementSibling"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.childNodes","title":"Node.childNodes","description":"childNodes  returns a collection of child nodes of the given element. Syntax and values  var ndList = elementNodeReference.childNodes;   ndList is an ordered collection of node objects that are children of the current element. If the element has no children, then ndList contains no node. The ndList is a variable storing the node list of childNodes. Such list is of type NodeList. The childNodes attribute is read-only. Example  \/\/ parg is an object reference to a <p> element if (parg.hasChildNodes()) \/\/ So, first we check if the object is not empty, if the object has child nodes  {    var children = parg.childNodes;    for (var i = 0; i < children.length; i++)     {    \/\/ do something with each child as children[i]    \/\/ NOTE: List is live, Adding or removing children will change the list    };  };   \/\/ This is one way to remove all children from a node \/\/ box is an object reference to an element with children while (box.firstChild)   {     \/\/The list is LIVE so it will re-index each call     box.removeChild(box.firstChild);  };  Notes The items in the collection of nodes are objects and not strings. To get data from those node objects, you must use their properties (e.g. elementNodeReference.childNodes[1].nodeName to get the name, etc.). The document object itself has 2 children: the Doctype declaration and the root element, typically referred to as documentElement. (In (X)HTML documents this is the HTML element.) See Also firstChild, lastChild and previousSibling See Also firstChild, lastChild and previousSibling Specification  W3C DOM 2 Core: childNodes W3C DOM 3 Core: childNodes W3C DOM 3 NodeList interface"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.children","title":"element.children","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.className","title":"element.className","description":"className  gets and sets the value of the class attribute of the specified element. Syntax and values \r           var cName = elementNodeReference.className; elementNodeReference.className = cName;\r          cName is a string variable representing the class or space-separated classes of the current element. Example \r           var elementNodeReference = document.getElementById(\"div1\"); if (elementNodeReference.className == \"fixed\") {    \/\/ skip a particular class of element    goNextElement(); }\r          Notes The name className is used for this property instead of class because of conflicts with the \"class\" keyword in many languages which are used to manipulate the DOM. Specification DOM Level 2 HTML: className See Also  element.classList"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.classList","title":"element.classList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.clientHeight","title":"element.clientHeight","description":"Summary  Returns the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin. clientHeight can be calculated as CSS height + CSS padding - height of horizontal scrollbar (if present).   Syntax and values  var h = element.clientHeight;  h is an integer representing the clientHeight of element in pixels. clientHeight is read&ndash;only.   Example  padding-top Gentle, individualistic and very loyal, Birman cats fall between Siamese and Persian in character. If you admire cats that are non aggressive, that enjoy being with humans and tend to be on the quiet side, you may well find that Birman cats are just the felines for you. All Birmans have colorpointed features, dark coloration of the face, ears, legs and tail. Cat image and text coming from http:\/\/www.best-cat-art.com\/  padding-bottomLeftTopRightBottommargin-topmargin-bottomborder-topborder-bottom  Specification Not part of any W3C specification.  Notes clientHeight is a non-standard, HTML-specific property introduced in the Internet Explorer object model. offsetLeft returns the position the upper left edge of the element; not necessarily the 'real' left edge of the element. This is important for span elements in flowed text that wraps from one line to the next. The span may start in the middle of the page and wrap around to the beginning of the next line. The offsetLeft will refer to the left edge of the start of the span, not the left edge of text at the start of the second line. Therefore, a box with the left, top, width and height of offsetLeft, offsetTop, offsetWidth and offsetHeight will not be a bounding box for a span with wrapped text. (And, I can't figure out how to find the leftmost edge of such a span, sigh.)References  MSDN: clientHeight Property   MSDN: Measuring Element Dimension and Location   See Also  DOM:element.offsetHeight  DOM:element.scrollHeight  Determining the dimensions of elements"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.clientLeft","title":"element.clientLeft","description":"The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right&ndash;to&ndash;left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only. Gecko-based applications support clientLeft starting with Gecko 1.9 (Firefox 3, implemented in   bug 111207 ). This property is not supported in Firefox 2 and earlier.  Syntax var left = element.clientLeft;  Example padding-top Gentle, individualistic and very loyal, Birman cats fall between Siamese and Persian in character. If you admire cats that are non aggressive, that enjoy being with humans and tend to be on the quiet side, you may well find that Birman cats are just the felines for you. All Birmans have colorpointed features, dark coloration of the face, ears, legs and tail. Cat image and text coming from www.best-cat-art.com padding-bottomLeftTopRightBottommargin-topmargin-bottomborder-topborder-bottom   When layout.scrollbar.side property is set to 1 or to 3 and when the text-direction is set to RTL, then the vertical scrollbar is positioned on the left and this impacts the way clientLeft is computed. Specification Not part of any W3C specification.  Notes clientLeft was first introduced in the MS IE DHTML object model. The position of the vertical scrollbar in right&ndash;to&ndash;left text direction set on the element will depend on the layout.scrollbar.side preference  References  MSDN: clientLeft Property   MSDN: Measuring Element Dimension and Location"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.clientTop","title":"element.clientTop","description":"The width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only. Gecko-based applications support clientTop starting with Gecko 1.9 (Firefox 3, implemented in   bug 111207 ). This property is not supported in Firefox 2 and earlier.  Syntax var top = element.clientTop;  Example padding-top Gentle, individualistic and very loyal, Birman cats fall between Siamese and Persian in character. If you admire cats that are non aggressive, that enjoy being with humans and tend to be on the quiet side, you may well find that Birman cats are just the felines for you. All Birmans have colorpointed features, dark coloration of the face, ears, legs and tail. Cat image and text coming from www.best-cat-art.com padding-bottomLeftTopRightBottommargin-topmargin-bottomborder-topborder-bottom  Specification Not part of any W3C specification.  Notes clientTop was first introduced in the MS IE DHTML object model.  References  MSDN: clientTop Property   MSDN: Measuring Element Dimension and Location"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.clientWidth","title":"element.clientWidth","description":"clientWidth  is the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin.  Syntax and values var intElemClientWidth = element.clientWidth;  intElemClientWidth is an integer corresponding to the clientWidth of element in pixels. clientWidth is read&ndash;only.   Example padding-top Gentle, individualistic and very loyal, Birman cats fall between Siamese and Persian in character. If you admire cats that are non aggressive, that enjoy being with humans and tend to be on the quiet side, you may well find that Birman cats are just the felines for you. All Birmans have colorpointed features, dark coloration of the face, ears, legs and tail. Cat image and text coming from www.best-cat-art.com padding-bottomLeftTopRightBottommargin-topmargin-bottomborder-topborder-bottom  Specification Not part of any W3C specification.  Notes clientWidth was first introduced in the MS IE DHTML object model.  References  MSDN: clientWidth definition   MSDN: Measuring Element Dimension and Location   See also  DOM:element.offsetWidth  DOM:element.scrollWidth  Determining the dimensions of elements"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.contentEditable","title":"element.contentEditable","description":"contentEditable is used to indicate whether or not the element is editable. This enumerated attribute can have the following values:  true, or the empty string, indicates that the element is editable. false indicates that the element cannot be edited. inherit indicates that the element inherits its parent's editable status.  Syntax editable = element.contentEditable element.contentEditable = \"true\"  Notes You can use the element.isContentEditable  property to test the computed Boolean value of this property. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 11 3.0 (1.9)  6 10.6 3.2         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 3 1.0 (1.9)  6 -- 5     Specification  HTML5 contenteditable attribute"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.dataset","title":"element.dataset","description":"Allows access, both in reading and writing mode, to all the custom data attributes (data-*) set on the element. It is a map of DOMString, one entry for each custom data attribute. The name of the custom data attributes must follow the production rule of xml names with the constraints:  the name must not start with xml, whatever case is used for these letters; the name must not contain any semicolon (U+003A); the name must not contain capital A to Z letters.  The custom data attributes is transformed to a key for the DOMStringMap  entry with the following rules:  any dash (U+002D) is removed; any letter following a dash (U+002D), before its removal, is set in its uppercase counterpart.  This leads to camel-cased keys in the map. Syntax  var string = element.dataset.camelCasedName; element.dataset.camelCasedName = string;  Examples  <div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe <\/div>  var el = document.querySelector('#user');  \/\/ el.id == 'user' \/\/ el.dataset.id === '1234567890' \/\/ el.dataset.user === 'johndoe' \/\/ el.dataset.dateOfBirth === ''  el.dataset.dateOfBirth = '1960-10-03'; \/\/ set the DOB.  \/\/ 'someDataAttr' in el.dataset === false  el.dataset.someDataAttr = 'mydata'; \/\/ 'someDataAttr' in el.dataset === true  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 8 6.0 (6.0)  --- 11.10 6         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support --- --- --- --- ---"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.dir","title":"element.dir","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.firstChild","title":"Node.firstChild","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.firstElementChild","title":"element.firstElementChild","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.id","title":"element.id","description":"Gets or sets the element's identifier (attribute id). Syntax var idStr = element.id; element.id = idStr;  where idStr is the ID of the element. Notes The ID must be unique in a document, and is often used to retrieve the element using document.getElementById. In some documents (in particular, HTML, XUL, and SVG), the id of an element can be specified as an attribute on the element like so: <div id=\"table-cell2\">. However you can't use this attribute in a custom XML document without correctly specifying the type of the id attribute in the DOCTYPE. Other common usages of id include using the element's ID as a selector when styling the document with CSS. Note that IDs are case-sensitive, but you should not create IDs that differ only in the capitalization (see Case Sensitivity in class and id Names). Specification DOM Level 2 HTML: id"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.innerHTML","title":"element.innerHTML","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.isContentEditable","title":"element.isContentEditable","description":"isContentEditable returns true if the contents of the element are editable; otherwise it returns false. Syntax editable = element.isContentEditable  Notes This property is read-only. Specification  HTML5 contenteditable attribute  See also  element.contentEditable"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.lang","title":"element.lang","description":"This property gets or sets the base language of an element's attribute values and text content.  Syntax and values var languageUsed = elementNodeReference.lang; elementNodeReference.lang = NewLanguage;  languageUsed is a string variable that gets the language in which the text of the current element is written. NewLanguage is a string variable with its value setting the language in which the text of the current element is written.  Example  \/\/ this snippet compares the base language and  \/\/ redirects to another url based on language if (document.documentElement.lang == \"en\")     {     window.location.href = \"Some_document.html.en\";    } else if(document.documentElement.lang == \"ru\")    {     window.location.href = \"Some_document.html.ru\";    };  Notes The language code returned by this property is defined in RFC 1766. Common examples include \"en\" for English, \"ja\" for Japanese, \"es\" for Spanish and so on. The default value of this attribute is unknown. Note that this attribute, though valid at the individual element level described here, is most often specified for the root element of the document. This also only works with the deprecated lang attribute and not with xml:lang.Specification  W3C DOM Level 2 HTML: lang"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.lastChild","title":"Node.lastChild","description":"lastChild returns the last child of a node. Syntax and Values var last_child = element.lastChild;  The last_child returned is a node. If its parent is an element, then the child is generally an Element node, a Text node, or a Comment node. Example var tr = document.getElementById(\"row1\"); corner_td = tr.lastChild;  Notes Returns null if there are no child elements. Specification lastChild"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.lastElementChild","title":"element.lastElementChild","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.localName","title":"Node.localName","description":"Returns the local part of the qualified name of this node. Syntax name = element.localName   name is the local name as a string (see Notes below for details)  Example (Must be served with XML content type, such as text\/xml or application\/xhtml+xml.)  <html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\"       xmlns:svg=\"http:\/\/www.w3.org\/2000\/svg\"> <head>   <script type=\"application\/javascript\"><![CDATA[   function test() {     var text = document.getElementById('text');     var circle = document.getElementById('circle');          text.value = \"<svg:circle> has:\\n\" +                  \"localName = '\" + circle.localName + \"'\\n\" +                  \"namespaceURI = '\" + circle.namespaceURI + \"'\";   }   ]]><\/script> <\/head> <body onload=\"test()\">   <svg:svg version=\"1.1\"     width=\"100px\" height=\"100px\"     viewBox=\"0 0 100 100\">     <svg:circle cx=\"50\" cy=\"50\" r=\"30\" style=\"fill:#aaa\" id=\"circle\"\/>   <\/svg:svg>   <textarea id=\"text\" rows=\"4\" cols=\"55\"\/> <\/body> <\/html>  Notes The local name of a node is that part of the node's qualified name that comes after the colon. Qualified names are typically used in XML as part of the namespace(s) of the particular XML documents. For example, in the qualified name ecomm:partners, partners is the local name and ecomm is the prefix:  <ecomm:business id=\"soda_shop\" type=\"brick_n_mortar\" xmlns:ecomm=\"http:\/\/example.com\/ecomm\">   <ecomm:partners>     <ecomm:partner id=\"1001\">Tony's Syrup Warehouse     <\/ecomm:partner>   <\/ecomm:partner> <\/ecomm:business>     Gecko 1.9.2 noteIn Firefox 3.5 and earlier, the property returns the upper-cased version of the local name for HTML elements in HTML DOMs (as opposed to XHTML elements in XML DOMs). In later versions, in compliance with HTML5, the property returns in the case of the internal DOM storage, which is lower case for both HTML elements in HTML DOMs and XHTML elements in XML DOMs. The tagName property continues to return in the upper case for HTML elements in HTML DOMs. For nodes of any type other than ELEMENT_NODE and ATTRIBUTE_NODE localName is always null. See Also element.namespaceURI Specification DOM Level 2 Core: Node.localName"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.name","title":"element.name","description":"name gets or sets the name attribute of an DOM object, it only applies to the following elements: <a> , <applet> , <form> , <frame> , <iframe> , <image> , <input> , <map> , <meta> , <object> , <option> , <param> , <select> , and <textarea> . Name can be used in the document.getElementsByName()  method, a form and with the form elements collection. When used with a form or elements collection, it may return a single element or a collection. Syntax HTMLElement.name = string; var elName = HTMLElement.name;  var fControl = HTMLFormElement.elementName; var controlCollection = HTMLFormElement.elements.elementName;  Example  <form action=\"\" name=\"formA\">   <input type=\"text\" value=\"foo\"> <\/form>  <script type=\"text\/javascript\">    \/\/ Get a reference to the first element in the form   var formElement = document.forms['formA'].elements[0];    \/\/ Give it a name   formElement.name = 'inputA';    \/\/ Show the value of the input   alert(document.forms['formA'].elements['inputA'].value);   <\/script>  Notes In Internet Explorer (IE), the name property of DOM objects created using document.createElement()  can't be set or modified. Specification W3C DOM 2 HTML Specification:  Anchor Applet Form Frame iFrame Image Input Map Meta Object Option Param Select Textarea"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.namespaceURI","title":"Node.namespaceURI","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.nextSibling","title":"Node.nextSibling","description":"Returns the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list. Syntax nextNode = node.nextSibling  Notes Gecko-based browsers insert text nodes into a document to represent whitespace in the source markup. Therefore a node obtained for example via firstChild or previousSibling may refer to a whitespace text node, rather than the actual element the author intended to get. See Whitespace in the DOM and W3C DOM 3 FAQ: Why are some Text nodes empty? for more information.  Example  <div id=\"div-01\">Here is div-01<\/div> <div id=\"div-02\">Here is div-02<\/div>  <script type=\"text\/javascript\">   var el = document.getElementById('div-01').nextSibling;   document.write('<p>Siblings of div-01<\/p><ol>');   while (el) {     document.write('<li>' + el.nodeName + '<\/li>');     el = el.nextSibling;   }   document.write('<\/ol>'); <\/script>  \/**************************************************   The following is written to the page as it loads:       Siblings of div-01        1. #text       2. DIV       3. #text       4. SCRIPT       5. P       6. OL **************************************************\/  In the above example, it can be seen that #text nodes are inserted in the DOM where whitespace occurs in the markup between tags (i.e. after the closing tag of an element and before the opening tag of the next). No whitespace is created between the elements inserted by the document.write statement. The possible inclusion of text nodes in the DOM must be allowed for when traversing the DOM using nextSibling. See the resources in the Notes section. Specification DOM Level 1 Core: nextSibling DOM Level 2 Core: nextSibling   See also  Element.nextElementSibling"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.nextElementSibling","title":"element.nextElementSibling","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.nodeName","title":"Node.nodeName","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.nodePrincipal","title":"Node.nodePrincipal","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.nodeType","title":"Node.nodeType","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.nodeValue","title":"Node.nodeValue","description":"Returns or sets the value of the current node. Syntax var value = node.nodeValue;  value is a string containing the value of the current node, if any. Notes For the document itself, nodeValue returns null. For text, comment, and CDATA nodes, nodeValue returns the content of the node. For attribute nodes, the value of the attribute is returned. The following table shows the return values for different elements:    Attr value of attribute   CDATASection content of the CDATA Section   Comment content of the comment   Document null   DocumentFragment null   DocumentType null   Element null   NamedNodeMap null   EntityReference null   Notation null   ProcessingInstruction entire content excluding the target   Text content of the text node    When nodeValue is defined to be null, setting it has no effect. Specification  DOM Level 2 Core: Node.nodeValue"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.offsetHeight","title":"element.offsetHeight","description":"Height of an element relative to the element's offsetParent. Syntax and values var intElemOffsetHeight = document.getElementById(id_attribute_value).offsetHeight;  intElemOffsetHeight is a variable storing an integer corresponding to the offsetHeight pixel value of the element. offsetHeight is a read-only property. Description Typically, an element's offsetHeight is a measurement which includes the element borders, the element vertical padding, the element horizontal scrollbar (if present, if rendered) and the element CSS height. Non-scrollable elements (CSS overflow not set or set to visible) will have equal offsetHeight and scrollHeight (is this right? scrollHeight doesn't include the border, while offsetHeight would include border). For the document body object, the measurement includes total linear content height instead of the element CSS height. Floated elements extending below other linear content are ignored. Example   padding-top Gentle, individualistic and very loyal, Birman cats fall between Siamese and Persian in character. If you admire cats that are non aggressive, that enjoy being with humans and tend to be on the quiet side, you may well find that Birman cats are just the felines for you. All Birmans have colorpointed features, dark coloration of the face, ears, legs and tail. Cat image and text coming from www.best-cat-art.com padding-bottom  LeftTopRightBottommargin-topmargin-bottomborder-topborder-bottom  Specification http:\/\/www.w3.org\/TR\/cssom-view\/#offset-attributes Notes offsetHeight is a property of the DHTML object model which was first introduced by MSIE. It is sometimes referred to as an element's physical\/graphical dimensions, or an element's border-box height. The example image above shows a scrollbar and an offsetHeight which fits on the window. However, non-scrollable elements may have large offsetHeight values, much larger than the visible content. These elements are typically contained within scrollable elements; consequently these non-scrollable elements may be completely or partly invisible, depending on the scrollTop setting of the scrollable container. References  MSDN: offsetHeight Property  MSDN: Measuring Element Dimension and Location   See Also  DOM:element.clientHeight DOM:element.scrollHeight DOM:element.offsetWidth Determining the dimensions of elements"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.offsetLeft","title":"element.offsetLeft","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.offsetParent","title":"element.offsetParent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.offsetTop","title":"element.offsetTop","description":"offsetTop returns the distance of the current element relative to the top of the offsetParent node.  Syntax topPos = element.offsetTop  Parameters topPos is the number of pixels from the top of the parent element.  Example  d = document.getElementById(\"div1\");   topPos = d.offsetTop;   if (topPos > 10) {       \/\/ object is offset more     \/\/ than 10 pixels from its parent }  Specification DOM Level 0. Not part of any standard.      References MSDN: offsetTop Property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.offsetWidth","title":"element.offsetWidth","description":"Summary  Returns the layout width of an element.   Syntax  var offsetWidth = element.offsetWidth;  offsetWidth is a read-only property.   Description  Typically, an element's offsetWidth is a measurement which includes the element borders, the element horizontal padding, the element vertical scrollbar (if present, if rendered) and the element CSS width.   Example  padding-top Gentle, individualistic and very loyal, Birman cats fall between Siamese and Persian in character. If you admire cats that are non aggressive, that enjoy being with humans and tend to be on the quiet side, you may well find that Birman cats are just the felines for you. All Birmans have colorpointed features, dark coloration of the face, ears, legs and tail. Cat image and text coming from www.best-cat-art.com padding-bottomLeftTopRightBottommargin-topmargin-bottomborder-topborder-bottom   Specification  offsetWidth is part of the MSIE's DHTML object model. offsetWidth is not part of any W3C specification or technical recommendation.  Notes offsetWidth is a property of the DHTML object model which was first introduced by MSIE. It is sometimes referred to as an element's physical\/graphical dimensions, or an element's border-box width.  References  MSDN: offsetWidth Property   MSDN: Measuring Element Dimension and Location   See also  DOM:element.clientWidth  DOM:element.scrollWidth  Determining the dimensions of elements"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.outerHTML","title":"element.outerHTML","description":"outerHTML gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string. Syntax var content = element.outerHTML;  On return, content contains the serialized HTML fragment describing the element and its descendants. element.outerHTML = content;  Replaces the element with the nodes generated by parsing the string content. Examples Getting the value of an element's outerHTML property: \r           \/\/ HTML: \/\/ <div id=\"d\"><p>Content<\/p> \/\/ <p>Further Elaborated<\/p> \/\/ <\/div>  d = document.getElementById(\"d\"); dump(d.outerHTML);  \/\/ the string \"<div id=\"d\"><p>Content<\/p><p>Further Elaborated<\/p><\/div>\" \/\/ is dumped to the console window\r          Replacing a node by setting the outerHTML property: \r           \/\/ HTML: \/\/ <div id=\"container\"><div id=\"d\">This is a div.<\/div><\/div>  container = document.getElementById(\"container\"); d = document.getElementById(\"d\"); console.log(container.firstChild.nodeName); \/\/ logs \"DIV\"  d.outerHTML = \"<p>This paragraph replaced the original div.<\/p>\"; console.log(container.firstChild.nodeName); \/\/ logs \"P\"  \/\/ The #d div is no longer part of the document tree, \/\/ the new paragraph replaced it.\r          Notes If the element is the root node of the document, setting its outerHTML property will throw a DOMException with the error code NO_MODIFICATION_ALLOWED_ERR. For example: \r           document.documentElement.outerHTML = \"test\";  \/\/ throws a DOMException\r          Also, while the element will be replaced in the document, the variable whose outerHTML property was set will still hold a reference to the original element: \r           var p = document.getElementsByTagName(\"p\")[0]; console.log(p.nodeName); \/\/ shows: \"P\" p.outerHTML = \"<div>This div replaced a paragraph.<\/div>\"; console.log(p.nodeName); \/\/ still \"P\";\r          Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support  (11)  0.2 4.0 7 1.3         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Supported)  (11)  (Supported) (Supported) (Supported)     Specification  HTML5: outerHTML DOM Parsing and Serialization: outerHTML  See also  MSDN: outerHTML Property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.ownerDocument","title":"Node.ownerDocument","description":"The ownerDocument property returns the top-level document object for this node. Syntax document = element.ownerDocument   document is the document object parent of the current element.  Example  \/\/ given a node \"p\", get the top-level HTML child  \/\/ of the document object d = p.ownerDocument;  html = d.documentElement;  Notes The document object returned by this property is the main object with which all the child nodes in the actual HTML document are created. If this property is used on a node that is itself a document, the result is null. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Gecko notes Starting in Gecko 9.0 (Firefox 9.0 \/ Thunderbird 9.0 \/ SeaMonkey 2.6) , the ownerDocument of doctype nodes (that is, nodes for which Node.nodeType  is Node.DOCUMENT_TYPE_NODE or 10) is no longer null. Instead, the ownerDocument is the document on which document.implementation.createDocumentType() was called. Gecko notes Starting in Gecko 9.0 (Firefox 9.0 \/ Thunderbird 9.0 \/ SeaMonkey 2.6) , the ownerDocument of doctype nodes (that is, nodes for which Node.nodeType  is Node.DOCUMENT_TYPE_NODE or 10) is no longer null. Instead, the ownerDocument is the document on which document.implementation.createDocumentType() was called. Specification DOM Level 2 Core: Node.ownerDocument"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.parentNode","title":"Node.parentNode","description":"Returns the parent of the specified node in the DOM tree. Syntax parentNode = node.parentNode  parentNode is the parent of the current node. The parent of an element is an Element node, a Document node, or a DocumentFragment node. Example if (node.parentNode) {   \/\/ remove a node from the tree, unless    \/\/ it's not in the tree already   node.parentNode.removeChild(node); }  Notes parentNode returns null for the following node types: Attr, Document, DocumentFragment, Entity, and Notation. It also returns null if the node has just been created and is not yet attached to the tree. See also element.firstChild , element.lastChild , element.childNodes , element.nextSibling , element.previousSibling . Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier)  0.2 (Supported) (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Supported) 1.0 (1)  (Supported) (Supported) (Supported)     Specification DOM Level 2 Core: Node.parentNode"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.prefix","title":"Node.prefix","description":"prefix returns the namespace prefix of the specified node, or null if no prefix is specified. This property is read only. Syntax string = element.prefix  Examples The following alerts \"x\".  <x:div onclick=\"alert(this.prefix)\"\/>  Notes This will only work when a namespace-aware parser is used, i.e. when a document is served with an XML mime-type. This will not work for HTML documents. Specification Node.prefix (introduced in DOM2) Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ?  (Supported) Prior to Gecko 5.0 (Firefox 5.0 \/ Thunderbird 5.0 \/ SeaMonkey 2.2) , this property was read-write; the specification says it should be read only, and now it is.  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ?  (Supported) Prior to Gecko 5.0 (Firefox 5.0 \/ Thunderbird 5.0 \/ SeaMonkey 2.2) , this property was read-write; the specification says it should be read only, and now it is.  ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.previousSibling","title":"Node.previousSibling","description":"Summary  Returns the node immediately preceding the specified one in its parent's childNodes list, null if the specified node is the first in that list.   Syntax  previousNode = node.previousSibling   Example  \/\/ <a><b1 id=\"b1\"\/><b2 id=\"b2\"\/><\/a> alert(document.getElementById(\"b1\").previousSibling); \/\/ null alert(document.getElementById(\"b2\").previousSibling.id); \/\/ \"b1\"   Notes  Gecko-based browsers insert text nodes into a document to represent whitespace in the source markup. Therefore a node obtained for example via firstChild or previousSibling may refer to a whitespace text node, rather than the actual element the author intended to get. See Whitespace in the DOM and W3C DOM 3 FAQ: Why are some Text nodes empty? for more information.   To navigate the opposite way through the child nodes list use element.nextSibling.   Specification  DOM Level 1 Core: previousSibling DOM Level 2 Core: previousSibling"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.previousElementSibling","title":"element.previousElementSibling","description":"previousElementSibling() returns the element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list. Syntax and values var prevNode = elementNodeReference.previousElementSibling;   prevNode is a reference to the previous sibling of the element node, or null if there isn't one. This attribute is read-only. Example \r           <div id=\"div-01\">Here is div-01<\/div> <div id=\"div-02\">Here is div-02<\/div> <li>This is a list item<\/li> <li>This is another list item<\/li> <div id=\"div-03\">Here is div-03<\/div>  <script type=\"text\/javascript\">   var el = document.getElementById('div-03').previousElementSibling;   document.write('<p>Siblings of div-03<\/p><ol>');   while (el) {     document.write('<li>' + el.nodeName + '<\/li>');     el = el.previousElementSibling;   }   document.write('<\/ol>'); <\/script>\r          This example outputs the following into the page when it loads: Siblings of div-03     1. LI    2. LI    3. DIV    4. DIV  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 4 3.5 (1.9.1)  9 9.8 4         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specification Element Traversal Specification: previousElementSibling See also  childElementCount children firstElementChild lastElementChild nextElementSibling"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.scrollHeight","title":"element.scrollHeight","description":"scrollHeight Height of the scroll view of an element; it includes the element padding but not its margin. Syntax and values  var intElemScrollHeight = document.getElementById(id_attribute_value).scrollHeight;  intElemScrollHeight is a variable storing an integer corresponding to the scrollHeight pixel value of the element. scrollHeight is a read-only property. Description An element's scrollHeight is a measurement of the height of an element's content including content not visible on the screen due to overflow. If the element's content generated a vertical scrollbar, the scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint without using a vertical scrollbar. When an element's content does not generate a vertical scrollbar, then its scrollHeight property is equal to its clientHeight property. This can mean either the content is too short to require a scrollbar or that the the element has CSS style overflow value of visible (non-scrollable). Example   padding-top Gentle, individualistic and very loyal, Birman cats fall between Siamese and Persian in character. If you admire cats that are non aggressive, that enjoy being with humans and tend to be on the quiet side, you may well find that Birman cats are just the felines for you. All Birmans have colorpointed features, dark coloration of the face, ears, legs and tail. Cat image and text coming from www.best-cat-art.com padding-bottom  LeftTopRightBottommargin-topmargin-bottomborder-topborder-bottom  Specification scrollHeight is part of the MSIE's DHTML object model. scrollHeight is not part of any W3C specification or technical recommendation. Browser compatibility    Browser Lowest version   Internet Explorer 8.0   Firefox (Gecko) 3.0 (1.9)   Opera ?   Safari | Chrome | WebKit 4.0 | 4.0 | ?     Notes scrollHeight is a property of the DHTML object model which was first introduced by MSIE. It is referred to as the height of an element's physical scrolling view. References  MSDN: scrollHeight Property  MSDN: Measuring Element Dimension and Location   See Also  DOM:element.clientHeight DOM:element.offsetHeight Determining the dimensions of elements"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.scrollLeft","title":"element.scrollLeft","description":"scrollLeft gets or sets the number of pixels that an element's content is scrolled to the left. Note that if the element's direction is 'rtl' (right-to-left) then scrollLeft is zero when the scrollbar is at its rightmost position (at start of the scrolled content) and then increasingly negative as you scroll towards the end of the content. Syntax and values  \/\/ Get the number of pixels scrolled var sLeft = element.scrollLeft;  sLeft is an integer representing the number of pixels that element has been scrolled to the left.  \/\/ Set the number of pixels scrolled element.scrollLeft = 10;  scrollLeft can be set to any integer value, however:  If the element can't be scrolled (e.g. it has no overflow), scrollLeft is set to 0. If set to a value less than 0 (greater than 0 for right-to-left elements), scrollLeft is set to 0. If set to a value greater than the maximum that the content can be scrolled, scrollLeft is set to the maximum.  Example \r           <!DOCTYPE html> <html> <head>     <meta charset=\"utf-8\">     <style>         #container {             border: 1px solid #ccc; height: 100px; overflow: scroll; width: 100px;         }         #content {             background-color: #ccc; width: 250px;         }     <\/style>     <script>         document.addEventListener('DOMContentLoaded', function () {                var button = document.getElementById('slide');             button.onclick = function () {                 document.getElementById('container').scrollLeft += 20;             };         }, false);     <\/script> <\/head> <body>     <div id=\"container\">         <div id=\"content\">Lorem ipsum dolor sit amet.<\/div>     <\/div>     <button id=\"slide\" type=\"button\">Slide<\/button> <\/body> <\/html>\r          Specification DOM Level 0. Not part of any standard.     References MSDN: scrollLeft Property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.scrollTop","title":"element.scrollTop","description":"scrollTop gets or sets the number of pixels that the content of an element is scrolled upward. Syntax and values \/\/ Get the number of pixels scrolled var  intElemScrollTop = element.scrollTop;  intElemScrollTop is an integer corresponding to number of pixels that element's content has been scrolled upward. \/\/ Set the number of pixels scrolled element.scrollTop = intValue;  scrollTop can be set to any integer value, however:  If the element can't be scrolled (e.g. it has no overflow or if the element is non-scrollable), scrollTop is set to 0. If set to a value less than 0, scrollTop is set to 0. If set to a value greater than the maximum that the content can be scrolled, scrollTop is set to the maximum.  Description An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0. Example   padding-top Gentle, individualistic and very loyal, Birman cats fall between Siamese and Persian in character. If you admire cats that are non aggressive, that enjoy being with humans and tend to be on the quiet side, you may well find that Birman cats are just the felines for you. All Birmans have colorpointed features, dark coloration of the face, ears, legs and tail. Cat image and text coming from www.best-cat-art.com padding-bottom  LeftTopRightBottommargin-topmargin-bottomborder-topborder-bottom  Specification scrollTop is part of the MSIE's DHTML object model and is implemented in the Mozilla Gecko engine powering Firefox. scrollTop is not part of any W3C specification or technical recommendation. Notes scrollTop is a property of the DHTML object model which was first introduced by MSIE. It is referred as the distance to the top of an element physical scrolling view. References  MSDN's scrollTop definition MSDN's Measuring Element Dimension and Location"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.scrollWidth","title":"element.scrollWidth","description":"scrollWidth is a read&ndash;only property that returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth.  Syntax and values var xScrollWidth = element.scrollWidth;  xScrollWidth is the width of the content of element in pixels.  Example  <div id=\"aDiv\"      style=\"width: 100px; height: 200px; overflow: auto;\" >-FooBar-FooBar-FooBar<\/div> <br> <input type=\"button\" value=\"Show scrollWidth\"        onclick=\"alert(document.getElementById('aDiv').scrollWidth);\">  Specification The CSSOM View Module defines scrollWidthReferences MSDN: scrollWidth Property   See also  DOM:element.clientWidth  DOM:element.offsetWidth  Determining the dimensions of elements"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.style","title":"element.style","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.tabIndex","title":"element.tabIndex","description":"Gets\/sets the tab order of the current element.  Syntax  element.tabIndex = iIndex  Parameters   iIndex is a number  Example   b1 = document.getElementById(\"button1\");  b1.tabIndex = 1;  Specification  W3C DOM Level 2 HTML tabIndex For some useful info, see also: The solution: changes to standard behavior of tabindex"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSStyleDeclaration","title":"CSSStyleDeclaration","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.textContent","title":"Node.textContent","description":"Gets or sets the text content of a node and its descendants. Syntax var text = element.textContent; element.textContent = \"this is some sample text\";  Description  textContent returns null if the element is a document, a document type, or a notation. To grab all of the text and CDATA data for the whole document, one could use document.documentElement.textContent. If the node is a CDATA section, a comment, a processing instruction, or a text node, textContent returns the text inside this node (the nodeValue). For other node types, textContent returns the concatenation of the textContent attribute value of every child node, excluding comments and processing instruction nodes. This is an empty string if the node has no children. Setting this property on a node removes all of its children and replaces them with a single text node with the given value.  Differences from innerText Internet Explorer introduced element.innerText. The intention is pretty much the same with a couple of differences:  Note that while textContent gets the content of all elements, including <script>  and <style>  elements, the mostly equivalent IE-specific property, innerText, does not. innerText is also aware of style and will not return the text of hidden elements, whereas textContent will. As innerText is aware of CSS styling, it will trigger a reflow, whereas textContent will not.  Differences from innerHTML innerHTML returns the HTML as its name indicates. Quite often, in order to retrieve or write text within an element, people use innerHTML. innerText should be used instead. Since the text is not processed it's likely to have better performance. Moreover, this avoids an XSS vector attack. Differences from innerText Internet Explorer introduced element.innerText. The intention is pretty much the same with a couple of differences:  Note that while textContent gets the content of all elements, including <script>  and <style>  elements, the mostly equivalent IE-specific property, innerText, does not. innerText is also aware of style and will not return the text of hidden elements, whereas textContent will. As innerText is aware of CSS styling, it will trigger a reflow, whereas textContent will not.  Differences from innerHTML innerHTML returns the HTML as its name indicates. Quite often, in order to retrieve or write text within an element, people use innerHTML. innerText should be used instead. Since the text is not processed it's likely to have better performance. Moreover, this avoids an XSS vector attack. Example \r           \/\/ Given the following HTML fragment: \/\/   <div id=\"divA\">This is <span>some<\/span> text<\/div>  \/\/ Get the text content: var text = document.getElementById(\"divA\").textContent; \/\/ |text| is set to \"This is some text\".  \/\/ Set the text content: document.getElementById(\"divA\").textContent = \"This is some text\"; \/\/ The HTML for divA is now: \/\/   <div id=\"divA\">This is some text<\/div>\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 1+ (Supported) 9 (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Specification textContent"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.tagName","title":"element.tagName","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.title","title":"element.title","description":"Establishes the text to be displayed in a 'tool tip' popup when the mouse is over the displayed node. Syntax  var string = element.title; element.title = string;  Example   button1.title = \"click to refresh\";  Behavior If a node does not have a title attribute, then the default action is to inherit it from its parent node, which in turn may inherit it from its parent node, etc. According to   bug 264001 , setting title to the empty string triggers the default inheriting behavior. To cancel inheritance, title must be set to a non-empty whitespace string.   <div title=\"CoolTip>    <div title=\"\">mouse over here will popup \"CoolTip\"<\/div>    <div title=\" \">mouse over here will popup nothing\"<\/div>  <\/div>"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.addEventListener","title":"element.addEventListener","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.appendChild","title":"Node.appendChild","description":"Adds a node to the end of the list of children of a specified parent node. If the node already exists it is removed from current parent node, then added to new parent node. Syntax  var child = element.appendChild(child);  element is the parent element. child is the node to append underneath element. Also returned.  Description The appendChild method returns a reference to added node. Example  \/\/ Create a new paragraph element, and append it to the end of the document body var p = document.createElement(\"p\"); document.body.appendChild(p);  Notes If child is a reference to an existing node in the document, appendChild moves it from its current position to the new position (i.e. there is no requirement to remove the node from its parent node before appending it to some other node). This also means that a node can't be in two points of the document simultaneously. So if the node already has a parent, it is first removed, then appended at the new position. You can use cloneNode to make a copy of the node before appending it under the new parent. (Note that the copies made with cloneNode will not be automatically kept in sync.) This method is not allowed to move nodes between different documents. If you want to append node from a different document (for example to display results from AJAX request) you must first use importNode. Related methods: insertBefore, replaceChild and removeChild. appendChild() is one of the fundamental methods of web programming using the DOM. The appendChild() method inserts a new node into the DOM structure of a document, and is the second part of the one-two, create-and-append process so central to building web pages programmatically. Specification DOM Level 3 Core: appendChild"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.blur","title":"element.blur","description":"The blur method removes keyboard focus from the current element.  Syntax  element.blur()   Specification blur  See also  DOM element focus"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.click","title":"element.click","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.cloneNode","title":"Node.cloneNode","description":"Returns a duplicate of the current node. Syntax dupNode = element.cloneNode(deep);   deep is a required boolean value indicating whether the clone is a deep clone or not (see notes below).  Example  p = document.getElementById(\"para1\");  p_prime = p.cloneNode(true);  Notes Cloning a node copies all of its attributes and their values but does not copy event listeners. The duplicate node returned by cloneNode is not part of the document until it is added to another node that is part of the document using appendChild or a similar method. It also has no parent until it is appended to another node. If deep is set to false, none of the child nodes are cloned. Any text that the node contains is not cloned either, as it is contained in one or more child Text nodes. If deep evaluates to true, the whole subtree (including text that may be in child Text nodes) is copied too. For empty nodes (e.g. IMG and INPUT elements) it doesn't matter whether deep is set to true or false but you still have to provide a value. Note that cloneNode may lead to duplicate element-ids in a document! The duplicate node returned by cloneNode receives a new uniqueID when it is added to another node To clone a node for appending to a different document, use importNode instead. Specification DOM Level 2 Core: cloneNode"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.compareDocumentPosition","title":"Node.compareDocumentPosition","description":"Compares the position of the current node against another node in any other document. Syntax node.compareDocumentPosition( otherNode )    node is the node that's being compared. otherNode is the node that's being compared against.  The return value is computed as the relationship that otherNode has with node. Notes The return value is a bitmask with the following values: DOCUMENT_POSITION_DISCONNECTED = 0x01; DOCUMENT_POSITION_PRECEDING = 0x02; DOCUMENT_POSITION_FOLLOWING = 0x04; DOCUMENT_POSITION_CONTAINS = 0x08; DOCUMENT_POSITION_CONTAINED_BY = 0x16;  Example  var head = document.getElementsByTagName('head').item(0); var result = head.compareDocumentPosition(document.body); \/\/ result = head.DOCUMENT_POSITION_FOLLOWING  Specification DOM Level 3: compareDocumentPosition"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.dispatchEvent","title":"element.dispatchEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.focus","title":"element.focus","description":"Sets focus on the specified element, if it can be focused. Syntax element.focus();  Specification DOM Level 1 HTML: various elements.focus DOM Level 2 HTML: various elements.focus See also  element.blur()  document.activeElement"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.getAttribute","title":"element.getAttribute","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.getAttributeNS","title":"element.getAttributeNS","description":"Summary  getAttributeNS returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.   Syntax  attrVal = element.getAttributeNS(namespace, name)   Parameters   attrVal is the string value of the specified attribute.  namespace is the namespace of the specified attribute.  name is the name of the specified attribute.   Example  var div1 = document.getElementById(\"div1\"); var a = div1.getAttributeNS(\"www.mozilla.org\/ns\/specialspace\/\",                              \"special-align\"); alert(a); \/\/ shows the value of align for that div   Notes  getAttributeNS differs from getAttribute in that it allows you to further specify the requested attribute as being part of a particular namespace, as in the example above, where the attribute is part of the fictional \"specialspace\" namespace on mozilla. Essentially all web browsers (Firefox, Internet Explorer, recent versions of Opera, Safari, Konqueror, and iCab, as a non-exhaustive list) return null when the specified attribute does not exist on the specified element. The DOM specification says that the correct return value in this case is actually the empty string, and some DOM implementations implement this behavior. Consequently, you should use hasAttributeNS to check for an attribute's existence prior to calling getAttributeNS if it is possible that the requested attribute does not exist on the specified element. DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -         Specification  DOM Level 2 Core: getAttributeNS   See also  Code snippets:getAttributeNS"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.getAttributeNode","title":"element.getAttributeNode","description":"Returns the specified attribute of the specified element, as an Attr node. Syntax var attrNode = element.getAttributeNode(attrName);    attrNode is an Attr node for the attribute. attrName is a string containing the name of the attribute.  Example  \/\/ html: <div id=\"top\" \/>  var t = document.getElementById(\"top\");  var idAttr = t.getAttributeNode(\"id\");  alert(idAttr.value == \"top\")  Notes When called on an HTML element in a DOM flagged as an HTML document, getAttributeNode lower-cases its argument before proceeding. The Attr node inherits from Node, but is not considered a part of the document tree. Common Node attributes like parentNode, previousSibling, and nextSibling are null for an Attr node. You can, however, get the element to which the attribute belongs with the ownerElement property. getAttribute is usually used instead of getAttributeNode to get the value of an element's attribute. DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -       Specifications  DOM Level 2 Core: getAttributeNode (introduced in DOM Level 1 Core) HTML 5: APIs in HTML documents"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.getBoundingClientRect","title":"element.getBoundingClientRect","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.getAttributeNodeNS","title":"element.getAttributeNodeNS","description":"Summary  Returns the Attr node for the attribute with the given namespace and name.   Syntax  attributeNode = element.getAttributeNodeNS(namespace, nodeName)    attributeNode is the node for specified attribute.  namespace is a string specifying the namespace of the attribute.  nodeName is a string specifying the name of the attribute.     Notes  getAttributeNodeNS is more specific than getAttributeNode in that it allows you to specify attributes that are part of a particular namespace. The corresponding setter method is setAttributeNodeNS. DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -         Specification  DOM Level 2 Core: getAttributeNodeNS"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.getClientRects","title":"element.getClientRects","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.getElementsByTagName","title":"element.getElementsByTagName","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.getElementsByTagNameNS","title":"element.getElementsByTagNameNS","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.getUserData","title":"Node.getUserData","description":"Returns any user data set previously on the given node by setUserData(). Syntax userData = someNode.getUserData(userKey);  userData is the data that had been stored previously by setUserData() or null if none. someNode is the node for which user data is being sought. userKey is the key to choose the specific data sought for the given node. More than one key may have been assigned on a given node, containing its own value.  Example \r           var d = document.setUserData('key', 15, null); alert(document.getUserData('key')); \/\/ 15\r          Specification  DOM Level 3 Core: getUserData  See also  Node.setUserData UserDataHandler DOMUserData"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.hasAttribute","title":"element.hasAttribute","description":"hasAttribute returns a boolean value indicating whether the specified element has the specified attribute or not. Syntax var result = element.hasAttribute(attName);   result holds the return value true or false. attName is a string representing the name of the attribute.  Example  \/\/ check that the attribute exists before setting a value  var d = document.getElementById(\"div1\");  if (d.hasAttribute(\"align\")) {    d.setAttribute(\"align\", \"center\");  }  Notes DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -       Specification DOM Level 2 Core: hasAttribute"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.hasAttributeNS","title":"element.hasAttributeNS","description":"Summary  hasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.  Syntax  result = element.hasAttributeNS(namespace, localName)    result is the boolean value true or false.  namespace is a string specifying the namespace of the attribute.  localName is the name of the attribute.   Example   \/\/ check that the attribute exists  \/\/ before you set a value  var d = document.getElementById(\"div1\");  if (d.hasAttributeNS(          \"http:\/\/www.mozilla.org\/ns\/specialspace\/\",          \"special-align\")) {    d.setAttribute(\"align\", \"center\"); }   Notes  DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -         Specification  DOM Level 2 Core: hasAttributeNS"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.hasAttributes","title":"Node.hasAttributes","description":"hasAttributes returns a boolean value of true or false, indicating if the current element has any attributes or not. Syntax var result = element.hasAttributes(); Examples t1 = document.getElementById(\"table-data\");  if (t1.hasAttributes()) {      \/\/ do something with      \/\/ t1.attributes }    var result=document.getElementsByTagName(\"div\")[0].hasAttributes(); Specification hasAttributes"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.hasChildNodes","title":"Node.hasChildNodes","description":"hasChildNodes returns a Boolean value indicating whether the current element has child nodes or not. Syntax  element.hasChildNodes() Examples var result = element.hasChildNodes(); Next example removes the first child node inside the element with the id \"foo\" if foo has child nodes  var foo = document.getElementById(\"foo\") if (foo.hasChildNodes()) {    foo.removeChild(foo.childNodes[0]); }   Note that element.hasChildNodes, without the parenthesises, will return the hasChildNodes Function, and not a Boolean.  Specification hasChildNodes"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.insertBefore","title":"Node.insertBefore","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.isDefaultNamespace","title":"Node.isDefaultNamespace","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.isEqualNode","title":"Node.isEqualNode","description":"Tests whether two nodes are equal. Syntax  var isEqualNode = node.isEqualNode(arg);   arg The node to compare equality with. Specification  DOM Level 3 Core: isEqualNodeREC"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.isSameNode","title":"Node.isSameNode","description":"Tests whether two nodes are the same, that is they reference the same object. Warning: This method has been deprecated in DOM level 4 and is no longer implemented in recent browsers, including Gecko 10.0 (Firefox 10.0 \/ Thunderbird 10.0) . Instead of using node1.isSameNode(node2), use node1 === node2. Syntax var isSameNode = node.isSameNode(other);   other The node to test against.  Specification   DOM Level 3 Core: isSameNodeREC This has been removed from DOM Core Level 4."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.isSupported","title":"Node.isSupported","description":"Tests whether the DOM implementation implements a specific feature and that feature is supported by this node. Syntax var isSupported = element.isSupported(feature, version);   feature The name of the feature to test. This is the same name which can be passed to the method hasFeature on DOMImplementation. Possible values defined within the core DOM specification are listed on the DOM Level 2 Conformance Section. version This is the version number of the feature to test. In DOM Level 2, version 1, this is the string 2.0. If the version is not specified, supporting any version of the feature will cause the method to return true.  Example \/\/ Get an element and check to see if its supports the DOM2 HTML Module  <div id=\"doc\">  <\/div>  var main = document.getElementById('doc');  var output = main.isSupported('HTML', '2.0');  Notes To check if any version of the DOM specification is supported, you can pass in null as the version instead of a string. Related methods: document.implementation.hasFeature Specification DOM Level 2 Core: isSupported"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.lookupNamespaceURI","title":"Node.lookupNamespaceURI","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.lookupPrefix","title":"Node.lookupPrefix","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.mozMatchesSelector","title":"element.mozMatchesSelector","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.mozRequestFullScreen","title":"element.mozRequestFullScreen","description":"Asynchronously requests that the element be made full-screen. Syntax element.mozRequestFullScreen();  Example Example needed. Notes It's not guaranteed that the element will be put into full-screen mode. If permission to enter full-screen mode is granted, the document will receive a \"mozfullscreenchange\" event to let it know that it's now in full screen mode. If permission is denied, the document receives a \"mozfullscreenerror\" event instead. See Using full-screen mode for details and examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification None See also  Using full-screen mode document.mozCancelFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled  :-moz-full-screen    mozallowfullscreen  See also  Using full-screen mode document.mozCancelFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled  :-moz-full-screen    mozallowfullscreen"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.normalize","title":"Node.normalize","description":"Summary  Puts the specified node and all of its subtree into a \"normalized\" form. In a normalized subtree, no text nodes in the subtree are empty and there are no adjacent text nodes.   Syntax  element.normalize();   Notes   Specification  DOM Level 2 Core: Node.normalize"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.querySelectorAll","title":"element.querySelectorAll","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.querySelector","title":"element.querySelector","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.removeAttribute","title":"element.removeAttribute","description":"removeAttribute removes an attribute from the specified element. Syntax element.removeAttribute(attrName);    attrName is a string that names the attribute to be removed from element.  Example  \/\/ <div id=\"div1\" align=\"left\" width=\"200px\">  document.getElementById(\"div1\").removeAttribute(\"align\");  \/\/ now: <div id=\"div1\" width=\"200px\">  Notes You should use removeAttribute instead of setting the attribute value to null using setAttribute. Attempting to remove an attribute that is not on the element doesn't raise an exception. DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -       Specification DOM Level 2 Core: removeAttribute (introduced in DOM Level 1 Core)"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.removeAttributeNS","title":"element.removeAttributeNS","description":"Summary  removeAttributeNS removes the specified attribute from an element.  New in Firefox 3  In Firefox 3 and later, this method resets DOM values to their defaults.   Syntax  element.removeAttributeNS(namespace, attrName);   namespace is a string that contains the namespace of the attribute.  attrName is a string that names the attribute to be removed from the current node.   Example   \/\/ <div id=\"div1\" xmlns:special=\"http:\/\/www.mozilla.org\/ns\/specialspace\" \/\/      special:specialAlign=\"utterleft\" width=\"200px\" \/>  d = document.getElementById(\"div1\");  d.removeAttributeNS(\"http:\/\/www.mozilla.org\/ns\/specialspace\", \"specialAlign\");  \/\/ now: <div id=\"div1\" width=\"200px\" \/>   Notes  DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -         Specification  DOM Level 2 Core: removeAttributeNS"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.removeAttributeNode","title":"element.removeAttributeNode","description":"removeAttributeNode removes the specified attribute from the current element. Syntax removedAttr = element.removeAttributeNode(attributeNode)   attributeNode is the Attr node that needs to be removed. removedAttr is the removed Attr node.  Example \/\/ <div id=\"top\" align=\"center\" \/> var d = document.getElementById(\"top\");  var d_align = d.getAttributeNode(\"align\");  d.removeAttributeNode(d_align);  \/\/ align is now removed: <div id=\"top\" \/>  Notes If the removed Attribute has a default value it is immediately replaced. The replacing attribute has the same namespace URI and local name, as well as the original prefix, when applicable. There is no removeAttributeNodeNS (unlike the pair setAttributeNode and setAttributeNodeNS which need to know which existing attribute to replace (if any), removeAttributeNode has no such requirement). removeAttributeNode can remove namespaced as well as non-namespaced attributes. DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -       Specification DOM Level 2 Core: removeAttributeNode (introduced in DOM Level 1 Core)"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.removeChild","title":"Node.removeChild","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.removeEventListener","title":"element.removeEventListener","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.replaceChild","title":"Node.replaceChild","description":"Replaces one child node of the specified element with another. Syntax replacedNode = parentNode.replaceChild(newChild, oldChild);   newChild is the new node to replace oldChild. If it already exists in the DOM, it is first removed. oldChild is the existing child to be replaced. replacedNode is the replaced node. This is the same node as oldChild.  Example   \/\/ <div> \/\/  <span id=\"childSpan\">foo bar<\/span> \/\/ <\/div>  \/\/ create an empty element node \/\/ without an ID, any attributes, or any content var sp1 = document.createElement(\"span\");  \/\/ give it an id attribute called 'newSpan' sp1.setAttribute(\"id\", \"newSpan\");  \/\/ create some content for the new element. var sp1_content = document.createTextNode(\"new replacement span element.\");  \/\/ apply that content to the new element sp1.appendChild(sp1_content);  \/\/ build a reference to the existing node to be replaced var sp2 = document.getElementById(\"childSpan\"); var parentDiv = sp2.parentNode;  \/\/ replace existing node sp2 with the new span element sp1 parentDiv.replaceChild(sp1, sp2);  \/\/ result: \/\/ <div> \/\/   <span id=\"newSpan\">new replacement span element.<\/span> \/\/ <\/div>   Specification DOM Level 1 Core: replaceChild DOM Level 2 Core: replaceChild"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.scrollIntoView","title":"element.scrollIntoView","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.setAttribute","title":"element.setAttribute","description":"Adds a new attribute or changes the value of an existing attribute on the specified element. Syntax element.setAttribute(name, value);   name is the name of the attribute as a string. value is the desired new value of the attribute.  Example  var d = document.getElementById(\"d1\");  d.setAttribute(\"align\", \"center\");  Notes When called on an HTML element in an HTML document, setAttribute lower-cases its attribute name argument. If the specified attribute already exists, then the value of that attribute is changed to the value passed to this function. If it does not exist, then the attribute is created. Even though getAttribute() returns null for missing attributes, you should use removeAttribute() instead of elt.setAttribute(attr, null) to remove the attribute. Using setAttribute() to modify certain attributes, most notably value in XUL, works inconsistently, as the attribute specifies the default value. To access or modify the current values, you should use the properties. For example, use elt.value instead of elt.setAttribute('value', val). DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -       Specification DOM Level 2 Core: setAttribute (introduced in DOM Level 1 Core) HTML5: APIs in HTML documents"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.setAttributeNS","title":"element.setAttributeNS","description":"Summary  setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.   Syntax  element.setAttributeNS(namespace, name, value)   namespace is a string specifying the namespace of the attribute.  name is a string identifying the attribute to be set.  value is the desired string value of the new attribute.   Example  var d = document.getElementById(\"d1\");  d.setAttributeNS(\"http:\/\/www.mozilla.org\/ns\/specialspace\", \"align\", \"center\");   Notes  DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -         Specification  DOM Level 2 Core: setAttributeNS"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.setAttributeNode","title":"element.setAttributeNode","description":"setAttributeNode() adds a new Attr node to the specified element. Syntax var replacedAttr = element.setAttributeNode(attribute);   attribute is the Attr node to set on the element. replacedAttr is the replaced attribute node, if any, returned by this function.  Example  \/\/ <div id=\"one\" align=\"left\">one<\/div>  \/\/ <div id=\"two\">two<\/div>  var d1 = document.getElementById(\"one\");  var d2 = document.getElementById(\"two\");  var a = d1.getAttributeNode(\"align\");  d2.setAttributeNode(a.cloneNode(true));  alert(d2.attributes[1].value)  \/\/ returns: `left'  Notes If the attribute named already exists on the element, that attribute is replaced with the new one and the replaced one is returned. This method is seldom used, with setAttribute() usually being used to change element's attributes. DOM methods dealing with element's attributes:    Not namespace-aware, most commonly used methods Namespace-aware variants (DOM Level 2) DOM Level 1 methods for dealing with Attr nodes directly (seldom used) DOM Level 2 namespace-aware methods for dealing with Attr nodes directly (seldom used)   setAttribute (DOM 1) setAttributeNS setAttributeNode setAttributeNodeNS   getAttribute (DOM 1) getAttributeNS getAttributeNode getAttributeNodeNS   hasAttribute (DOM 2) hasAttributeNS - -   removeAttribute (DOM 1) removeAttributeNS removeAttributeNode -       Specification DOM Level 2 Core: setAttributeNode (introduced in DOM Level 1 Core)"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.setAttributeNodeNS","title":"element.setAttributeNodeNS","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.setCapture","title":"element.setCapture","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.setUserData","title":"Node.setUserData","description":"Allows a user to attach (or remove) data to an element, without needing to modify the DOM. Note that such data will not be preserved when imported via importNode, as with cloneNode() and renameNode() operations (though adoptNode does preserve the information), and equality tests in isEqualNode() do not consider user data in making the assessment. This method offers the convenience of associating data with specific nodes without needing to alter the structure of a document and in a standard fashion, but it also means that extra steps may need to be taken if one wishes to serialize the information or include the information upon clone, import, or rename operations.Syntax prevUserData = someNode.setUserData(userKey, userData, handler);   someNode is a node, such as an element. userKey is used as the key by which one may subsequently obtain the stored data. More than one key can be set for a given node.  handler is a callback which will be called any time the node is being cloned, imported, renamed, as well as if deleted or adopted; a function can be used or an object implementing the handle method (part of the UserDataHandler interface). The handler will be passed five arguments: an operation type integer (e.g., 1 to indicate a clone operation), the user key, the data on the node, the source node (null if being deleted), the destination node (the newly created node or null if none). See UserDataHandler. If no handler is desired, one must specify null.   userData is the object to associate to userKey on someNode. If null, any previously registered object and UserDataHandler associated to userKey on this node will be removed.   prevUserData is the user data previously stored on the node, and null if none.  Example \r           var d = document.implementation.createDocument('', 'test', null);  d.documentElement.setUserData('key', 15, {handle:function (o, k, d, s, ds) {alert(o+'::'+k+'::'+d+'::'+s+'::'+ds)}}); \/\/ 2::key::15::[object Element]::[object Element] alert(d.documentElement.getUserData('key')); \/\/ 15 var e = document.importNode(d.documentElement, true); \/\/ causes handler to be called alert(e.getUserData('key')); \/\/ null since user data is not copied\r          Specification  DOM Level 3 Core: setUserData  See also  Node.getUserData UserDataHandler DOMUserData"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Element.insertAdjacentHTML","title":"element.insertAdjacentHTML","description":"insertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation. Syntax element.insertAdjacentHTML(position, text);  position is the position relative to the element, and must be one of the following strings:  beforebegin Before the element itself. afterbegin Just inside the element, before its first child. beforeend Just inside the element, after its last child. afterend After the element itself.  text is the string to be parsed as HTML or XML and inserted into the tree. Visualization of position names   <!-- beforebegin --><p><!-- afterbegin -->foo<!-- beforeend --><\/p><!-- afterend -->    Note: The beforebegin and afterend positions work only if the node is in a tree and has an element parent.Visualization of position names   <!-- beforebegin --><p><!-- afterbegin -->foo<!-- beforeend --><\/p><!-- afterend -->    Note: The beforebegin and afterend positions work only if the node is in a tree and has an element parent.Example \r           \/\/ <div id=\"one\">one<\/div>  var d1 = document.getElementById('one');  d1.insertAdjacentHTML('afterend', '<div id=\"two\">two<\/div>');  \/\/ At this point, the new structure is: \/\/ <div id=\"one\">one<\/div><div id=\"two\">two<\/div>\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 1.0 8.0 (8.0)  4.0 7.0 4.0 (527)         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? 8.0 (8.0)  ? ? ?     Specification   HTML Standard: insertAdjacentHTML()  See also hacks.mozilla.org guest post by Henri Sivonen including benchmark showing that insertAdjacentHTML can be way faster in some cases."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onafterscriptexecute","title":"element.onafterscriptexecute","description":"Syntax  document.onafterscriptexecute = funcRef;  funcRef is a function reference, called when the event is fired. The event's target attribute is set to the script Element  that just finished executing. Example \r           function finished(e) {   logMessage(\"Finished script with ID: \" + e.target.id); }  document.addEventListener(\"afterscriptexecute\", finished, true);\r           View the live example See Also  element.onbeforescriptexecute  document.currentScript   Specification  Not part of any specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_handlers","title":"DOM event handlers","description":"Notable objects that generate events This is a list of some of the more interesting objects that generate events. It's not a definitive list.  window  document  element    Requires Gecko 9.0 (Firefox 9.0 \/ Thunderbird 9.0 \/ SeaMonkey 2.6)  Event handler changes in Firefox 9  In order to better match the specifications, and improve cross-browser compatibility, the way event handlers were implemented at a fundamental level changed in Gecko 9.0 (Firefox 9.0 \/ Thunderbird 9.0 \/ SeaMonkey 2.6) . Specifically, in the past, event handlers were not correctly implemented as standard IDL attributes. In Gecko 9.0, this was changed. Because of this, certain behaviors of event handlers in Gecko have changed. In particular, they now behave in all the ways standard IDL attributes behave. In most cases, this shouldn't affect web or add-on content at all; however, there are a few specific things to watch out for. Detecting the presence of event handler properties You can now detect the presence of an event handler property (that is, for example, onload), using the JavaScript in operator. For example: \r           if (\"onsomenewfeature\" in window) {   \/* do something amazing *\/ }\r          Event handlers and prototypes You can't set or access the values of any IDL-defined attributes on DOM prototype objects; that means you can't, for example, change Window.prototype.onload anymore. In the past, event handlers (onload, etc) weren't really implemented as IDL attributes in Gecko, so you were able to do this for those. Now you can't. This improves compatibility.Detecting the presence of event handler properties You can now detect the presence of an event handler property (that is, for example, onload), using the JavaScript in operator. For example: \r           if (\"onsomenewfeature\" in window) {   \/* do something amazing *\/ }\r          Event handlers and prototypes You can't set or access the values of any IDL-defined attributes on DOM prototype objects; that means you can't, for example, change Window.prototype.onload anymore. In the past, event handlers (onload, etc) weren't really implemented as IDL attributes in Gecko, so you were able to do this for those. Now you can't. This improves compatibility.See also  DOM event reference"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onbeforescriptexecute","title":"element.onbeforescriptexecute","description":"Syntax  document.onbeforescriptexecute = funcRef;  funcRef is a function reference, called when the event is fired. The event's target attribute is set to the script Element  that is about to be executed. Example \r           function starting(e) {   logMessage(\"Starting script with ID: \" + e.target.id); }  document.addEventListener(\"beforescriptexecute\", starting, true);\r           View the live example See Also  element.onafterscriptexecute  document.currentScript   Specification  Not part of any specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.oncopy","title":"element.oncopy","description":"The oncopy property returns the onCopy event handler code on the current element.  Syntax element.oncopy = functionRef;  where functionRef is a function - often a name of a function declared elsewhere or a function expression. See Core JavaScript 1.5 Reference:Functions for details.  Example  <html> <head> <title>oncopy event example<\/title>  <script>   function log(txt)   {     document.getElementById(\"log\").appendChild(document.createTextNode(txt + \"\\n\"));   } <\/script> <\/head>  <body> <div oncopy=\"log('Copy blocked!'); return false;\">Try copying this text!<\/div>  <h3>Log<\/h3> <textarea rows=\"15\" cols=\"80\" id=\"log\" readonly=\"true\"><\/textarea> <\/body> <\/html>  This example prevents the text from being copied out of the browser window.   Notes  This event is sent when the user attempts to copy text.  Specification Not part of specification.  See also  oncut  onpaste"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.oncut","title":"element.oncut","description":"The oncut property returns the onCut event handler code on the current element.  Syntax element.oncut = functionRef;  where functionRef is a function - often a name of a function declared elsewhere or a function expression. See Core JavaScript 1.5 Reference:Functions for details.  Example  <html> <head> <title>oncut event example<\/title>  <script>   function log(txt)   {     document.getElementById(\"log\").appendChild(document.createTextNode(txt + \"\\n\"));   } <\/script> <\/head>  <body> <h3>Play with this editor!<\/h3> <textarea rows=\"3\" cols=\"80\" oncopy=\"log('Copied!');\" oncut=\"log('Cut blocked!'); return false;\">   Try copying and cutting the text in this area! <\/textarea> <h3>Log<\/h3> <textarea rows=\"15\" cols=\"80\" id=\"log\" readonly=\"true\"><\/textarea> <\/body> <\/html>  This example allows text to be copied from the textarea, but doesn't allow text to be cut. It also logs each copy and cut attempt.   Notes  This event is sent when the user attempts to cut text.  Specification Not part of specification.  See also  oncopy  onpaste"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onpaste","title":"element.onpaste","description":"The onpaste property returns the onPaste event handler code on the current element.  Syntax element.onpaste = functionRef;  where functionRef is a function - often a name of a function declared elsewhere or a function expression. See Core JavaScript 1.5 Reference:Functions for details.  Example  <html> <head> <title>onpaste event example<\/title> <\/head>  <body> <h3>Play with this editor!<\/h3> <textarea id=\"editor\" rows=\"3\" cols=\"80\"> Try pasting text into this area! <\/textarea>  <script type=\"text\/javascript\">   function log(txt)   {     document.getElementById(\"log\").appendChild(document.createTextNode(txt + \"\\n\"));   }      function pasteIntercept(evt)   {   \tlog(\"Pasting!\");   }      document.getElementById(\"editor\").addEventListener(\"paste\", pasteIntercept, false); <\/script>  <h3>Log<\/h3> <textarea rows=\"15\" cols=\"80\" id=\"log\" readonly=\"true\"><\/textarea> <\/body> <\/html>  This example logs pastes into a textarea.   Notes  This event is sent when the user attempts to paste text.  Specification Not part of specification.  Notes There is currently no DOM-only way to obtain the text being pasted; you'll have to use an nsIClipboard  to get that information.  See also  oncopy  oncut"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onblur","title":"element.onblur","description":"The onblur property returns the onBlur event handler code, if any, that exists on the current element.  Syntax  element.onblur = function;   function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration, such as  element.onblur = function() { alert(\"onblur event detected!\"); };  Example   <html>  <head> <title>onblur event example<\/title>  <script type=\"text\/javascript\">  var elem = null;  function initElement()  {  elem = document.getElementById(\"foo\");  \/\/ NOTE: doEvent(); or doEvent(param); will NOT work here.  \/\/ Must be a reference to a function name, not a function call.  elem.onblur = doEvent;  };  function doEvent()  {  elem.value = 'Bye-Bye';  alert(\"onblur Event detected!\")  } <\/script>  <style type=\"text\/css\"> <!-- #foo { border: solid blue 2px; } --> <\/style> <\/head>  <body onload=\"initElement()\";> <form> <input type=\"text\" id=\"foo\" value=\"Hello!\" \/> <\/form>  <p>Click on the above element to give it focus, then click outside the element.<br \/> Reload the page from the NavBar.<\/p>  <\/body> <\/html>  Notes  The blur event is raised when an element loses focus. In contrast to MSIE--in which almost all kinds of elements receive the blur event--almost all kinds of elements on Gecko browsers do NOT work with this event.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onchange","title":"element.onchange","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onclick","title":"element.onclick","description":"The onclick property returns the onClick event handler code on the current element. Syntax element.onclick = functionRef;  where functionRef is a function - often a name of a function declared elsewhere or a function expression. See Core JavaScript 1.5 Reference:Functions for details. The event object passed to the specified event handler function is a MouseEvent . Example \r           <!doctype html> <html> <head> <title>onclick event example<\/title> <script type=\"text\/javascript\"> function initElement()  {  var p = document.getElementById(\"foo\");  \/\/ NOTE: showAlert(); or showAlert(param); will NOT work here.  \/\/ Must be a reference to a function name, not a function call.  p.onclick = showAlert;  };  function showAlert()  {  alert(\"onclick Event detected!\")  } <\/script> <style type=\"text\/css\"> #foo { border: solid blue 2px; } <\/style> <\/head> <body onload=\"initElement()\";> <span id=\"foo\">My Event Element<\/span> <p>click on the above element.<\/p> <\/body> <\/html>\r          Or you can use an anonymous function, like this: p.onclick = function() { alert(\"moot!\"); };   Notes The click event is raised when the user clicks on an element. The click event will occur after the mousedown and mouseup events. Only one onclick handler can be assigned to an object at a time with this property. You may be inclined to use the  addEventListener method instead, since it is more flexible and part of the DOM Events specification. Specification Defined in HTML5."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.ondblclick","title":"element.ondblclick","description":"The ondblclick property returns the onDblClick event handler code on the current element. Syntax  element.ondblclick = function;   function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration, such as   element.ondblclick = function() { alert(\"ondblclick event detected!\"); };  Example \r           <html>  <head> <title>ondblclick event example<\/title>  <script type=\"text\/javascript\">  function initElement()  {  var p = document.getElementById(\"foo\");  \/\/ NOTE: showAlert(); or showAlert(param); will NOT work here.  \/\/ Must be a reference to a function name, not a function call.  p.ondblclick = showAlert;  };  function showAlert()  {  alert(\"ondblclick Event detected!\")  } <\/script>  <style type=\"text\/css\"> <!-- #foo { border: solid blue 2px; } --> <\/style> <\/head>  <body onload=\"initElement()\";> <span id=\"foo\">My Event Element<\/span> <p>double-click on the above element.<\/p> <\/body> <\/html>\r          Notes The dblclick event is raised when the user double clicks an element. Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onfocus","title":"element.onfocus","description":"The onfocus property returns the onFocus event handler code on the current element. Syntax  element.onfocus = event handling code  Notes The focus event is raised when the user sets focus on the given element. Opposite to MSIE, which almost all kinds of elements receive focus event, almost all kinds of elements on Gecko browsers do NOT work with this event. Specification Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onkeydown","title":"element.onkeydown","description":"The onkeydown property returns the onKeyDown event handler code on the current element. Syntax  element.onkeydown = event handling code  Notes The keydown event is raised when the user presses a keyboard key. Specification Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onkeypress","title":"element.onkeypress","description":"The onkeypress property sets and returns the onKeyPress event handler code for the current element. Syntax  element.onkeypress = event handling code  Notes The keypress event is raised when the user presses a key on the keyboard. Specification Not part of specification.  Example The following example shows the use of the onkeypress event during a digitation into a form field: \r           <!doctype html> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/> <title>Example<\/title> <script type=\"text\/javascript\"> function numbersOnly(oToCheckField, oKeyEvent) { \tvar nChar = (oKeyEvent || \/* IE *\/ window.event || { charCode: 0 }).charCode; \treturn nChar === 0 || \/\\d\/.test(String.fromCharCode(nChar)); } <\/script> <\/head>  <body> <form name=\"myForm\"> <p>Enter numbers only: <input type=\"text\" name=\"myInput\" onkeypress=\"return(numbersOnly(this, event));\" onpaste=\"return(false);\" \/><\/p> <\/form> <\/body> <\/html>"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onkeyup","title":"element.onkeyup","description":"The onkeyup property returns the onKeyUp event handler code for the current element. Syntax  element.onkeyup = event handling code  Example   <input type=\"text\" onKeyUp=\"keyWasPressed(event)\">  <script>function keyWasPressed(evt){ alert(evt.keyCode) }<\/script>  Notes The keyup event is raised when the user releases a key that's been pressed. Specification Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onmousedown","title":"element.onmousedown","description":"The onmousedown property returns the onMouseDown event handler code on the current element. Syntax  element.onMouseDown = event handling code  Notes The mousedown event is raised when the user presses the mouse button. Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onmousemove","title":"element.onmousemove","description":"The onmousemove property returns the mousemove event handler code on the current element. Syntax  element.onMouseMove = event handling code  Notes The mousemove event is raised when the user moves the mouse. Examples The following example shows the use of the onmousemove event with a javaScript tooltip. \r           <!doctype html> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/> <title>Tooltip Example<\/title> <script type=\"text\/javascript\"> var oTooltip = new (function() {   var nOverX, nOverY, nLeftPos, nTopPos, oNode, bOff = true;   this.follow = function (oMsEvnt1) {     if (bOff) { return; }     var nMoveX =  oMsEvnt1.clientX, nMoveY =  oMsEvnt1.clientY;     nLeftPos += nMoveX - nOverX; nTopPos += nMoveY - nOverY;     oNode.style.left = nLeftPos + \"px\";     oNode.style.top = nTopPos + \"px\";     nOverX = nMoveX; nOverY = nMoveY;   };   this.remove = function () {     if (bOff) { return; }     bOff = true; document.body.removeChild(oNode);   };   this.append = function (oMsEvnt2, sTxtContent) {     oNode.innerHTML = sTxtContent;     if (bOff) { document.body.appendChild(oNode); bOff = false; }     var nScrollX = document.documentElement.scrollLeft || document.body.scrollLeft, nScrollY = document.documentElement.scrollTop || document.body.scrollTop, nWidth = oNode.offsetWidth, nHeight = oNode.offsetHeight;     nOverX = oMsEvnt2.clientX; nOverY = oMsEvnt2.clientY;     nLeftPos = document.body.offsetWidth - nOverX - nScrollX > nWidth ? nOverX + nScrollX + 10 : document.body.offsetWidth - nWidth + 16;     nTopPos = nOverY - nHeight > 6 ? nOverY + nScrollY - nHeight - 7 : nOverY + nScrollY + 20;     oNode.style.left = nLeftPos + \"px\";     oNode.style.top = nTopPos + \"px\";   };   this.init = function() {     oNode = document.createElement(\"div\");     oNode.className = \"tooltip\";     oNode.style.position = \"absolute\";   }; })(); <\/script> <style type=\"text\/css\"> div.tooltip {   padding: 6px;   background: #ffffff;   border: 1px #76808C solid;   border-radius: 5px;   -moz-border-radius: 5px;   -webkit-border-radius: 5px;   z-index: 9999; } <\/style> <\/head>  <body onload=\"oTooltip.init();\"> <p><a href=\"http:\/\/developer.mozilla.org\/\" onmouseover=\"oTooltip.append(event,'Example text 1');\" onmousemove=\"oTooltip.follow(event);\" onmouseout=\"oTooltip.remove();\">Move your mouse here&hellip;<\/a><\/p> <p><a href=\"http:\/\/developer.mozilla.org\/\" onmouseover=\"oTooltip.append(event,'Example text 2');\" onmousemove=\"oTooltip.follow(event);\" onmouseout=\"oTooltip.remove();\">&hellip;or here!!<\/a><\/p> <\/body> <\/html>\r          The following example shows the use of the onmousemove event with draggable objects. \r           <!doctype html> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\" \/> <title>Draggable objects<\/title> <script type=\"text\/javascript\">  var bMouseUp = true, oDragging, nMouseX, nMouseY, nStartX, nStartY, nZFocus = 100 \/* the highest z-Index present in your page plus 1 *\/;  function dragDown(oPssEvt1) {   var bExit = true, oMsEvent1 = oPssEvt1 || \/* IE *\/ window.event;   for (var iNode = oMsEvent1.target; iNode; iNode = iNode.parentNode) {     if (iNode.className === \"draggable\") { bExit = false; oDragging = iNode; break; }   }   if (bExit) { return; }   bMouseUp = false;   nStartX = nStartY = 0;   for (var iOffPar = oDragging; iOffPar; iOffPar = iOffPar.offsetParent) {     nStartX += iOffPar.offsetLeft;     nStartY += iOffPar.offsetTop;   }   nMouseX = oMsEvent1.clientX;   nMouseY = oMsEvent1.clientY;   oDragging.style.zIndex = nZFocus++;   return false; }  function dragMove(oPssEvt2) {   if (bMouseUp) { return; }   var oMsEvent2 = oPssEvt2 || \/* IE *\/ window.event;   oDragging.style.left = String(nStartX + oMsEvent2.clientX - nMouseX) + \"px\";   oDragging.style.top = String(nStartY + oMsEvent2.clientY - nMouseY) + \"px\"; }  function dragUp() { bMouseUp = true; }  document.onmousedown = dragDown; document.onmousemove = dragMove; document.onmouseup = dragUp;  <\/script> <style type=\"text\/css\"> .draggable {   position: fixed;   left: 0;   top: 0;   width: auto;   height: auto;   cursor: move; }  #myDiv {   width: 300px;   height: 200px;   left: 200px;   top: 200px;   background-color: #00ff00; } <\/style> <\/head>  <body>  <div class=\"draggable\" id=\"myDiv\"><p>Hello world!<\/p><\/div> <div class=\"draggable\" style=\"background-color:#aaaaaa;\">Another hello world!<\/div>  <\/body> <\/html>\r          Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onmouseout","title":"element.onmouseout","description":"The onmouseout property returns the onMouseOut event handler code on the current element. Syntax  element.onMouseOut = event handling code  Notes The mouseout event is raised when the mouse leaves an element (e.g, when the mouse moves off of an image in the web page, the mouseout event is raised for that image element). Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onmouseover","title":"element.onmouseover","description":"The onmouseover property returns the onMouseOver event handler code on the current element. Syntax  element.onmouseover = event handling code  Notes The mouseover event is raised when the user moves the mouse over a particular element. Specification Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onmouseup","title":"element.onmouseup","description":"The onmouseup property returns the onMouseUp event handler code on the current element. Syntax  element.onMouseUp = event handling code  Notes The mouseup event is raised when the user releases the mouse button. Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onresize","title":"element.onresize","description":"onresize returns the element's onresize event handler code. It can also be used to set the code to be executed when the resize event occurs. Only the window object has an onresize event.  Syntax  \/\/ Set onresize to an anonymous function window.onresize = function(){alert('Window resized')}  \/\/ Set onresize to a function reference function sayHi(){alert('Hi')}  window.onresize = sayHi;  \/\/ Show the value of window.onresize alert(window.onresize);  When used with frames, an onresize event will occur whenever the frame is resized either directly or as a result of the window being resized.  Example   <!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01\/\/EN\"  \"http:\/\/www.w3.org\/TR\/html4\/strict.dtd\"> <html> <head> <title>onresize example<\/title> <script type=\"text\/javascript\">  function sayHi(){   alert('Hi'); }  window.onresize = sayHi;  <\/script> <\/head> <body> <input type=\"button\"  value=\"Click to show window.onresize\"  onclick=\"alert(window.onresize);\" > <\/body> <\/html> Notes  Any element can be given an onresize attribute, however only the window object has a resize event. Resizing other elements (say by modifying the width or height of an img element using script) will not raise a resize event.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.onscroll","title":"element.onscroll","description":"The onscroll property returns the onScroll event handler code on the current element. Syntax  element.onScroll = event handling code  Notes The scroll event is raised when the user scrolls the contents of a element. Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event\/StorageEvent","title":"StorageEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.bubbles","title":"event.bubbles","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.currentTarget","title":"event.currentTarget","description":"Identifies the current target for the event, as the event traverses the DOM. It always refer to the element the event handler has been attached to as opposed to event.target which identifies the element on which the event occured. Example event.currentTarget is interesting to use when attaching the same event handler to several elements. \r           function hide(e){   e.currentTarget.style.visibility = \"hidden\";   \/\/ When this function is used as an event handler: this === e.currentTarget }  var ps = document.getElementsByTagName('p');  for(var i = 0; i < ps.length; i++){   ps[i].addEventListener('click', hide, false); }  \/\/ click around and make paragraphs disappear\r         Specification DOM Level 2 Events: Event.currentTarget  Browser compatibility On IE6-8, the event model is different. Event listeners are attached with the non-standard element.attachEvent method. In this model, there is no equivalent to event.currentTarget and this is the global object. One solution to emulate the event.currentTarget feature is to wrap your handler in a function calling the handler using Function.prototype.call with the element as a first argument. This way, this will be the expected value. See also Comparison of Event Targets"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.cancelBubble","title":"event.cancelBubble","description":"Deprecated  Indicates if event bubbling for this event has been canceled or not. Syntax  event.cancelBubble = bool; var bool = event.cancelBubble;  bool is the boolean value of true or false. Notes cancelBubble is set to false by default. This allows the event to bubble up the DOM, if it is a bubbleable event. Setting this property to true stops the event from bubbling up the DOM. Not all events are allowed to bubble up the DOM. Use event.stopPropagation() instead of this non-standard method."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.cancelable","title":"event.cancelable","description":"Indicates whether the event is cancelable or not. Syntax event.cancelable  The result is a Boolean, which is true if the event can be canceled. Example var bool = event.cancelable;  bool contains true or false, depending on whether the event can have its default action prevented. Notes Whether an event can be canceled or not is something that's determined when that event is initialized. To cancel an event, call the preventDefault() method on the event. This keeps the implementation from executing the default action that is associated with the event. Specification DOM Level 2 Events: cancelable"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.defaultPrevented","title":"event.defaultPrevented","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.preventDefault","title":"event.preventDefault","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.detail","title":"event.detail","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.explicitOriginalTarget","title":"event.explicitOriginalTarget","description":"Summary  The explicit original target of the event. (Mozilla-specific) If the event was retargeted for some reason other than an anonymous boundary crossing, this will be set to the target before the retargeting occurs. For example, mouse events are retargeted to their parent node when they happen over text nodes (see   bug 185889 ), and in that case currentTarget will show the parent and explicitOriginalTarget will show the text node. explicitOriginalTarget differs from originalTarget in that it will never contain anonymous content. See also Comparison of Event Targets   Example  This property can be used with <command> to get the event details of the original object calling the command.   function myCommand(ev) {   alert(ev.explicitOriginalTarget.nodeName); \/\/ returns 'menuitem' }   <command id=\"my-cmd-anAction\" oncommand=\"myCommand(event);\"\/>  <menulist><menupopup>     <menuitem label=\"Get my element name!\" command=\"my-cmd-anAction\"\/> <\/menupopup><\/menulist>    Specification  This is a Mozilla-specific property. Defined in   \/dom\/public\/idl\/events\/nsIDOMNSEvent.idl This event property is not defined in the W3.org DOM Level 2 Events"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.eventPhase","title":"event.eventPhase","description":"Indicates which phase of the event flow is currently being evaluated. Syntax var phase = event.eventPhase;  Returns an integer value represented by 3 constants:  Event.CAPTURING_PHASE (value '1' in Gecko) Event.AT_TARGET (value '2' in Gecko) Event.BUBBLING_PHASE (value '3' in Gecko)   Specification eventPhase"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.mozInputSource","title":"event.mozInputSource","description":"The mozInputSource property on user interface events provides information indicating the type of device that generated the event. This lets you, for example, determine whether a mouse event was generated by an actual mouse or by a touch event (which might affect the degree of accuracy with which you interpret the coordinates associated with the event). Syntax var source = event.mozInputSource;  Values The following values are possible.    Constant name Value Desription   MOZ_SOURCE_UNKNOWN 0 The input device is unknown.   MOZ_SOURCE_MOUSE 1 The event was generated by a mouse (or mouse-like device).   MOZ_SOURCE_PEN 2 The event was generated by a pen on a tablet.   MOZ_SOURCE_ERASER 3 The event was generated by an eraser on a tablet.   MOZ_SOURCE_CURSOR 4 The event was generated by a cursor.   MOZ_SOURCE_TOUCH 5 The event was generated on a touch interface.   MOZ_SOURCE_KEYBOARD 6 The event was generated by a keyboard.    Specification Not part of any specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.target","title":"event.target","description":"This property of event objects is the object the event was dispatched on. It is different than event.currentTarget when the event handler is called in bubbling or capturing phase of the event.Syntax event.target Example The event.target property can be used in order to implement event delegation. \r           \/\/ Assuming there is a 'list' variable containing an instance of an HTML ul element. function hide(e){   \/\/ Unless list items are separated by a margin, e.target should be different than e.currentTarget   e.target.style.visibility = 'hidden'; }  list.addEventListener('click', hide, false);  \/\/ If some element (<li> element or a link within an <li> element for instance) is clicked, it will disappear. \/\/ It only requires a single listener to do that\r          Browser compatibility On IE6-8, the event model is different. Event listeners are attached with the non-standard element.attachEvent method. In this model, the event object is not passed as an argument to the event handler function but is the window.event object. This object has an srcElement property which has the same semantics than event.target. Specification DOM Level 2 Events: Event.target  See also Comparison of Event Targets"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.originalTarget","title":"event.originalTarget","description":"Non-standard The original target of the event before any retargetings. (Mozilla-specific) In presence of XBL anonymous content this will be the anonymous node the event originally fired on. See Anonymous Content#Event_Flow_and_Targeting for more details. Note: originalTarget may also be native anonymous content (see   bug 208427 ), in which case it's useless for non-privileged code. See also Comparison of Event Targets Example Need an example that makes sense here Specification This is a Mozilla-specific property. Defined in   \/dom\/public\/idl\/events\/nsIDOMNSEvent.idl This event property is not defined in the W3.org DOM Level 2 Events"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.type","title":"event.type","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.timeStamp","title":"event.timeStamp","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.initEvent","title":"event.initEvent","description":"The initEvent method is used to initialize the value of an event  created using document.createEvent . Syntax event.initEvent(type, bubbles, cancelable);    type The type of event. bubbles A boolean indicating whether the event should bubble up through the event chain or not (see bubbles ). cancelable; A boolean indicating whether the event can be canceled (see cancelable ).  Example  \/\/ create a click event that bubbles up and  \/\/ cannot be canceled  event.initEvent(\"click\", true, false);  The page on dispatchEvent  has a more useful example. Notes Events initialized in this way must have been created with the document.createEvent  method. initEvent must be called to set the event before it is dispatchEvent . Specification DOM Level 2 Events: Event.initEvent"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.stopPropagation","title":"event.stopPropagation","description":"Prevents further propagation of the current event. Syntax event.stopPropagation();   Example See Example 5: Event Propagation in the Examples chapter for a more detailed example of this method and event propagation in the DOM. Notes See the DOM specification for the explanation of event flow. (The DOM Level 3 Events draft has an illustration.) preventDefault is a complementary method that can be used to prevent the default action of the event from happening. Specification DOM Level 3 Events: stopPropagation"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.stopImmediatePropagation","title":"event.stopImmediatePropagation","description":"Prevents other listeners of the same event to be called. Syntax event.stopImmediatePropagation();   Notes If several listeners are attached to the same element for the same event type, they are called in order in which they have been added. If during one such call, event.stopImmediatePropagation() is called, all no other listener will be called. Specification DOM Level 3 Events: stopImmediatePropagation"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.cookie","title":"document.cookie","description":"Get and set the cookies associated with the current document. Syntax allCookies = document.cookie;   allCookies is a string containing a semicolon-separated list of cookies (i.e. key=value pairs)  document.cookie = updatedCookie;   updatedCookie is a string of form key=value. Note that you can only set\/update a single cookie at a time using this method.   Any of the following cookie attribute values can optionally follow the key-value pair, specifying the cookie to set\/update, and preceded by a semi-colon separator:  ;path=path (e.g., '\/', '\/mydir') If not specified, defaults to the current path of the current document location. ;domain=domain (e.g., 'example.com', '.example.com' (includes all subdomains), 'subdomain.example.com') If not specified, defaults to the host portion of the current document location. ;max-age=max-age-in-seconds (e.g., 60*60*24*365 for a year) ;expires=date-in-GMTString-format If not specified it will expire at the end of session.  See Date.toUTCString() for help formatting this value.   ;secure (cookie to only be transmitted over secure protocol as https)     The cookie value string can use encodeURIComponent() to ensure that the string does not contain any commas, semicolons, or whitespace (which are disallowed in cookie values).    Gecko 6.0 note(Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3)   Note that prior to Gecko 6.0 (Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3) , paths with quotes were treated as if the quotes were part of the string, instead of as if they were delimiters surrounding the actual path string. This has been fixed.  Example Simple usage: \r           document.cookie = \"name=oeschger\"; document.cookie = \"favorite_food=tripe\"; alert(document.cookie); \/\/ displays: name=oeschger;favorite_food=tripe\r          A complete cookies reader\/writer: \r           docCookies = {   getItem: function (sKey) {     if (!sKey || !this.hasItem(sKey)) { return null; }     return unescape(document.cookie.replace(new RegExp(\"(?:^|.*;\\\\s*)\" + escape(sKey).replace(\/[\\-\\.\\+\\*]\/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*((?:[^;](?!;))*[^;]?).*\"), \"$1\"));   },   \/**   * docCookies.setItem(sKey, sValue, vEnd, sPath, sDomain, bSecure)   *   * @argument sKey (String): the name of the cookie;   * @argument sValue (String): the value of the cookie;   * @optional argument vEnd (Number, String, Date Object or null): the max-age in seconds (e.g., 31536e3 for a year) or the   *  expires date in GMTString format or in Date Object format; if not specified it will expire at the end of session;    * @optional argument sPath (String or null): e.g., \"\/\", \"\/mydir\"; if not specified, defaults to the current path of the current document location;   * @optional argument sDomain (String or null): e.g., \"example.com\", \".example.com\" (includes all subdomains) or \"subdomain.example.com\"; if not   * specified, defaults to the host portion of the current document location;   * @optional argument bSecure (Boolean or null): cookie will be transmitted only over secure protocol as https;   * @return undefined;   **\/   setItem: function (sKey, sValue, vEnd, sPath, sDomain, bSecure) {     if (!sKey || \/^(?:expires|max\\-age|path|domain|secure)$\/.test(sKey)) { return; }     var sExpires = \"\";     if (vEnd) {       switch (typeof vEnd) {         case \"number\": sExpires = \"; max-age=\" + vEnd; break;         case \"string\": sExpires = \"; expires=\" + vEnd; break;         case \"object\": if (vEnd.hasOwnProperty(\"toGMTString\")) { sExpires = \"; expires=\" + vEnd.toGMTString(); } break;       }     }     document.cookie = escape(sKey) + \"=\" + escape(sValue) + sExpires + (sDomain ? \"; domain=\" + sDomain : \"\") + (sPath ? \"; path=\" + sPath : \"\") + (bSecure ? \"; secure\" : \"\");   },   removeItem: function (sKey) {     if (!sKey || !this.hasItem(sKey)) { return; }     var oExpDate = new Date();     oExpDate.setDate(oExpDate.getDate() - 1);     document.cookie = escape(sKey) + \"=; expires=\" + oExpDate.toGMTString() + \"; path=\/\";   },   hasItem: function (sKey) { return (new RegExp(\"(?:^|;\\\\s*)\" + escape(sKey).replace(\/[\\-\\.\\+\\*]\/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(document.cookie); } };  \/\/ docCookies.setItem(\"test1\", \"Hello world!\"); \/\/ docCookies.setItem(\"test2\", \"Hello world!\", new Date(2020, 5, 12)); \/\/ docCookies.setItem(\"test3\", \"Hello world!\", new Date(2027, 2, 3), \"\/blog\"); \/\/ docCookies.setItem(\"test4\", \"Hello world!\", \"Sun, 06 Nov 2022 21:43:15 GMT\"); \/\/ docCookies.setItem(\"test5\", \"Hello world!\", \"Tue, 06 Dec 2022 13:11:07 GMT\", \"\/home\"); \/\/ docCookies.setItem(\"test6\", \"Hello world!\", 150); \/\/ docCookies.setItem(\"test7\", \"Hello world!\", 245, \"\/content\"); \/\/ docCookies.setItem(\"test8\", \"Hello world!\", null, null, \"example.com\"); \/\/ docCookies.setItem(\"test9\", \"Hello world!\", null, null, null, true);  \/\/ alert(docCookies.getItem(\"test1\"));\r          Security It is important to note that the path restriction does not protect against unauthorized reading of the cookie from a different path. It can easily be bypassed with simple DOM (for example by creating a hidden iframe element with the path of the cookie, then accessing this iframe's contentDocument.cookie property). The only way to protect cookie access is by using a different domain or subdomain, due to the same origin policy. Notes  Starting with Firefox 2, a better mechanism for client-side storage is available - WHATWG DOM Storage. You can delete a cookie by simply updating its expiration time to zero. Keep in mind that the more you have cookies the more data will be transferred between the server and the client for each request. This will make each request slower. It is highly recommended for you to use WHATWG DOM Storage if you are going to keep \"client-only\" data.  Specification DOM Level 2: HTMLDocument.cookie"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.alinkColor","title":"document.alinkColor","description":"Summary    Deprecated  Returns or sets the color of an active link in the document body. A link is active during the time between mousedown and mouseup events.   Syntax  color = document.alinkColor document.alinkColor = color  color is a string containing the name of the color (e.g., \"blue\", \"darkblue\", etc.) or the hexadecimal value of the color (e.g., #0000FF)   Notes  The default value for this property in Mozilla Firefox is red (#ee0000 in hexadecimal). document.alinkColor is deprecated in DOM Level 2 HTML. One alternative is the CSS selector :active . Another alternative is document.body.aLink, although this is deprecated in HTML 4.01 in favor of the CSS alternative. Gecko supports both alinkColor\/:active and :focus . Internet Explorer 6 and 7 support alinkColor\/:active only for  HTML anchor (<a>) links and the behavior is the same as :focus under Gecko. There is no support for :focus in IE.   Specification  DOM Level 0. Not part of any standard.     MSDN: alinkColor property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.document","title":"window.document","description":"Returns a reference to the document contained in the window. Note:  New in Firefox 3  Firefox 3 alters the security for windows' documents so that only the domain from which it was located can access the document. While this may break some existing sites, it's a move made by both Firefox 3 and Internet Explorer 7, and results in improved security. Syntax doc = window.document   Parameters  doc is an object reference to a document.  Example  <!DOCTYPE html> <html> <head>    <title>Hello, World!<\/title> <\/head> <body>  <script type=\"text\/javascript\">    var doc = window.document;    alert( doc.title);    \/\/ alerts: Hello, World! <\/script>  <\/body> <\/html> Specification  HTML"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.activeElement","title":"document.activeElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.anchors","title":"document.anchors","description":"anchors returns a list of all of the anchors in the document. Syntax nodeList = document.anchors   Example \r           if ( document.anchors.length >= 5 ) {     dump(\"dump found too many anchors\");     window.location = \"http:\/\/www.google.com\"; }\r          The following is an example that auto populates a Table of Contents div with every anchor on the page: \r           <!DOCTYPE HTML> <html> <head>     <script type=\"text\/javascript\" charset=\"utf-8\">     function init() {         var toc = document.getElementById(\"toc\");         var i, li, newAnchor;         for (i = 0; i < document.anchors.length; i++) {             li = document.createElement(\"li\");             newAnchor = document.createElement('a');             newAnchor.href = \"#\" + document.anchors[i].name;             newAnchor.innerHTML = document.anchors[i].text;             li.appendChild(newAnchor);             toc.appendChild(li);         }     }      <\/script> <\/head> <body onload=\"init()\">  <h1>Title<\/h1> <a name=\"contents\"><h2>Contents<\/h2><\/a> <ul id=\"toc\"><\/ul>  <a name=\"plants\"><h2>Plants<\/h2><\/a> <ol>     <li>Apples<\/li>     <li>Oranges<\/li>     <li>Pears<\/li> <\/ol>  <a name=\"veggies\"><h2>Veggies<\/h2><\/a> <ol>     <li>Carrots<\/li>     <li>Celery<\/li>     <li>Beats<\/li> <\/ol>  <\/body> <\/html>\r           View on jsFiddle Notes For reasons of backwards compatibility, the returned set of anchors only contains those anchors created with the name attribute, not those created with the id attribute. Specification DOM Level 2 HTML: anchors"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.applets","title":"document.applets","description":"applets returns an ordered list of the applets within a document.  Syntax  nodeList = document.applets   Example  \/\/ ( When you know the second applet is the one you want )  my_java_app = document.applets[1];  Specification  DOM Level 2 HTML: applets"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.async","title":"document.async","description":"document.async can be set to indicate whether a document.load call should be an asynchronous or synchronous request. true is the default value, indicating that documents should be loaded asynchronously. (Since 1.4alpha it has been possible to load documents synchronously, before that it was only asynchronous.) Code example  function loadXMLData(e) { alert(new XMLSerializer().serializeToString(e.target)); \/\/ Gives querydata.xml contents as string }  var xmlDoc = document.implementation.createDocument(\"\", \"test\", null); xmlDoc.async = false; xmlDoc.onload = loadXMLData; xmlDoc.load('querydata.xml'); See also  XML in Mozilla document.load  Specification  DOM Level 3 Load & Save module"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.load","title":"document.load","description":"Code examples  var xmlDoc = document.implementation.createDocument(\"\", \"test\", null); function documentLoaded (e) {     alert(new XMLSerializer().serializeToString(e.target)); \/\/ Gives querydata.xml contents as string } xmlDoc.addEventListener(\"load\", documentLoaded, false); xmlDoc.load('querydata.xml');   See also the load sample in the XML tests directory. (Loading the load.html file from the LXR generated page will not work because LXR will munge the test.xml file into HTML and serve it as HTML. To test this functionality, create the files on your local disk or on a webserver.) See also  document.async XML in Mozilla  Specification  Old W3C Working Draft of the DOM Level 3 Load & Save module"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.baseURIObject","title":"document.baseURIObject","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.bgColor","title":"document.bgColor","description":"Deprecated  bgColor gets\/sets the background color of the current document.  Syntax  color = document.bgColor document.bgColor = color   Parameters  color is a string representing the color as a word (e.g., \"red\") or hexadecimal value (e.g., \"#ff0000\").  Example  document.bgColor = \"darkblue\";   Notes  The default value for this property in Mozilla Firefox is white (#ffffff in hexadecimal). document.bgColor is deprecated in DOM Level 2 HTML. The recommended alternative is use of the CSS style  background-color which can be accessed through the DOM with document.body.style.backgroundColor. Another alternative is document.body.bgColor, although this is also deprecated in HTML 4.01 in favor of the CSS alternative.  Specification  DOM Level 0. Not part of any standard.     MSDN: bgColor Property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.body","title":"document.body","description":"Returns the <body> or <frameset> node of the current document. Syntax var objRef = document.body;  document.body = objRef;  Example  \/\/ in HTML: <body id=\"oldBodyElement\"><\/body> alert(document.body.id); \/\/ \"oldBodyElement\" var aNewBodyElement = document.createElement(\"body\"); aNewBodyElement.id = \"newBodyElement\"; document.body = aNewBodyElement; alert(document.body.id); \/\/ \"newBodyElement\"  Notes document.body is the element that contains the content for the document. In documents with <body> contents, returns the <body> element, and in frameset documents, this returns the outermost <frameset> element. Though body is settable, setting a new body on a document will effectively remove all the current children of the existing <body> element. Specification DOM Level 2 HTML: HTMLDocument.body"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.characterSet","title":"document.characterSet","description":"Returns the character encoding of the current document. Syntax  document.characterSet  Examples var string = document.characterSet;  <button onclick=\"alert(document.characterSet);\">Show character set<\/button> \/\/ returns document's character set, such as \"ISO-8859-1\" or \"UTF-8\"  Notes The character encoding is the character set used for rendering the document, which may be different from the encoding specified by the page (the user can override the encoding). The related, nonstandard method document.charset and the property document.defaultCharset are not supported by Gecko. For a complete list of character sets, see: http:\/\/www.iana.org\/assignments\/character-sets. Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.compatMode","title":"document.compatMode","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.contentType","title":"document.contentType","description":"Summary  Returns the Content-Type from the HTTP headers of the document.   Syntax  contentType = document.contentType;  contentType is a read-only property.   Notes  The property returns the MIME property \"Content-Type\" set in the HTTP Header and not the META property set in the HEAD section of the document.   Specification  Non-standard, only supported by Gecko. To be used in chrome code (i.e. Extensions and XUL applications)."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.currentScript","title":"document.currentScript","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.defaultView","title":"document.defaultView","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.documentElement","title":"document.documentElement","description":"Summary  Read-only Returns the Element that is the root element of the document (for example, the <html> element for HTML documents).   Syntax  var element = document.documentElement;   Example  var rootElement = document.documentElement; var firstTier = rootElement.childNodes; \/\/ firstTier is the NodeList of the direct children of the root element for (var i = 0; i < firstTier.length; i++) {    \/\/ do something with each direct kid of the root element    \/\/ as firstTier[i] }   Notes  This property is a read-only convenience for getting the root element associated with any document. HTML documents typically contain a single child node, <html>, perhaps with a DOCTYPE declaration before it. XML documents often contain multiple child nodes: the root element, the DOCTYPE declaration, and  processing instructions. That's why you should use document.documentElement rather than document.firstChild  to get the root element.   Specification  DOM Level 2 Core: Document.documentElement"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.doctype","title":"document.doctype","description":"Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType to create a DocumentType. Syntax doctype = document.doctype;  doctype is a read-only property. Notes The property returns null if there is no DTD associated with the current document. DOM level 2 doesn't support editing the document type declaration. Specification DOM Level 2 Core: doctype"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.documentURI","title":"document.documentURI","description":"Returns the document location as string. It is read-only per DOM4 specification. var string = document.documentURI;  Notes HTML documents have a document.URL  property which returns the same value. Unlike URL, documentURI is available on all types of documents. Specification DOM4 (Working Draft)"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.documentURIObject","title":"document.documentURIObject","description":"Summary  Read-only Returns an nsIURI  object representing the URI of the document. This only works for privileged (UniversalXPConnect) scripts, including extension code. For web content this property doesn't have any special meaning and can be used just like any other custom property. Privileged code must be careful not to try getting or setting this property on a non-wrapped content object (e.g. on a wrappedJSObject of an XPCNativeWrapper). See   bug 324464 's comments for details.   Syntax  var uri = doc.documentURIObject;   Example  \/\/ Check that the URI scheme of the current tab in Firefox is 'http', \/\/ assuming this code runs in context of browser.xul var uriObj = content.document.documentURIObject; var uriPort = uriObj.port;  if (uriObj.schemeIs('http')) {   ... }   Specification  Not part of any specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.domain","title":"document.domain","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.embeds","title":"document.embeds","description":"embeds returns a list of the embedded OBJECTS within the current document.  Syntax  nodeList = document.embeds   Specification  DOM Level 0. Not part of any standard.     MSDN: embeds Collection"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.fgColor","title":"document.fgColor","description":"Deprecated  fgColor gets\/sets the foreground color, or text color, of the current document. Syntax    var color = document.fgColor;   document.fgColor = color;  Parameters  color is a string representing the color as a word (e.g., \"red\") or hexadecimal value (e.g., \"#ff0000\").  Example  document.fgColor = \"white\"; document.bgColor = \"darkblue\";  Notes The default value for this property in Mozilla Firefox is black (#000000 in hexadecimal). document.fgColor is deprecated in DOM Level 2 HTML. The recommended alternative is the CSS property color  (e.g., document.body.style.color = \"red\"). Another alternative is document.body.text, although this is deprecated in HTML 4.01 in favor of the CSS alternative above. Specification DOM Level 0. Not part of any standard.     MSDN: fgColor Property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.forms","title":"document.forms","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.height","title":"document.height","description":"Returns the height of the <body>  element of the current document. Syntax height_value = document.height  Example \r           \/\/ alert document height alert(document.height);\r          Alternatives \r           document.body.clientHeight document.documentElement.clientHeight\r          See also  document.width   Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.images","title":"document.images","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.implementation","title":"document.implementation","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.inputEncoding","title":"document.inputEncoding","description":"Summary  Returns a string representing the encoding under which the document was parsed (e.g. ISO-8859-1).   Syntax  encoding = document.inputEncoding;  inputEncoding is a read-only property.   Specification  DOM Level 3 Core"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.lastModified","title":"document.lastModified","description":"Returns a string containing the date and time on which the current document was last modified. Syntax var string = document.lastModified;   Example  dump(document.lastModified);  \/\/ returns: Tuesday, July 10, 2001 10:19:42  Notes Note that as a string, lastModified cannot easily be used for comparisions between the modified dates of documents. Specification DOM Level 0. Not part of any standard.     MSDN: lastModified Property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.lastStyleSheetSet","title":"document.lastStyleSheetSet","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.linkColor","title":"document.linkColor","description":"Deprecated  linkColor gets\/sets the color of links within the document.  Syntax  color = document.linkColor document.linkColor = color  Parameters  color is a string representing the color as a word (e.g., \"red\") or hexadecimal value (e.g., \"#ff0000\").  Notes  The default value for this property in Mozilla Firefox is blue (#0000ee in hexadecimal). document.linkColor is deprecated in DOM Level 2 HTML. Alternatives involve the use of the CSS color  property on either HTML anchor (<a>) links (e.g., a {color:red;}) or :link pseudo-class (e.g., :link {color:red;}). Another alternative is document.body.link, although this is deprecated in HTML 4.01.  Example  document.linkColor = \"blue\";   Specification  DOM Level 0. Not part of any standard.     MSDN: linkColor Property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.links","title":"document.links","description":"The links property returns a collection of all AREA elements and anchor elements in a document with a value for the href attribute.  Syntax  nodeList = document.links   Example  var links = document.links; for(var i = 0; i < links.length; i++) {   var linkHref = document.createTextNode(links[i].href);   var lineBreak = document.createElement(\"br\");   document.body.appendChild(linkHref);   document.body.appendChild(lineBreak); }  Specification  DOM Level 2 HTML: links"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.location","title":"document.location","description":"Returns a Location object, which contains information about the URL of the document and provides methods for changing that URL. In Gecko browsers you can also assign to this property to load another URL. For details, refer to window.location. Syntax \r           \/\/ Get the location object var locationObj = document.location;  \/\/ Set the value of the location object (see template.Anch(\"Notes\") section) document.location = 'http:\/\/www.mozilla.org';\r          Example \r           dump(document.location);  \/\/ Prints a string like \/\/ \"http:\/\/www.example.com\/juicybits.html\" to the console\r          Notes Location objects have a toString method returning the current URL. You can also assign a string to document.location. This means that you can work with document.location as if it were a string in most cases. Sometimes, for example when you need to call a String method on it, you have to explicitly call toString: \r           alert(document.location.toString().charAt(17));\r          document.location was originally a read-only property, although Gecko browsers allow you to assign to it as well. For cross-browser safety, use window.location instead. To retrieve just the URL as a string, the read-only document.URL property can be used. Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.mozSyntheticDocument","title":"document.mozSyntheticDocument","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.mozFullScreen","title":"document.mozFullScreen","description":"Reports whether or not the document is currently displaying content in full-screen mode. Syntax var isFullScreen = document.mozFullScreen || document.webkitIsFullScreen;  On return, isFullScreen is true if the document is being displayed in full-screen mode; otherwise it's false. Example \r           function isDocumentInFullScreenMode() {   \/\/ Note that the browser fullscreen (triggered by short keys) might   \/\/ be considered different from content fullscreen when expecting a boolean   return ((document.fullScreenElement && document.fullScreenElement !== null) ||    \/\/ alternative standard methods       (!document.mozFullScreen && !document.webkitIsFullScreen);                    \/\/ current working methods }\r          Notes See Using full-screen mode for details and examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification Not part of any specification. See also  Using full-screen mode element.mozRequestFullScreen()  document.mozCancelFullScreen()  document.mozFullScreenElement  document.mozFullScreenEnabled  :-moz-full-screen    mozallowfullscreen"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.mozFullScreenElement","title":"document.mozFullScreenElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.mozRequestFullscreen","title":"element.mozRequestFullScreen","description":"Asynchronously requests that the element be made full-screen. Syntax element.mozRequestFullScreen();  Example Example needed. Notes It's not guaranteed that the element will be put into full-screen mode. If permission to enter full-screen mode is granted, the document will receive a \"mozfullscreenchange\" event to let it know that it's now in full screen mode. If permission is denied, the document receives a \"mozfullscreenerror\" event instead. See Using full-screen mode for details and examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification None See also  Using full-screen mode document.mozCancelFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled  :-moz-full-screen    mozallowfullscreen  See also  Using full-screen mode document.mozCancelFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled  :-moz-full-screen    mozallowfullscreen"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.mozFullScreenEnabled","title":"document.mozFullScreenEnabled","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.plugins","title":"document.plugins","description":"Returns an HTMLCollection object containing one or more HTMLEmbedElements or null which represent the <embed> elements in the current document.  For a list of installed plugins, use navigator.plugins instead. Syntax  embedArrayObj = document.plugins   Specification  DOM Level 0. Not part of any standard.     MSDN: plugins Collection"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.popupNode","title":"document.popupNode","description":"When a popup attached via the popup or context attributes is opened, the XUL document's popupNode property is set to the node that was clicked on. This will be the target of the mouse event that activated the popup. If the popup was opened via the keyboard, the popup node may be set to null. Typically, this property will be checked during a popupshowing event handler for a context menu to initialize the menu based on the context. This property is only set for popups attached via the popup or context attributes. For other types of popups, the value is not changed. In these other cases, for example when calling the popup's showPopup  method, you may wish to set the popupNode property directly beforehand. This property applies only to XUL documents. Usage  var node = document.popupNode;  Example  <menupopup id=\"toolbarContextMenu\">   ...   <menuitem name=\"Delete\" oncommand=\"mailNewsCore.deleteButton(document.popupNode)\">   ... <\/menupopup>  See http:\/\/www.mozilla.org\/xpfe\/xptoolkit\/popups.html Specification XUL-specific method. Not part of any specification. Defined in   nsIDOMXULDocument.idl."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.preferredStyleSheetSet","title":"document.preferredStyleSheetSet","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.readyState","title":"document.readyState","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.referrer","title":"document.referrer","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.scripts","title":"document.scripts","description":"Returns a list of the <script>  elements in the document. The returned object is an HTMLCollection . Syntax var scriptList = document.scripts;  The returned scriptList is an HTMLCollection . You can use this just like an array to get all the elements in the list. Example This example looks to see if the page has any <script>  elements. \r           var scripts = document.scripts;  if (scripts.length) {   alert(\"This page has scripts!\"); }\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Supported) 9.0 (9.0)  (Supported) (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Supported) 9.0 (9.0)  (Supported) (Supported) (Supported)     Specification  DOM: document scripts"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.selectedStyleSheetSet","title":"document.selectedStyleSheetSet","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.styleSheets","title":"document.styleSheets","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.styleSheetSets","title":"document.styleSheetSets","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.title","title":"document.title","description":"Gets or sets the title of the document. Syntax var docTitle = document.title;   title is a string containing the document's title. If the title was overridden by setting document.title, returns that value. Otherwise returns the title specified in the markup (see the Notes below).  document.title = newTitle;   newTitle is the new title of the document. The assignment affects the return value of document.title, the title displayed for the document (e.g. in the titlebar of the window), but does not affect the DOM of the document (e.g. the content of the <title> element in an HTML document).  Example  <html> <head>  <title>Hello World!<\/title>  <\/head> <body>  <script>  alert(document.title); \/\/ displays \"Hello World!\"  document.title = \"Goodbye World!\";  alert(document.title); \/\/ displays \"Goodbye World!\"  <\/script> <\/body> <\/html>  Notes This property applies to HTML, SVG, XUL, and other documents in Gecko. For HTML documents the initial value of document.title is the text content of the <title> element. For XUL it's the value of the title  attribute of the window  or other top-level XUL element. In XUL, accessing document.title before the document is fully loaded has undefined behavior (document.title may return an empty string and setting document.title may have no effect). Specification  DOM Level 2 HTML: document.title HTML5"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.URL","title":"document.URL","description":"Returns the string URL of the HTML document. Syntax string = document.URL   Notes URL is a replacement for the DOM Level 0 document.location.href property. However, document.location.href is settable, and document.URL is not. document.documentURI  returns the same value and is available on non-HTML documents as well. Specification DOM Level 2 HTML: URL"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.tooltipNode","title":"document.tooltipNode","description":"Summary  Returns the node which is the target of the current tooltip .   Usage  document.tooltipNode;   Specification  XUL-specific method. Not part of any specification. Defined in   nsIDOMXULDocument.idl."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.vlinkColor","title":"document.vlinkColor","description":"Deprecated  Gets\/sets the color of links that the user has visited in the document.  Syntax  color = document.vlinkColor document.vlinkColor = color  Parameters  color is a string representing the color as a word (e.g., \"red\") or hexadecimal value (e.g., \"#ff0000\").  Notes  The default value for this property in Mozilla Firefox is purple (#551a8b in hexadecimal). document.vlinkColor is deprecated in DOM Level 2 HTML. The recommended alternative is to get\/set the color of the CSS :visited  pseudo-class on  HTML anchor (<a>) links (e.g., a:visited {color:red;}). Another alternative is document.body.vLink, although this is deprecated in HTML 4.01 in favor of the CSS alternative.  Specification  DOM Level 0. Not part of any standard.     MSDN: vlinkColor Property"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.width","title":"document.width","description":"Returns the width of the <body>  element of the current document in pixels. Not supported by Internet Explorer. Syntax pixels = document.width;  Example function init() {   alert(\"The width of the document is \" + document.width + \" pixels.\"); }  Alternatives \r           document.body.clientWidth              \/* width of <body> *\/ document.documentElement.clientWidth   \/* width of <html> *\/ window.innerWidth                      \/* window's width *\/\r          See also  document.height   Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.xmlVersion","title":"document.xmlVersion","description":"Specification  http:\/\/www.w3.org\/TR\/DOM-Level-3-Cor...ument3-version Removed from DOM Level 4"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.adoptNode","title":"document.adoptNode","description":"Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document. Supported since Gecko 1.9 (Firefox 3) Syntax  var node = document.adoptNode(externalNode);   node is the adopted node that can be used in the current document. The new node's parentNode is null, since it has not yet been inserted into the document tree. externalNode is the node from another document to be adopted.  Example Notes In general the adoptNode call may fail due to the source node coming from a different implementation, however this should not be a problem with browser implementations.  Nodes from external documents should be cloned using importNode() (or adopted using adoptNode()) before they can be inserted into the current document. For more on the ownerDocument issues see the W3C DOM FAQ. Firefox does not presently enforce this rule (it did for a while during the development of Firefox 3, but too many sites break when this rule is enforced). We encourage web developers to fix their code to follow this rule for improved future compatibility.  Specification DOM Level 3 Core: Document.adoptNode  See also  document.importNode"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.clear","title":"document.clear","description":"Deprecated  This method used to clear the whole specified document in early (pre-1.0) versions of Mozilla. In recent versions of Mozilla-based applications as well as in Internet Explorer and Netscape 4 this method does nothing. Syntax  document.clear()   Specification  HTML5"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.close","title":"document.close","description":"Summary  The document.close() method finishes writing to a document, opened with document.open().   Syntax  document.close();   Example   \/\/ open a document to write to it. \/\/ write the content of the document. \/\/ close the document. document.open(); document.write(\"<p>The one and only content.<\/p>\"); document.close();   Specification  DOM Level 2 HTML: close() Method"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createAttribute","title":"document.createAttribute","description":"createAttribute creates a new attribute node, and returns it.  Syntax  attribute = document.createAttribute(name)   Parameters   attribute is an attribute node.  name is a string containing the name of the attribute.  Example   <html>  <head> <title> create\/set\/get Attribute example<\/title>  <script type=\"text\/javascript\">  function doAttrib() { var node = document.getElementById(\"div1\"); var a = document.createAttribute(\"my_attrib\"); a.nodeValue = \"newVal\"; node.setAttributeNode(a); alert(node.getAttribute(\"my_attrib\")); \/\/ \"newVal\" }  \/\/ alternative form not actually using createAttribute \/\/function doAttrib() \/\/{ \/\/var node = document.getElementById(\"div1\"); \/\/node.setAttribute(\"my_attrib\", \"newVal\"); \/\/alert(node.getAttribute(\"my_attrib\")); \/\/ \"newVal\" \/\/}  <\/script> <\/head>  <body onload=\"doAttrib();\"> <div id=\"div1\"> <p>Some content here<\/p> <\/div> <\/body> <\/html>  Notes  The return value is a node of type attribute. Once you have this node you can, as in the foregoing example, set its value by assigning a string to the nodeValue property, or in the alternate form by using the setAttribute() method. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.  Specification  createAttribute"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createCDATASection","title":"document.createCDATASection","description":"createCDATASection() creates a new CDATA section node, and returns it.  Syntax  CDATA Section node = document.createCDATASection(data)   Parameters   CDATA Section node is a CDATA Section node.  data is a string containing the data to be added to the CDATA Section.  Example   var docu = new DOMParser().parseFromString('<xml><\/xml>',  \"application\/xml\")  var cdata = docu.createCDATASection('Some <CDATA> data & then some');  docu.getElementsByTagName('xml')[0].appendChild(cdata);  alert(new XMLSerializer().serializeToString(docu)); \/\/ Displays: <xml><![CDATA[Some <CDATA> data & then some]]><\/xml>  Notes   This will only work with XML, not HTML documents (as HTML documents do not support CDATA sections); attempting it on an HTML document will throw NOT_SUPPORTED_ERR.  Will throw a NS_ERROR_DOM_INVALID_CHARACTER_ERR exception if one tries to submit the closing CDATA sequence (\"]]>\") as part of the data, so unescaped user-provided data cannot be safely used without with this method getting this exception (createTextNode() can often be used in its place).  Specification  createCDATASection"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createComment","title":"document.createComment","description":"createComment() creates a new comment node, and returns it.  Syntax  Comment node = document.createComment(data)   Parameters   Comment node is a Comment node.  data is a string containing the data to be added to the Comment.  Example   var docu = new DOMParser().parseFromString('<xml><\/xml>',  \"application\/xml\")  var comment = docu.createComment('This is a not-so-secret comment in your document');  docu.getElementsByTagName('xml')[0].appendChild(comment);  alert(new XMLSerializer().serializeToString(docu)); \/\/ Displays: <xml><!--This is a not-so-secret comment in your document--><\/xml>  Notes   Will throw a NS_ERROR_DOM_INVALID_CHARACTER_ERR exception if one tries to include the \"--\" sequence as part of the data, so if based on user data, this potential string would need to be escaped or have its exception caught.  Specification  createComment"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createDocumentFragment","title":"document.createDocumentFragment","description":"Creates a new empty DocumentFragment. Syntax \r           var docFragment = document.createDocumentFragment();\r          docFragment is a reference to an empty DocumentFragment object. Description DocumentFragments are DOM Nodes. They are never part of the main DOM tree. The usual use case is to create the document fragment, append elements to the document fragment and then append the document fragment to the DOM tree. In the DOM tree, the document fragment is replaced by all its children. Since the document fragment is in memory and not part of the main DOM tree, appending children to it does not cause page reflow (computation of elements position and geometry). Consequently, using document fragments often results in better performances. DocumentFragment are supported in all browsers, even Internet Explorer 6, so there is no reason to not use them.Example \r           var ul = document.getElementsByTagName(\"ul\")[0]; \/\/ assuming it exists var docfrag = document.createDocumentFragment();  [\"Internet Explorer\", \"Mozilla Firefox\", \"Safari\", \"Chrome\", \"Opera\"].forEach(function(e){                                                                                 var li = document.createElement(\"li\");                                                                                 li.textContent = e;                                                                                 docfrag.appendChild(li);                                                                               });  ul.appendChild(docfrag); \/\/ a list with well-known web browsers\r          Browser compatibility     Desktop Mobile       Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support (Supported) (Supported) (Supported) (Supported) (Supported)         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?    Specification DOM Level 2: createDocumentFragment See also  document.implementation.createDocument() DocumentFragment"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createElement","title":"document.createElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createElementNS","title":"document.createElementNS","description":"Summary  Creates an element with the specified namespace URI and qualified name.   Syntax  element = document.createElementNS(namespaceURI, qualifiedName);   element is the created element.  namespaceURI is a string that specifies the namespace URI to associate with the element. The namespaceURI property of the created element is initialized with the value of namespaceURI.  qualifiedName is a string that specifies the type of element to be created. The nodeName property of the created element is initialized with the value of qualifiedName.  Example This creates a new <div> element in the XHTML namespace and appends it to the vbox element. Although this is not an extremely useful XUL document, it does demonstrate the use of elements from two different namespaces within a single document:  <?xml version=\"1.0\"?> <page xmlns=\"http:\/\/www.mozilla.org\/keymaster\/gatekeeper\/there.is.only.xul\"       xmlns:html=\"http:\/\/www.w3.org\/1999\/xhtml\"       title=\"||Working with elements||\"       onload=\"init()\">  <script type=\"text\/javascript\"><![CDATA[  var container;  var newdiv;  var txtnode;   function init(){    container = document.getElementById(\"ContainerBox\");    newdiv = document.createElementNS(\"http:\/\/www.w3.org\/1999\/xhtml\",\"div\");    txtnode = document.createTextNode(\"This is text that was constructed dynamically with createElementNS and createTextNode then inserted into the document using appendChild.\");    newdiv.appendChild(txtnode);    container.appendChild(newdiv);  }  ]]><\/script>   <vbox id='ContainerBox' flex='1'>   <html:div>    The script on this page will add dynamic content below:   <\/html:div>  <\/vbox>  <\/page> Notes The example given above uses inline script which is not recommended in XHTML documents. This particular example is actually an XUL document with embedded XHTML, however, the recommendation still applies. Inline script does not cause any problems for this short example, however, for any serious work you should learn about Properly Using CSS and JavaScript in XHTML Documents. To create an element without specifying a namespace URI, use the createElement method. See Also  document.createElement document.createTextNode element.namespaceURI   Specification  DOM 2 Core: createElementNS Namespaces in XML"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createEntityReference","title":"document.createEntityReference","description":"Specification createEntityReference"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createEvent","title":"document.createEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createExpression","title":"document.createExpression","description":"Syntax xpathExpr = document.createExpression(xpathText, namespaceURLMapper);  Arguments  String xpathText (the XPath expression to be compiled)  Function namespaceURLMapper (maps a namespace prefix to a namespace URL (or null if none needed))   Firefox 3 notePrior to Firefox 3, you could call this method on documents other than the one you planned to run the XPath against. Under Firefox 3, you must call it on the same document.    Return XPathExpression"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createNSResolver","title":"document.createNSResolver","description":"Creates an XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node. Syntax nsResolver = document.createNSResolver(node);  where  nsResolver is an XPathNSResolver object. node is the node to be used as a context for namespace resolution.  Notes Adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated relative to the context of the node where it appeared within the document. This adapter works like the DOM Level 3 method lookupNamespaceURI on nodes in resolving the namespaceURI from a given prefix using the current information available in the node's hierarchy at the time lookupNamespaceURI is called. Also correctly resolves the implicit xml prefix. Note, XPath defines QNames without prefix to match only elements in the null namespace. There is no way in XPath to pick up the default namespace as applied to a regular element reference (e.g., p[@id='_myid'] for xmlns='http:\/\/www.w3.org\/1999\/xhtml'). To match default elements in a non-null namespace, you either have to refer to a particular element using a form such as *namespace-uri()=http:\/\/www.w3.org\/1999\/xhtml and name()=p[@id='_myid'] (this approach works well for dynamic XPath expressions where the namespaces might not be known) or use prefixed name tests, and create a namespace resolver mapping the prefix to the namespace. Read more on how to create a user defined namespace resolver if you wish to take the latter approach. createNSResolver was introduced in DOM Level 3. See also  document.evaluate Introduction to using XPath in JavaScript  Specification DOM Level 3 XPath Specification: createNSResolver"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createProcessingInstruction","title":"document.createProcessingInstruction","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createRange","title":"document.createRange","description":"Summary  Returns a new Range object.   Syntax  range = document.createRange();  range is the created range object.   Example  var range = document.createRange(); range.setStart(startNode, startOffset); range.setEnd(endNode, endOffset);   Notes  Once a Range is created, you need to set its boundary points before you can make use of most of its methods.   Specification  DOM Level 2 Range: DocumentRange.createRange"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createTextNode","title":"document.createTextNode","description":"Creates a new Text node. Syntax var text = document.createTextNode(data);  Parameters  text is a Text node. data is a string containing the data to be put in the text node.  Example <html> <head> <title>createTextNode example<\/title>  <script type=\"text\/javascript\">  function addTextNode() { var newtext = document.createTextNode(\" Some text added dynamically. \"); var para = document.getElementById(\"p1\"); para.appendChild(newtext); }  <\/script> <\/head>  <body> <div style=\"border: 1px solid red\"> <p id=\"p1\">First line of paragraph.<br \/><\/p> <\/div><br \/>  <button onclick=\"addTextNode();\">add another textNode.<\/button>  <\/body> <\/html>  Specification createTextNode"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.createTreeWalker","title":"document.createTreeWalker","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.elementFromPoint","title":"document.elementFromPoint","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.enableStyleSheetsForSet","title":"document.enableStyleSheetsForSet","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.evaluate","title":"document.evaluate","description":"Returns an XPathResult based on an XPath expression and other given parameters. Syntax  var xpathResult = document.evaluate(  xpathExpression,   contextNode,   namespaceResolver,   resultType,   result);   xpathExpression is a string representing the XPath to be evaluated. contextNode specifies the context node for the query (see the [http:\/\/www.w3.org\/TR\/xpath XPath specification). It's common to pass document as the context node. namespaceResolver is a function that will be passed any namespace prefixes and should return a string representing the namespace URI associated with that prefix. It will be used to resolve prefixes within the XPath itself, so that they can be matched with the document. null is common for HTML documents or when no namespace prefixes are used. resultType is an integer that corresponds to the type of result XPathResult to return. Use named constant properties, such as XPathResult.ANY_TYPE, of the XPathResult constructor, which correspond to integers from 0 to 9. result is an existing XPathResult to use for the results. null is the most common and will create a new XPathResult  Example \r           var headings = document.evaluate(\"\/html\/body\/\/h2\", document, null, XPathResult.ANY_TYPE, null);  \/* Search the document for all h2 elements.    * The result will likely be an unordered node iterator. *\/ var thisHeading = headings.iterateNext();  var alertText = \"Level 2 headings in this document are:\\n\"; while (thisHeading) {   alertText += thisHeading.textContent + \"\\n\";   thisHeading = headings.iterateNext(); } alert(alertText); \/\/ Alerts the text of all h2 elements\r          Note, in the above example, a more verbose XPath is preferred over common shortcuts such as \/\/h2. Generally, more specific XPath selectors as in the above example usually gives a significant performance improvement, especially on very large documents. This is because the evaluation of the query spends does not waste time visiting unnecessary nodes. Using \/\/ is generally slow as it visits every node from the root and all subnodes looking for possible matches. Further optimization can be achieved by careful use of the context parameter. For example, if you know the content you are looking for is somewhere inside the body tag, you can use this: \r           document.evaluate(\".\/\/h2\", document.body, null, XPathResult.ANY_TYPE, null);\r          Notice in the above document.body has been used as the context instead of document so the XPath starts from the body element. (In this example, the \".\" is important to indicate that the querying should start from the context node, document.body. If the \".\" was left out (leaving \/\/h2) the query would start from the root node (html) which would be more wasteful.) See Introduction to using XPath in JavaScript for more information. Notes  XPath expressions can be evaluated on HTML and XML documents. While using document.evaluate() works in FF2, in FF3 one must use someXMLDoc.evaluate() if evaluating against something other than the current document.  Result types (Merge with Template:XPathResultConstants? These are supported values for the resultType parameter of the evaluate method:    Result Type Value Description   ANY_TYPE 0 Whatever type naturally results from the given expression.   NUMBER_TYPE 1 A result set containing a single number. Useful, for example, in an XPath expression using the count() function.   STRING_TYPE 2 A result set containing a single string.   BOOLEAN_TYPE 3 A result set containing a single boolean value. Useful, for example, an an XPath expression using the not() function.   UNORDERED_NODE_ITERATOR_TYPE 4 A result set containing all the nodes matching the expression. The nodes in the result set are not necessarily in the same order they appear in the document.   ORDERED_NODE_ITERATOR_TYPE 5 A result set containing all the nodes matching the expression. The nodes in the result set are in the same order they appear in the document.   UNORDERED_NODE_SNAPSHOT_TYPE 6 A result set containing snapshots of all the nodes matching the expression. The nodes in the result set are not necessarily in the same order they appear in the document.   ORDERED_NODE_SNAPSHOT_TYPE 7 A result set containing snapshots of all the nodes matching the expression. The nodes in the result set are in the same order they appear in the document.   ANY_UNORDERED_NODE_TYPE 8 A result set containing any single node that matches the expression. The node is not necessarily the first node in the document that matches the expression.   FIRST_ORDERED_NODE_TYPE 9 A result set containing the first node in the document that matches the expression.    Results of NODE_ITERATOR types contain references to nodes in the document. Modifying a node will invalidate the iterator. After modifying a node, attempting to iterate through the results will result in an error. Results of NODE_SNAPSHOT types are snapshots, which are essentially lists of matched nodes. You can make changes to the document by altering snapshot nodes. Modifying the document doesn't invalidate the snapshot; however, if the document is changed, the snapshot may not correspond to the current state of the document, since nodes may have moved, been changed, added, or removed. Specification DOM Level 3 XPath See also  DOM:document.createExpression XPath Code Snippets"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.getBoxObjectFor","title":"document.getBoxObjectFor","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.getElementById","title":"document.getElementById","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.getElementsByClassName","title":"document.getElementsByClassName","description":"Returns a set of elements which have all the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName on any element; it will return only elements which are descendants of the specified root element with the given class names. Syntax \r           elements = document.getElementsByClassName(names); \/\/ or: elements = rootElement.getElementsByClassName(names);\r           elements is a live NodeList of found elements in the order they appear in the tree. names is a string representing the list of class names to match; class names are separated by whitespace getElementsByClassName can be called on any element, not only on the document. The element on which it is called will be used as the root of the search. Examples Get all elements that have a class of 'test' \r           document.getElementsByClassName('test');\r          Get all elements that have both the 'red' and 'test' classes \r           document.getElementsByClassName('red test');\r          Get all elements that have a class of 'test', inside of an element that has the ID of 'main' \r           document.getElementById('main').getElementsByClassName('test');\r          And if we go ahead and add in JavaScript 1.6's Array extras, we can do some really-cool matches. Find all div elements that have a class of 'test' \r           var tests = Array.filter( document.getElementsByClassName('test'), function(elem){   return elem.nodeName == 'DIV'; });\r          Find all elements that have a class of 'test' (as do their parent element) \r           var test = document.getElementsByClassName('test'); var someTests = Array.filter( test, function(elem){   return Array.indexOf( test, elem.parentNode ) > -1; });\r         Specification WHATWG Web Applications 1.0: getElementsByClassName"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.getElementsByName","title":"document.getElementsByName","description":"Returns a list of elements with a given name in the HTML document. Syntax elements = document.getElementsByName(name)    elements is a HTMLCollection  of elements. name is the value of the name attribute of the element.  Example \r           <!DOCTYPE html> <form name=\"up\"><input type=\"text\"><\/form> <form name=\"down\"><input type=\"text\"><\/form>  <script> var up_forms = document.getElementsByName(\"up\");  w(up_forms[0].tagName); \/\/ returns \"FORM\" <\/script>\r          Notes The name attribute is only applicable to (X)HTML documents. The method returns all elements with a name attribute, such as <meta> or <object> or even if name is placed on elements which do not support a name attribute at all. document.getElementsByName() returns a HTMLCollection  of all the elements with a given value for the name attribute. Specification  DOM Level 2 HTML: getElementsByName HTML5: getElementsByName"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.getElementsByTagName","title":"document.getElementsByTagName","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.getElementsByTagNameNS","title":"document.getElementsByTagNameNS","description":"Returns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node. Syntax elements = document.getElementsByTagNameNS(namespace, name)   elements is a live NodeList of found elements in the order they appear in the tree. namespace is the namespace URI of elements to look for (see element.namespaceURI). name is either the local name of elements to look for or the special value \"*\", which matches all elements (see element.localName).  Example In the following example getElementsByTagNameNS starts from a particular parent element, and searches topdown recursively through the DOM from that parent element, looking for child elements matching the tag name parameter. Note that when the node on which getElementsByTagName is invoked is not the document node, in fact the element.getElementsByTagNameNS method is used. To use the following example, just copy\/paste it into a new file saved with the .xhtml extension.  <html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\">  <head> <title>getElementsByTagNameNS example<\/title>  <script type=\"text\/javascript\">  function getAllParaElems() {   var allParas = document.getElementsByTagNameNS(\"http:\/\/www.w3.org\/1999\/xhtml\", \"p\");    var num = allParas.length;    alert(\"There are \" + num + \" &lt;p&gt; elements in this document\"); }   function div1ParaElems() {   var div1 = document.getElementById(\"div1\")   var div1Paras = div1.getElementsByTagNameNS(\"http:\/\/www.w3.org\/1999\/xhtml\", \"p\");    var num = div1Paras.length;    alert(\"There are \" + num + \" &lt;p&gt; elements in div1 element\"); }   function div2ParaElems() {   var div2 = document.getElementById(\"div2\")   var div2Paras = div2.getElementsByTagNameNS(\"http:\/\/www.w3.org\/1999\/xhtml\", \"p\");    var num = div2Paras.length;    alert(\"There are \" + num + \" &lt;p&gt; elements in div2 element\"); }  <\/script> <\/head>  <body style=\"border: solid green 3px\"> <p>Some outer text<\/p> <p>Some outer text<\/p>    <div id=\"div1\" style=\"border: solid blue 3px\">     <p>Some div1 text<\/p>     <p>Some div1 text<\/p>     <p>Some div1 text<\/p>      <div id=\"div2\" style=\"border: solid red 3px\">     <p>Some div2 text<\/p>     <p>Some div2 text<\/p>     <\/div>   <\/div>  <p>Some outer text<\/p> <p>Some outer text<\/p>  <button onclick=\"getAllParaElems();\">  show all p elements in document<\/button><br \/>  <button onclick=\"div1ParaElems();\">  show all p elements in div1 element<\/button><br \/>  <button onclick=\"div2ParaElems();\">  show all p elements in div2 element<\/button>  <\/body> <\/html>  Potential Workaround for other browsers which do not support If the desired browser did not support XPath, another approach (such as traversing the DOM through all its children, identifying all @xmlns instances, etc.) would be necessary to find all tags with the desired local name and namespace, but XPath is much faster. (To accommodate Explorer, one could call an XPath wrapper instead of the XPath in the function below (as Explorer supports XPath with a different API), such as this wrapper class.)  function getElementsByTagNameNSWrapper (ns, elName, doc, context) { \tif (!doc) { \t\tdoc = document; \t} \tif (!context) { \t\tcontext = doc; \t}  \tvar result = doc.evaluate('\/\/*[local-name()=\"'+elName+'\" and namespace-uri() = \"'+ns+'\"]', context, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);          var a = [];         for(var i = 0; i < result.snapshotLength; i++) {             a[i] = result.snapshotItem(i);         }         return a; }  Specification DOM Level 2 Core: Document.getElementsByTagNameNS"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.importNode","title":"document.importNode","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.hasFocus","title":"document.hasFocus","description":"Returns a Boolean value indicating whether the document or any element inside the document has focus. This method can be used to determine whether the active element in a document has focus. Note: When viewing a document, an element with focus is always the active element in the document, but an active element does not necessarily have focus. For example, an active element within a (popup) window that is not the foreground has no focus. Syntax  focused = document.hasFocus();  Return value false if the active element in the document has no focus; true if the active element in the document has focus. Return value false if the active element in the document has no focus; true if the active element in the document has focus. Example \r           <!DOCTYPE html> <html> <head>   <style type='text\/css'>     #message { font-weight: bold; }   <\/style>  <script type='text\/javascript'>       setInterval(\"CheckPageFocus()\", 200);          function CheckPageFocus() {             var info = document.getElementById(\"message\");            if (document.hasFocus()) {              info.innerHTML = \"The document has the focus.\";             }             else {              info.innerHTML = \"The document doesn't have the focus.\";            }       }       function OpenWindow() {            window.open (\"http:\/\/developer.mozilla.org\/\", \"mozdev\",                        \"width=640, height=300, left=150, top=260\");     } <\/script> <\/head>  <body>  JavaScript hasFocus example<br \/><br \/> <div id=\"message\">Waiting for user action<\/div><br \/> <button onclick=\"OpenWindow()\">Open a new window<\/button> <\/body> <\/html>\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Supported) 3.0 (1.9)  6.0 -- (Supported)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 1.0 (1.9)  ? -- ?     Specification  Focus management"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.loadOverlay","title":"document.loadOverlay","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.open","title":"document.open","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.queryCommandSupported","title":"document.queryCommandSupported","description":"Reports whether or not the specified editor query command is supported by the browser. Syntax var isSupported = document.queryCommandSupported(command);   command The command for which to determine support.  If the command is not supported, a NotSupportedError exception is thrown. Otherwise:  If the command has no value, or is disabled, an empty string is returned. The \"fontSize\" command is handled specially; if its value override is set, that gets converted to an integer number of pixels and returned as a legacy font size. If the command's value override is set, that gets returned. Otherwise, the command's value is returned, as would be returned by document.queryCommandValue() .  Example Example needed Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  4.0 ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification  HTML Editing APIs: queryCommandSupported()"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.querySelectorAll","title":"document.querySelectorAll","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.querySelector","title":"document.querySelector","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.releaseCapture","title":"document.releaseCapture","description":"Releases mouse capture if it's currently enabled on an element within this document. Enabling mouse capture on an element is done by calling element.setCapture() . Syntax  document.releaseCapture()  Once mouse capture is released, mouse events will no longer all be directed to the element on which capture is enabled. Example See the example for element.setCapture() . Specification Based on Internet Explorer's implementation. See also  element.setCapture()"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.mozSetImageElement","title":"document.mozSetImageElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.writeln","title":"document.writeln","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.write","title":"document.write","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.onreadystatechange","title":"document.onreadystatechange","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.getSelection","title":"window.getSelection","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/toString","title":"toString","description":"Summary  Returns a string currently being represented by the selection object, i.e. the currently selected text.   Syntax  string = sel.toString()   string is the string representation of selection.   Parameters  None.   Description  This method returns the currently selected text. In JavaScript, this method is called automatically when a function the selection object is passed to requires a string:  alert(window.getSelection()) \/\/ What is called alert(window.getSelection().toString())  \/\/ What is actually being effectively called.   See Also   Object.toString"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/anchorNode","title":"anchorNode","description":"Summary  Returns the node in which the selection begins.   Syntax  sel.anchorNode   Notes  A user may make a selection from left to right (in document order) or right to left (reverse of document order). The anchor is where the user began the selection. This can be visualized by holding the Shift key and pressing the arrow keys on your keyboard. The selection's anchor does not move, but the selection's focus, the other end of the selection, does move."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/anchorOffset","title":"anchorOffset","description":"Summary  Returns the number of characters that the selection's anchor is offset within the anchorNode.   Syntax  sel.anchorOffset   Notes  This number is zero-based. If the selection begins with the first character in the anchorNode, 0 is returned."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/focusNode","title":"focusNode","description":"Summary  Returns the node in which the selection ends.   Syntax  sel.focusNode   Notes  A user may make a selection from left to right (in document order) or right to left (reverse of document order). The focus is where the user ended the selection. This can be visualized by holding the Shift key and pressing the arrow keys on your keyboard to modify the current selection. The selection's focus moves, but the selection's anchor, the other end of the selection, does not move."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/focusOffset","title":"focusOffset","description":"Summary  Returns the number of characters that the selection's focus is offset within the focusNode.   Syntax  sel.focusOffset   Notes  This number is zero-based. If the selection ends with the first character in the focusNode, 0 is returned."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/isCollapsed","title":"isCollapsed","description":"Summary  Returns a boolean indicating whether the selection's start and end points are at the same position.   Syntax  sel.isCollapsed   Notes  Even a collapsed selection may have a rangeCount greater than 0. sel.getRangeAt(0) may return a range that is also collapsed."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/rangeCount","title":"rangeCount","description":"Summary  Returns the number of ranges in the selection.   Syntax  sel.rangeCount   Notes  Before the user has clicked a freshly loaded page, the rangeCount is 0. A user can normally only select one range at a time, so the rangeCount will usually be 1. Scripting can be use to make the selection contain more than 1 range."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/getRangeAt","title":"getRangeAt","description":"Returns a range object representing one of the ranges currently selected. Syntax range = sel.getRangeAt(index)  Parameters range The range object that will be returned.  index The zero-based index of the range to return. A negative number or a number greater than or equal to rangeCount will result in an error.  Examples ranges = []; sel = window.getSelection(); for(var i = 0; i < sel.rangeCount; i++) {  ranges[i] = sel.getRangeAt(i); } \/* Each item in the ranges array is now   * a range object representing one of the   * ranges in the current selection *\/  See also Tree Selection (for the getRangeAt() method on the nsITreeSelection interface)"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/collapse","title":"collapse","description":"Collapses the current selection to a single point. The document is not modified. If the content is focused and editable, the caret will blink there. Syntax sel.collapse(parentNode, offset);  Parameters parentNode The caret location will be within this node.  offset 0 - Collapses the selection from the anchor to the beginning of parentNode's text.1 - Collapses the selection from the anchor to the end of parentNode's text. Examples \/* Place the caret at the beginning of an HTML document's body. *\/ var body = document.getElementsByTagName(\"body\")[0]; window.getSelection().collapse(body,0);"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/extend","title":"extend","description":"Moves the focus of the selection to a specified point. The anchor of the selection does not move. The selection will be from the anchor to the new focus regardless of direction. Syntax sel.extend(parentNode, offset)  Parameters parentNodeThe node within which the focus will be moved.offsetThe offset position within parentNode where the focus will be moved to."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/modify","title":"modify","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/collapseToEnd","title":"collapseToEnd","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/collapseToStart","title":"collapseToStart","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/addRange","title":"addRange","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/removeRange","title":"removeRange","description":"Summary  Removes a range from the selection.   Syntax  sel.removeRange(range)   Parameters  range A range object that will be removed to the selection.   Examples  \/* Programmaticaly, more than one range can be selected.    * This will remove all ranges except the first. *\/ s = window.getSelection(); if(s.rangeCount > 1) {  for(var i = 1; i < s.rangeCount; i++) {   s.removeRange(s.getRangeAt(i));  } }"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/selectAllChildren","title":"selectAllChildren","description":"Summary  Adds all the children of the specified node to the selection. Previous selection is lost.   Syntax  sel.selectAllChildren(parentNode)   Parameters  parentNode All children of parentNode will be selected. parentNode itself is not part of the selection.   Examples  footer = document.getElementById(\"footer\"); window.getSelection().selectAllChildren(footer); \/* Everything inside the footer is now selected *\/"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/removeAllRanges","title":"removeAllRanges","description":"Summary  Removes all ranges from the selection, leaving the anchorNode and focusNode properties equal to null and leaving nothing selected.   Syntax  sel.removeAllRanges();   Parameters  None."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/deleteFromDocument","title":"deleteFromDocument","description":"Summary  Deletes the actual text being represented by a selection object from the document's DOM.   Syntax  sel.deleteFromDocument()   Parameters  None.   Examples  A user selects the (imaginary) text \"ve two ea\" from \"Rabbits have two ears.\" on a web page. The user then clicks a button that executes the JavaScript snippet window.getSelection().deleteFromDocument(). The document's text becomes \"Rabbits hars.\""},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/selectionLanguageChange","title":"selectionLanguageChange","description":"Modifies the cursor Bidi level after a change in keyboard direction. Syntax sel.selectionLanguageChange(langRTL)  Parameters  langRTL PR_TRUE if the new language is right-to-left or PR_FALSE if the new language is left-to-right."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Selection\/containsNode","title":"containsNode","description":"Summary  Indicates if the node is part of the selection.   Syntax  sel.containsNode(aNode, aPartlyContained)   Parameters  aNode The node that is being looked for whether it is part of the selection aPartlyContained When true, containsNode returns true when a part of the node is part of the selection. When false, containsNode only returns true when the entire node is part of the selection.   Examples   \/* Check to see if anything inside the body element is selected *\/  alert(window.getSelection().containsNode(document.body, true));"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.collapsed","title":"range.collapsed","description":"Summary  Returns a boolean indicating whether the range's start and end points are at the same position.   Syntax  isCollapsed = range.collapsed;   Example  range = document.createRange();  range.setStart(startNode,startOffset);  range.setEnd(endNode,endOffset); isCollapsed = range.collapsed;   Notes  Returns a boolean of true if the start and end boundary points of the Range are the same point in the DOM, false if not. A collapsed Range is empty, containing no content, specifying a single-point in a DOM tree. The collapsed property is read-only. To collapse a range, see the  collapse method.   Specification  collapsed"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.commonAncestorContainer","title":"range.commonAncestorContainer","description":"Returns the deepest Node that contains the  startContainer and  endContainer Nodes. Syntax  rangeAncestor = range.commonAncestorContainer;  Example  range = document.createRange(); range.setStart(startNode,startOffset); range.setEnd(endNode,endOffset); rangeAncestor = range.commonAncestorContainer;  Notes Returns the deepest, or further down the document tree, Node that contains both the  startContainer and  endContainer nodes. Since a Range need not be continuous, and may also partially select Nodes, this is a convenient way to find a Node which encloses a Range. This property is read-only. To change the ancestor container of a Node, consider using the various methods to set the start and end positions of the Range. Specification commonAncestorContainer"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.endContainer","title":"range.endContainer","description":"Summary  Returns the Node within which the Range ends.   Syntax  endRangeNode = range.endContainer;   Example  range = document.createRange(); range.setStart(startNode,startOffset);  range.setEnd(endNode,endOffset); endRangeNode = range.endContainer;   Notes  Returns a reference to the Node in the document within which the Range ends. This property is read-only. To change the end position of a node, use the  setEnd method or a similar method.   Specification  endContainer"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.endOffset","title":"range.endOffset","description":"Summary  Returns a number representing where in the  endContainer the Range ends.   Syntax  endRangeOffset = range.endOffset;   Example  range = document.createRange(); range.setStart(startNode,startOffset); range.setEnd(endNode,endOffset); endRangeOffset = range.endOffset;   Notes  endOffset has two meanings. If the endContainer is a Node of type Text, Comment, or CDATASection, then the offset is the number of characters from the start of the endContainer to the boundary point of the Range. For other Node types, the endOffset is the number of child nodes between the start of the endContainer and the boundary point of the Range. This property is read-only. To change the endOffset of a Range, use one of the setEnd methods.   Specification  endOffset"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.startContainer","title":"range.startContainer","description":"Summary  Returns the Node within which the Range starts.   Syntax  startRangeNode = range.startContainer;   Example  range = document.createRange(); range.setStart(startNode,startOffset); range.setEnd(endNode,endOffset); startRangeNode = range.startContainer;   Notes  Returns a reference to the Node in the document within which the Range starts. This property is read-only. To change the start position of a node, use one of the setStart methods.   Specification  startParent"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.startOffset","title":"range.startOffset","description":"Summary  Returns a number representing where in the startContainer the Range starts.   Syntax  startRangeOffset = range.startOffset;   Example  range = document.createRange(); range.setStart(startNode,startOffset); range.setEnd(endNode,endOffset); startRangeOffset = range.startOffset;   Notes  startOffset has two meanings. If the startContainer is a Node of type Text, Comment, or CDATASection, then the offset is the number of characters from the start of the startContainer to the boundary point of the Range. For other Node types, the startOffset is the number of child nodes between the start of the startContainer and the boundary point of the Range. This property is read-only. To change the startOffset of a Range, use one of the setStart methods.   Specification  startOffset"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.setStart","title":"range.setStart","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.setEnd","title":"range.setEnd","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.setStartBefore","title":"range.setStartBefore","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.setStartAfter","title":"range.setStartAfter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.setEndBefore","title":"range.setEndBefore","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.setEndAfter","title":"range.setEndAfter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.selectNode","title":"range.selectNode","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.selectNodeContents","title":"range.selectNodeContents","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.collapse","title":"range.collapse","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.cloneContents","title":"range.cloneContents","description":"Returns a DocumentFragment  copying the Node s of a Range . Syntax documentFragment = range.cloneContents();  Example range = document.createRange(); range.selectNode(document.getElementsByTagName(\"div\").item(0)); documentFragment = range.cloneContents(); document.body.appendChild(documentFragment);  Notes Event Listeners added using DOM Events are not copied during cloning. HTML attribute events are duplicated as they are for the DOM Core cloneNode method. HTML id attributes are also cloned, which can lead to an invalid document through cloning. Partially selected nodes include the parent tags necessary to make the document fragment valid. Specification cloneContents"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.deleteContents","title":"range.deleteContents","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.extractContents","title":"range.extractContents","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.insertNode","title":"range.insertNode","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.compareBoundaryPoints","title":"range.compareBoundaryPoints","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.surroundContents","title":"range.surroundContents","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.cloneRange","title":"range.cloneRange","description":"Summary  Returns a Range object with boundary points identical to the cloned Range.   Syntax  clone = range.cloneRange();   Example  range = document.createRange(); range.selectNode(document.getElementsByTagName(\"div\").item(0)); clone = range.cloneRange();   Notes  clone is copied by value, not reference, so a change in either Range does not effect the other.   Specification  cloneRange"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.detach","title":"range.detach","description":"Summary  Releases Range from use to improve performance.   Syntax  range.detach();   Example  range = document.createRange(); range.selectNode(document.getElementsByTagName(\"div\").item(0)); range.detach();   Notes  Allows mozilla to relinquish resources associated with this Range. Subsequent attempts to use the detached range will result in a DOMException being thrown with an error code of INVALID_STATE_ERR.   Specification  detach"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.compareNode","title":"range.compareNode","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.toString","title":"range.toString","description":"Summary  Returns the text of the Range.   Syntax  text = range.toString();   Example  range = document.createRange(); range.selectNode(document.getElementsByTagName(\"div\").item(0)); text = range.toString();   Notes  Alerting the contents of a Range makes an implicit toString() call, so comparing range and text through an alert dialog is ineffective   Specification  toString"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.comparePoint","title":"range.comparePoint","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.createContextualFragment","title":"range.createContextualFragment","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.getBoundingClientRect","title":"range.getBoundingClientRect","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.getClientRects","title":"range.getClientRects","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.isPointInRange","title":"range.isPointInRange","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/range.intersectsNode","title":"range.intersectsNode","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/style.media","title":"style.media","description":"media specifies the intended destination medium for style information.  Syntax  medium = style.media style.media = medium  Parameters  medium is a string describing a single medium or a comma-separated list.  Example \r           <html> <head> <link id=\"linkScreenStyle\" rel=\"stylesheet\" href=\"document.css\" type=\"text\/css\" media=\"screen\" \/> <style id=\"screenStyle\" rel=\"stylesheet\" type=\"text\/css\" media=\"screen\"> p {color:blue;} <\/style> <script type=\"text\/javascript\"> alert(document.getElementById('screenStyle').media); \/\/ 'screen' alert(document.getElementById('linkScreenStyle').media); \/\/ 'screen' <\/script> <\/head> <body> <\/body> <\/html>\r          Notes  The default value for media is \"screen.\"  Specification  DOM Level 2 Styles - STYLE"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/style.type","title":"style.type","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/stylesheet","title":"StyleSheet","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/cssRule","title":"CSSRule","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSS","title":"CSS Reference","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.resizeTo","title":"window.resizeTo","description":"Dynamically resizes window. Syntax window.resizeTo(iWidth, iHeight)   Parameters  iWidth is an integer representing the new outerWidth in pixels (including scroll bars, title bars, etc). iHeight is an integer value representing the new outerHeight in pixels (including scroll bars, title bars, etc).  Example  \/\/ function resizes the window to take up one quarter  \/\/ of the available screen.  function quarter() {    window.resizeTo(window.screen.availWidth\/2,       window.screen.availHeight\/2);  }  Notes Since Firefox 7, it's no longer possible for a web site to change the default size of a window in a browser, according to the following rules:  You can't resize a window or tab that wasn&rsquo;t created by window.open. You can't resize a window or tab when it&rsquo;s in a window with more than one tab.  See also window.resizeBy. Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.resizeBy","title":"window.resizeBy","description":"Resizes the current window by a certain amount.  Syntax  window.resizeBy(xDelta, yDelta)   Parameters  xDelta is the number of pixels to grow the window horizontally. yDelta is the number of pixels to grow the window vertically.  Example   \/\/ shrink the window  window.resizeBy(-200, -200);  Notes  This method resizes the window relative to its current size. To resize the window in absolute terms, use window.resizeTo.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.applicationCache","title":"window.applicationCache","description":"Returns a reference to the application cache object for the window. Syntax cache = window.applicationCache   Parameters  cache is an object reference to a nsIDOMOfflineResourceList .  See also  Using Application Cache HTML 5 working draft"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.closed","title":"window.closed","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.content","title":"window.content","description":"Summary  Returns a Window object for the primary content window. This is useful in XUL windows that have a <browser> (or tabbrowser or <iframe>) with type=\"content-primary\" attribute on it - the most famous example is Firefox main window, browser.xul. In such cases, content returns a reference to the Window object for the document currently displayed in the browser. It is a shortcut for browserRef.contentWindow. In unprivileged content (webpages), content is normally equivalent to top (except in the case of a webpage loaded in a sidebar, content still refers to the Window of the currently selected tab). Some examples use _content instead of content. The former has been deprecated for a long time, and you should use content in the new code.   Syntax  var windowObject = window.content;   Example  Executing the following code in a chrome XUL window with a <browser type=\"content-primary\"\/> element in it draws a red border around the first div on the page currently displayed in the browser:  content.document.getElementsByTagName(\"div\")[0].style.border = \"solid red 1px\";   Specification  Not part of any W3C specification.   See also   Working with windows in chrome code  When accessing content documents from privileged code, be aware of XPCNativeWrappers."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.controllers","title":"window.controllers","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.crypto","title":"window.crypto","description":"Summary  Returns the browser crypto object, which can then be used to manipulate various browser security features. See JavaScript crypto for details.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.defaultStatus","title":"window.defaultStatus","description":"Gets\/sets the status bar text for the given window. Syntax var sMsg = window.defaultStatus; window.defaultStatus = sMsg;  Parameters  sMsg is a string containing the text to be displayed by default in the statusbar.  Example <html>   <body onload=\"window.defaultStatus='hello!';\"\/>    <button onclick=\"window.confirm('Are you sure you want to quit?');\">confirm<\/button>   <\/body>  <\/htm>  Notes To set the status once the window has been opened, use window.status. Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.dialogArguments","title":"window.dialogArguments","description":"Property dialogArguments returns parameters of method showModalDialog(). Syntax var value=window.dialogArguments;"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.showModalDialog","title":"window.showModalDialog","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.directories","title":"window.directories","description":"Returned the window personalbar toolbar object. Use the window.personalbar  instead. Syntax  var dirBar = window.directories;  Parameters dirBar is an object of the type BarProp. Example  <script>   function dirs() {    alert(window.directories);  }  <\/script>  Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.personalbar","title":"window.personalbar","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.frameElement","title":"window.frameElement","description":"Summary  Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the window is top-level.   Syntax  var frameEl = window.frameElement;   frameEl is the element which the window is embedded into, or null if the window is top-level.   Example  var frameEl = window.frameElement; \/\/ if we are inside a frame, then change it's URL to 'http:\/\/mozilla.org\/' if (frameEl)   frameEl.src = 'http:\/\/mozilla.org\/';   Notes  Note that despite its name, the property also works for documents inside <object> and other embedding points.  See also  window.frames returns an array-like object, listing the direct sub-frames of the current window.  window.parent returns the parent window, which is the window containing the frameElement of the child window.   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.frames","title":"window.frames","description":"Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window. Syntax frameList = window.frames;   frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation. frameList === window evaluates to true. Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[ 0 ] is the same thing as document.getElementsByTagName( \"iframe\" )[ 0 ].contentWindow). For more details about the returned value, refer to this thread on mozilla.dev.platform.  Example \r           var frames = window.frames; \/\/ or \/\/ var frames = window.parent.frames; for (var i = 0; i < frames.length; i++) {    \/\/ do something with each subframe as frames[i]   frames[i].document.body.style.background = \"red\"; }\r          Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.fullScreen","title":"window.fullScreen","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Storage","title":"DOM Storage","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.innerHeight","title":"window.innerHeight","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.innerWidth","title":"window.innerWidth","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.length","title":"window.length","description":"Summary  Returns the number of frames (either frame or iframe elements) in the window.   Syntax  framesCount = window.length;   framesCount is the number of frames.   Example  if (window.length)   \/\/ this is a document with subframes   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.location","title":"window.location","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.locationbar","title":"window.locationbar","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.menubar","title":"window.menubar","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.mozAnimationStartTime","title":"window.mozAnimationStartTime","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.messageManager","title":"window.messageManager","description":"Returns the message manager object for this window. See The message manager for details. Syntax messageManager = window.messageManager   Specification Not part of any specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.mozInnerScreenY","title":"window.mozInnerScreenY","description":"Syntax var screenY = window.mozInnerScreenY; Value screenY stores the window.mozInnerScreenY property value. The window.mozInnerScreenY property is a floating point, read-only value; it has no default value. Standards info Not part of any W3C technical specification or recommendation. See also  window.mozInnerScreenX  window.mozScreenPixelsPerCSSPixel"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.mozInnerScreenX","title":"window.mozInnerScreenX","description":"Syntax var screenX = window.mozInnerScreenX; Value screenX stores the window.mozInnerScreenX property value. The window.mozInnerScreenX property is a floating point, read-only value; it has no default value. Standards info Not part of any W3C technical specification or recommendation. See also  window.mozInnerScreenY  window.mozScreenPixelsPerCSSPixel"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.name","title":"window.name","description":"Gets\/sets the name of the window. Syntax var string = window.name; window.name = string;  Example window.name = \"lab_view\";  Notes The name of the window is used primarily for setting targets for hyperlinks and forms. Windows do not need to have names. Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.mozPaintCount","title":"window.mozPaintCount","description":"Syntax var paintCount = window.mozPaintCount; Value paintCount stores the window.mozPaintCount property value. The window.mozPaintCount value is a long long, and starts at zero when the document is first created, incrementing by one each time the document is painted. Standards info Not part of any W3C technical specification or recommendation."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator","title":"window.navigator","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.opener","title":"window.opener","description":"Returns a reference to the window that opened this current window. Syntax var objRef = window.opener;  Example \r           if (window.opener != indexWin) {      referToTop(window.opener);  }\r         Notes When a window is opened from another window, it maintains a reference to that first window as window.opener. If the current window has no opener, this method returns NULL. Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.outerWidth","title":"window.outerWidth","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.outerHeight","title":"window.outerHeight","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollX","title":"window.scrollX","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.parent","title":"window.parent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollY","title":"window.scrollY","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.pkcs11","title":"window.pkcs11","description":"Formerly returned the pkcs11 object, which could be used to install drivers and other software associated with the pkcs11 protocol. In newer versions this property is null. Syntax objRef = window.pkcs11   Example   window.pkcs11.addModule(sMod, secPath, 0, 0);  Notes See nsIDOMPkcs11 for more information about how to manipulate pkcs11 objects. Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen","title":"window.screen","description":"Returns a reference to the screen object associated with the window. Syntax var screenObj = window.screen;  Example  if (screen.pixelDepth < 8) {   \/\/ use low-color version of page } else {    \/\/ use regular, colorful page }  Notes The screen object is a special object for inspecting properties of the screen on which the current window is being rendered. This object has the following properties:  availTop Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.   availLeft Returns the first available pixel available from the left side of the screen.   availHeight Specifies the height of the screen, in pixels, minus permanent or semipermanent user interface features displayed by the operating system, such as the Taskbar on Windows.   availWidth Returns the amount of horizontal space in pixels available to the window.   colorDepth Returns the color depth of the screen.   height Returns the height of the screen in pixels.   left Returns the distance in pixels from the left side of the main screen to the left side of the current screen.   pixelDepth Gets the bit depth of the screen.   top Returns the distance in pixels from the top side of the current screen.   width Returns the width of the screen.  Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.availTop","title":"window.screen.availTop","description":"Summary  Specifies the y-coordinate of the first pixel that is not allocated to permanent or semipermanent user interface features.   Syntax  iAvail = window.screen.availTop   Example  setY = window.screen.height - window.screen.availTop; setX = window.screen.width - window.screen.availLeft; window.moveTo(setX, setY);   Notes  In most cases, this property returns 0.   Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.availHeight","title":"window.screen.availHeight","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.availLeft","title":"window.screen.availLeft","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.colorDepth","title":"window.screen.colorDepth","description":"Summary  Returns the color depth of the screen.   Syntax  bitDepth = window.screen.colorDepth   Example  \/\/ check the color depth of the screen if ( window.screen.colorDepth < 8) {     \/\/ use low-color version of page } else {      \/\/ use regular, colorful page }   Notes  See also window.screen.pixelDepth.   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.availWidth","title":"window.screen.availWidth","description":"Summary  Returns the amount of horizontal space in pixels available to the window.   Syntax  iAvail = window.screen.availWidth   Example  \/\/ example code here   Notes  no notes   Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.height","title":"window.screen.height","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.left","title":"window.screen.left","description":"Summary  Returns the distance in pixels from the left side of the main screen to the left side of the current screen.   Syntax  var left = window.screen.left;   Notes  See also window.screen.top.   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.pixelDepth","title":"window.screen.pixelDepth","description":"Summary  Returns the bit depth of the screen.   Syntax  depth = window.screen.pixelDepth   Example  \/\/ if there is not adequate bit depth \/\/ choose a simpler color if ( window.screen.pixelDepth > 8 ) {    document.style.color = \"#FAEBD7\"; } else {    document.style.color = \"#FFFFFF\"; }   Notes  See also window.screen.colorDepth.   Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.top","title":"window.screen.top","description":"Summary  Returns the distance in pixels from the top side of the current screen.   Syntax  var Itop = window.screen.top     Notes  See also window.screen.left.   Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screen.width","title":"window.screen.width","description":"Summary  Returns the width of the screen.   Syntax  lWidth = window.screen.width   Example  \/\/ crude way to check that the screen is at 1024x768 if (window.screen.width > 1000) {     \/\/ resolution is below 10 x 7 }   Notes  Note that not all of the width given by this property may be available to the window itself. When other widgets occupy space that cannot be used by the window object, there is a difference in window.screen.width and window.screen.availWidth. See also window.screen.height.   Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screenY","title":"window.screenY","description":"Returns the vertical distance of the top border of the user's browser from the top edge of the screen.  Syntax  lLoc = window.screenY   Parameters  lLoc is the number of pixels from the top of the screen.  Notes  See also window.screenX.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.screenX","title":"window.screenX","description":"Returns the horizontal distance of the left border of the user's browser from the left side of the screen.  Syntax  lLoc = window.screenX   Parameters  lLoc is the number of pixels from the left side the screen.  Notes  See also window.screenY.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollbars","title":"window.scrollbars","description":"Returns the scrollbars object, whose visibility can checked. Syntax objRef = window.scrollbars   Example The following complete HTML example shows way that the visible property of the scrollbars object is used.  <html> <head>   <title>Various DOM Tests<\/title>   <script>     var visibleScrollbars = window.scrollbars.visible;   <\/script> <\/head> <body>   <p>Various DOM Tests<\/p> <\/body> <\/html>  See also: window.locationbar , window.menubar , window.personalbar , window.statusbar , window.toolbar Specification DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollMaxX","title":"window.scrollMaxX","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollMaxY","title":"window.scrollMaxY","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.self","title":"window.self","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.sidebar","title":"window.sidebar","description":"Returns a sidebar object, which contains several methods for registering add-ons with browser. Example  window.sidebar.addPanel(\"Google\", \"http:\/\/www.google.com\/\", \"\");  Note: the third empty parameter is required! Notes The sidebar object returned has the following methods:    Method Description   addPanel(title, contentURL, customizeURL) Adds a sidebar panel. See Creating a Firefox sidebar for details on sidebars in Firefox 2 and later.   addPersistentPanel(title, contentURL, customizeURL) Adds a sidebar panel, which is able to work in the background. This only works in SeaMonkey or Firefox 1.x; Firefox 2 and later will just do addPanel().   addSearchEngine(engineURL, iconURL, suggestedTitle, suggestedCategory) Installs a search engine. See Adding search engines from web pages for details.   addMicrosummaryGenerator(generatorURL)  Requires Gecko 1.8.1  Installs a microsummary generator.    Specification Mozilla-specific. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.status","title":"window.status","description":"Sets the text in the status bar at the bottom of the browser or returns the previously set text. This property does not work in default configuration of Firefox and some other browsers: setting window.status has no effect on the text displayed in the status bar. To allow scripts change the the status bar text, the user must set the dom.disable_window_status_change preference to false in the about:config screen.    Gecko 1.9.1 note(Firefox 3.5 \/ Thunderbird 3.0 \/ SeaMonkey 2.0)   Starting in Gecko 1.9.1 (Firefox 3.5 \/ Thunderbird 3.0 \/ SeaMonkey 2.0) , users can let websites change the status text by enabling the \"Change status bar\" preference in the Advanced options panel.  Syntax window.status = string;var value = window.status;  Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.statusbar","title":"window.statusbar","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.toolbar","title":"window.toolbar","description":"Returns the toolbar object, whose visibility can be toggled in the window.  Syntax  objRef = window.toolbar  Example  The following complete HTML example shows way that the visible property of the various \"bar\" objects is used, and also the change to the privileges necessary to write to the visible property of any of the bars on an existing window.     <html>   <head>    <title>Various DOM Tests<\/title>    <script>     \/\/ changing bar states on the existing window     netscape.security.PrivilegeManager.enablePrivilege(\"UniversalBrowserWrite\");     window.toolbar.visible=!window.toolbar.visible;    <\/script>   <\/head>   <body>    <p>Various DOM Tests<\/p>   <\/body>  <\/html>  Notes  When you load the example page above, the browser displays the following dialog:  To toggle the visibility of these bars, you must either sign your scripts or enable the appropriate privileges, as in the example above. Also be aware that dynamically updating the visibilty of the various toolbars can change the size of the window rather dramatically, and may affect the layout of your page. See also: window.locationbar, window.menubar, window.personalbar, window.scrollbars, window.statusbar  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.top","title":"window.top","description":"Returns a reference to the topmost window in the window hierarchy. Syntax  var topWindow = window.top;  Notes Where the window.parent property returns the immediate parent of the current window, window.top returns the topmost window in the hierarchy of window objects. This property is especially useful when you are dealing with a window that is in a subframe of a parent or parents, and you want to get to the top-level frameset. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     Gecko notes   Gecko 6.0 note(Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3)   Starting in Gecko 6.0, this property is correctly read only.  Gecko notes   Gecko 6.0 note(Firefox 6.0 \/ Thunderbird 6.0 \/ SeaMonkey 2.3)   Starting in Gecko 6.0, this property is correctly read only.  Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.URL","title":"window.URL","description":"Methods  window.URL.createObjectURL()  Creates a new object URL. window.URL.revokeObjectURL()  Revokes an object URL previously created using window.URL.createObjectURL() .  Specification URL object as specified in the File API draft"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.URL.createObjectURL","title":"window.URL.createObjectURL","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.URL.revokeObjectURL","title":"window.URL.revokeObjectURL","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.window","title":"window.window","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.alert","title":"window.alert","description":"Display an alert dialog with the specified content and an OK button. Syntax window.alert(message);   message is a string of text you want to display in the alert dialog, or, alternatively, an object that is converted into a string and displayed.  Example window.alert(\"Hello world!\");  produces: Notes The alert dialog should be used for messages which do not require any response on the part of the user, other than the acknowledgement of the message.  Dialog boxes are modal windows - they prevent the user from accessing the rest of the program's interface until the dialog box is closed. For this reason, you should not overuse any function that creates a dialog box (or modal window). Chrome users (e.g. extensions) should use methods of nsIPromptService instead. Specification DOM Level 0. Not part of any standard.     See also confirm, prompt For chrome see alert() and alertCheck()"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.atob","title":"window.atob","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.back","title":"window.back","description":"Returns the window to the previous item in the history.  Syntax  window.back()   Example   function goBack() {     if ( canGoBack )        window.back(); }  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.btoa","title":"window.btoa","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.blur","title":"window.blur","description":"Shifts focus away from the window.  Syntax  window.blur()   Example  window.blur();  Notes  The window.blur() method is the programmatic equivalent of the user shifting focus away from the current window.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.captureEvents","title":"window.captureEvents","description":"Obsolete   This method is obsolete as of Gecko 1.9, in favor of W3C DOM Events methods (see addEventListener). The support for this method has been removed from Gecko 1.9.  Registers the window to capture all events of the specified type. Syntax  window.captureEvents(eventType)   eventType is a combination of the following values: Event.ABORT, Event.BLUR, Event.CLICK, Event.CHANGE, Event.DBLCLICK, Event.DRAGDDROP, Event.ERROR, Event.FOCUS, Event.KEYDOWN, Event.KEYPRESS, Event.KEYUP, Event.LOAD, Event.MOUSEDOWN, Event.MOUSEMOVE, Event.MOUSEOUT, Event.MOUSEOVER, Event.MOUSEUP, Event.MOVE, Event.RESET, Event.RESIZE, Event.SELECT, Event.SUBMIT, Event.UNLOAD. Example  <html>  <script>   function reg() {    window.captureEvents(Event.CLICK);    window.onclick = page_click;   }    function page_click() {    alert('page click event detected!');   }  <\/script>   <body onload=\"reg();\">  <p>click anywhere on this page.<\/p>  <\/body> <\/html>  Notes Events raised in the DOM by user activity (such as clicking buttons or shifting focus away from the current document) generally pass through the high-level window and document objects first before arriving at the object that initiated the event. When you call the captureEvents() method on the window, events of the type you specify (for example, Event.CLICK) no longer pass through to \"lower\" objects in the hierarchy. In order for events to \"bubble up\" in the way that they normally do, you must call window.releaseEvents() (  Obsolete) on the window to keep it from trapping events. Note that you can pass a list of events to this method using the following syntax: window.caputureEvents(Event.KEYPRESS | Event.KEYDOWN | Event.KEYUP). Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.clearImmediate","title":"window.clearImmediate","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.clearInterval","title":"window.clearInterval","description":"Cancels repeated action which was set up using setInterval(). Syntax window.clearInterval(intervalID)  intervalID is the identifier of the repeated action you want to cancel. This ID is returned from setInterval(). Example See the setInterval() example. Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.clearTimeout","title":"window.clearTimeout","description":"Clears the delay set by window.setTimeout(). Syntax  window.clearTimeout(timeoutID)  where timeoutID is the ID of the timeout you wish to clear, as returned by window.setTimeout(). Example Run the script below in the context of a web page and click on the page once. You'll see a message popping up in a second. If you keep clicking on the page once in a second, the alert never appears.  var alarm = {   remind: function(aMessage) {     alert(aMessage);     delete this.timeoutID;   },    setup: function() {     this.cancel();     var self = this;     this.timeoutID = window.setTimeout(function(msg) {self.remind(msg);}, 1000, \"Wake up!\");   },    cancel: function() {     if(typeof this.timeoutID == \"number\") {       window.clearTimeout(this.timeoutID);       delete this.timeoutID;     }   } }; window.onclick = function() { alarm.setup() };  Notes Passing an invalid ID to clearTimeout does not have any effect (and doesn't throw an exception). Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.close","title":"window.close","description":"Summary  Closes the current window, or a referenced window.   Syntax  window.close();   Description  When this method is called, the referenced window is closed. This method is only allowed to be called for windows that were opened by a script using the window.open method. If the window was not opened by a script, the following error appears in the JavaScript Console: Scripts may not close windows that were not opened by script.   Examples   Closing a window opened with window.open()   <script type=\"text\/javascript\"> \/\/Global var to store a reference to the opened window var openedWindow;  function openWindow() {   openedWindow = window.open('moreinfo.htm'); } function closeOpenedWindow() {   openedWindow.close(); } <\/script>   Closing the current window   <script type=\"text\/javascript\"> function closeCurrentWindow() {   window.close(); } <\/script>   Closing a window opened with window.open()   <script type=\"text\/javascript\"> \/\/Global var to store a reference to the opened window var openedWindow;  function openWindow() {   openedWindow = window.open('moreinfo.htm'); } function closeOpenedWindow() {   openedWindow.close(); } <\/script>   Closing the current window   <script type=\"text\/javascript\"> function closeCurrentWindow() {   window.close(); } <\/script>   Specification  DOM Level 0. Not part of any standard.       Additional Reference  MSDN: window.close Method"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.confirm","title":"window.confirm","description":"Summary  Displays a modal dialog with a message and two buttons, OK and Cancel.   Syntax  result = window.confirm(message);   message is the string to be displayed in the dialog.  result is a boolean value indicating whether OK or Cancel was selected (true means OK).   Example  if (window.confirm(\"Want to see my mood ring?\")) {      window.open(\"mood.html\", \"mood ring\", \"\"); }   Notes   Dialog boxes are modal windows - they prevent the user from accessing the rest of the program's interface until the dialog box is closed. For this reason, you should not overuse any function that creates a dialog box (or modal window). Chrome users (e.g. extensions) should use methods of nsIPromptService instead.   Specification  DOM Level 0. Not part of any standard.       See also  alert, prompt"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.dump","title":"window.dump","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.escape","title":"window.escape","description":"Encodes a string, replacing certain characters with a hexadecimal escape sequence. Syntax escaped = escape(regular);   escaped is the encoded string. regular is a regular string.  Example alert(escape(\"http:\/\/www.cnn.com\")); \/\/ displays: http%3A\/\/www.cnn.com  Notes The escape() method converts special characters (any characters that are not regular text or numbers) into hexadecimal characters, which is especially necessary for setting the values of cookies. Also useful when passing name=value pairs in the URL of a GET request, or an AJAX GET\/POST request. See also window.unescape() , encodeURIComponent().Specification DOM Level 0. Not part of any standard.     Mentioned in a non-normative section of ECMA-262."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.focus","title":"window.focus","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.forward","title":"window.forward","description":"Moves the window one document forward in the history.  Syntax  window.forward()   Example  function goForward() { if ( canGoForward) window.forward(); }  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.getAttention","title":"window.getAttention","description":"Attempts to get the user's attention. How this happens varies based on OS and window manager.   Syntax  window.getAttention();   Notes  On Windows, the taskbar button for the window flashes, if this hasn't been disabled by the user. On Linux, the behaviour varies from window manager to window manager - some flash the taskbar button, others focus the window immediately. This may be configurable as well. On Macintosh, the icon in the upper right corner of the desktop flashes. The function is disabled for web content. Neither Gecko nor Internet Explorer supports this feature now for web content. getAttention will still work when used from chrome in a Gecko application.   Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.find","title":"window.find","description":"Finds a string in a window. Syntax window.find(aString, aCaseSensitive, aBackwards, aWrapAround,             aWholeWord, aSearchInFrames, aShowDialog);   aString The text string for which to search. aCaseSensitive Boolean value. If true, specifies a case-sensitive search. aBackwards Boolean. If true, specifies a backward search. aWrapAround Boolean. If true, specifies a wrap around search. aWholeWord  Unimplemented  Boolean. If true, specifies a whole word search. This is not implemented; see   bug 481513 . aSearchInFrames Boolean. If true, specifies a search in frames. aShowDialog Boolean. If true, specifies a show Dialog.  Returns true if the string is found; otherwise, false. Example Notes Specification DOM Level 0. Not part of any standard.     This was added by with   bug 9550 ."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.getComputedStyle","title":"window.getComputedStyle","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.home","title":"window.home","description":"Returns the window to the home page.  Syntax  window.home()   Example   function goHome() {   window.home(); }  Specification DOM Level 0. Not part of specification. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support -- 1.0 (1.7 or earlier)  -- (Supported) --         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support -- ? -- ? --     Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support -- 1.0 (1.7 or earlier)  -- (Supported) --         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support -- ? -- ? --"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.matchMedia","title":"window.matchMedia","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.moveTo","title":"window.moveTo","description":"Moves the window to the specified coordinates.  Syntax  window.moveTo(x, y)   Parameters  x is the horizontal coordinate to be moved to. y is the vertical coordinate to be moved to.  Example    function origin() {     \/\/ moves to top left corner of screen     window.moveTo(0, 0)  }  Notes  This function moves the window absolutely while window.moveBy moves the window relative to its current location.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.moveBy","title":"window.moveBy","description":"Moves the current window by a specified amount.  Syntax  window.moveBy(deltaX, deltaY)   Parameters  deltaX is the amount of pixels to move the window horizontally. deltaY is the amount of pixels to move the window vertically.  Example    function budge() {     moveBy(10, -10);  }  Notes  You can use negative numbers as parameters for this function. This function makes a relative move while window.moveTo makes an absolute move.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.mozRequestAnimationFrame","title":"window.requestAnimationFrame","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.open","title":"window.open","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.openDialog","title":"window.openDialog","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.postMessage","title":"window.postMessage","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.print","title":"window.print","description":"Opens the Print Dialog to print the current document.  Syntax  window.print()   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.prompt","title":"window.prompt","description":"Displays a dialog with a message prompting the user to input some text. Syntax result = window.prompt(text, value);   result is a string containing the text entered by the user, or the value null. text is a string of text to display to the user. This parameter are optional and can be omitted if there is nothing to show in the prompt window. value is a string containing the default value displayed in the text input field. It is an optional parameter.  Example  var sign = prompt(\"What's your sign?\"); if (sign.toLowerCase() == \"scorpio\")    alert(\"Wow! I'm a Scorpio too!\"); \/\/ there are many way to use prompt feature var sign = window.prompt(); \/\/ open the blank prompt window var sign = prompt();       \/\/  open the blank prompt window var sign = window.prompt('Are you feel lucky'); \/\/ open the window with Text \"Are you feel lucky\" var sign = window.prompt('Are you feel lucky','sure'); \/\/ open the window with Text \"Are you feel lucky\" and default value is \"sure\"  When the user clicks the OK button, text entered in the input field is returned. If the user clicks OK without entering any text, an empty string is returned. If the user clicks the Cancel button, this function returns null. Notes A prompt dialog contains a single-line textbox, a Cancel button, and an OK button, and returns the (possibly empty) text the user entered into that textbox.  Dialog boxes are modal windows: they prevent the user from accessing the rest of the program's interface until the dialog box is closed. For this reason, you should not overuse any function that creates a dialog box (or modal window). Chrome users (e.g. extensions) should use methods of nsIPromptService instead. Specification DOM Level 0. Not part of any standard.     See also alert, confirm"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.releaseEvents","title":"window.releaseEvents","description":"Obsolete  Releases the window from trapping events of a specific type.   Syntax  window.releaseEvents(eventType)   eventType is a combination of the following values: Event.ABORT, Event.BLUR, Event.CLICK, Event.CHANGE, Event.DBLCLICK, Event.DRAGDDROP, Event.ERROR, Event.FOCUS, Event.KEYDOWN, Event.KEYPRESS, Event.KEYUP, Event.LOAD, Event.MOUSEDOWN, Event.MOUSEMOVE, Event.MOUSEOUT, Event.MOUSEOVER, Event.MOUSEUP, Event.MOVE, Event.RESET, Event.RESIZE, Event.SELECT, Event.SUBMIT, Event.UNLOAD.   Example  window.releaseEvents(Event.KEYPRESS)   Notes   This method is obsolete as of Gecko 1.9, in favor of W3C DOM Events methods (see addEventListener). The support for this method has been removed from Gecko 1.9.   Note that you can pass a list of events to this method using the following syntax: window.releaseEvents(Event.KEYPRESS | Event.KEYDOWN | Event.KEYUP). See also window.captureEvents (  Obsolete).   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scroll","title":"window.scroll","description":"Scrolls the window to a particular place in the document.  Syntax  window.scroll(x-coord, y-coord)   Parameters  x-coord is the pixel along the horizontal axis of the document that you want displayed in the upper left. y-coord is the pixel along the vertical axis of the document that you want displayed in the upper left.  Example    \/\/ put the 100th vertical pixel at the top of the window   <button onClick=\"scroll(0, 100);\">click to scroll down 100 pixels<\/button>  Notes  window.scrollTo is effectively the same as this method. For scrolling a particular distance repeatedly, use the window.scrollBy. Also see window.scrollByLines, window.scrollByPages.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollBy","title":"window.scrollBy","description":"Scrolls the document in the window by the given amount.  Syntax  window.scrollBy(X,Y);  Parameters  X is the offset in pixels to scroll horizontally. Y is the offset in pixels to scroll vertically.  Positive co-ordinates will scroll to the right and down the page. Negative values will scroll to the left and up the page.  Example  \/\/ scroll one page  window.scrollBy(0, window.innerHeight);  Notes  window.scrollBy scrolls by a particular amount where window.scroll scrolls to an absolute position in the document. See also window.scrollByLines, window.scrollByPages  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollByLines","title":"window.scrollByLines","description":"Scrolls the document by the given number of lines.  Syntax  window.scrollByLines(lines)   Parameters  lines is the number of lines to scroll the document by. lines may be a positive or negative integer.  Example  \/\/ scroll down the document by 5 lines. <button onclick=\"scrollByLines(5);\">down 5 lines<\/button>  \/\/ scroll up the document by 5 lines. <button onclick=\"scrollByLines(-5);\">up 5 lines<\/button>  Notes  See also window.scrollBy, window.scrollByPages.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollByPages","title":"window.scrollByPages","description":"Scrolls the current document by the specified number of pages.  Syntax  window.scrollByPages(pages)   Parameters  pages is the number of pages to scroll. pages may be a positive or negative integer.  Example   \/\/ scroll down the document by 1 page  window.scrollByPages(1);  \/\/ scroll up the document by 1 page  window.scrollByPages(-1);  Notes  See also window.scrollBy, window.scrollByLines, window.scroll, window.scrollTo.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.scrollTo","title":"window.scrollTo","description":"Scrolls to a particular set of coordinates in the document.  Syntax  window.scrollTo(x-coord, y-coord)   Parameters  x-coord is the pixel along the horizontal axis of the document that you want displayed in the upper left. y-coord is the pixel along the vertical axis of the document that you want displayed in the upper left.  Example   window.scrollTo(0, 1000);  Notes  This function is effectively the same as window.scroll. For relative scrolling, see window.scrollBy, window.scrollByLines, and window.scrollByPages.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.setCursor","title":"window.setCursor","description":"Changes the cursor for the current window. Example  function setBusyCursor(enable) {   window.setCursor(enable ? \"wait\" : \"auto\"); }  Notes The cursor isn't reset until it's set back to auto. This function is unavailable to web pages, which can use CSS cursor property instead. It is a part of ChromeWindow interface. Specification DOM Level 0. Not part of any specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.setImmediate","title":"window.setImmediate","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.setInterval","title":"window.setInterval","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.setTimeout","title":"window.setTimeout","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.sizeToContent","title":"window.sizeToContent","description":"Sizes the window according to its content. The DOM content should be loaded when this function is called, for example after the DOMContentLoaded event.  Syntax  window.sizeToContent()   Example  window.sizeToContent();  Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.stop","title":"window.stop","description":"This method stops window loading.  Syntax  window.stop()   Example  window.stop();  Notes  The stop() method is exactly equivalent to clicking the stop button in the browser. Because of the order in which scripts are loaded, the stop() method cannot stop the document in which it is contained from loading, but it will stop the loading of large images, new windows, and other objects whose loading is deferred.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.unescape","title":"window.unescape","description":"Summary  Decodes a value that has been encoded in hexadecimal (e.g., a cookie).  Syntax  regular = window.unescape(escaped)  regular is the decoded string. escaped is the encoded string.   Example  alert(unescape(\"%5C\")); \/\/ displays \"\\\"   Notes  See also escape, decodeURIComponent.   Specification  DOM Level 0. Not part of any standard.     Mentioned in a non-normative section of ECMA-262."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.updateCommands","title":"window.updateCommands","description":"Summary  Updates the state of commands of the current chrome window (UI).   Syntax  window.updateCommands(\"sCommandName\")   Parameters   sCommandName is a particular string which describes what kind of update event this is (e.g. whether we are in bold right now).   Notes  This enables or disables items (setting or clearing the \"disabled\" attribute on the command node as appropriate), or ensures that the command state reflects the state of the selection by setting current state information in the \"state\" attribute of the XUL command nodes.   Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onabort","title":"window.onabort","description":"Summary  An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari) TODO define what \"abort\" is. Closing the window via window manager? Stopping the load of the page? By which means and reasons (user, network\/server)? At which stages would it fire \/ be catched? For IE, onabort is only available with img tags.   Syntax  window.onabort = funcRef  funcRef is a reference to a function.   Example  window.onabort = function() {   alert(\"Load aborted.\"); }   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onbeforeunload","title":"window.onbeforeunload","description":"An event that fires before the unload event when the page is unloaded. Syntax  window.onbeforeunload = funcRef   funcRef is a reference to a function or a function expression The function should assign a string value to the returnValue property of the Event object and return the same string Note that in Firefox 4 and later the returned string is not displayed to the user. See Bug 588292.  Example  window.onbeforeunload = function (e) {   e = e || window.event;    \/\/ For IE and Firefox prior to version 4   if (e) {     e.returnValue = 'Any string';   }    \/\/ For Safari   return 'Any string'; };  Specification There is no public specification. onbeforeunload was introduced by Microsoft IE 4 and has subsequently been copied by other browsers. MSDN-onbeforeunload Event"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onblur","title":"window.onblur","description":"Summary  The onblur property can be used to set the blur handler on the window, which is triggered when the window loses focus.   Syntax  window.onblur = funcRef;   funcRef is a reference to the function to be executed.   Example   <html> <head>  <title>onblur test<\/title>  <script type=\"text\/javascript\">  window.onblur = blurText;  function blurText() {  alert(\"blur event detected!\");  \/\/ remove the event to stop an infinite loop!  window.onblur = ''; } <\/script> <\/head>  <body> <p>click on another window to fire the blur event for this browser window<\/p> <\/body> <\/html>   Notes   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onchange","title":"window.onchange","description":"An event handler for change events sent to the window.  Syntax   window.onchange = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onchange = resetThatServerThing  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onclick","title":"window.onclick","description":"Called when the user clicks the mouse button while the cursor is in the window. This event is fired for any mouse button pressed; you can look at the event properties to find out which button was pressed and where.   Syntax  window.onclick = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onclick = doPopup;   <html> <head>  <title>onclick test<\/title>  <script type=\"text\/javascript\">  window.onclick = clickPage;  function clickPage() {  alert(\"click event detected!\"); } <\/script> <\/head>  <body> <p>click and release the LH mouse button on this page.<\/p> <\/body> <\/html>   Notes  The click event is raised when the user clicks on the window.  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onclose","title":"window.onclose","description":"An event handler for close events sent to the window. (Not available with Firefox 2 or Safari)  Syntax   window.onclose = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onclose = resetThatServerThing  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.oncontextmenu","title":"window.oncontextmenu","description":"Summary  An event handler property for right-click events on the window.   Syntax  window.oncontextmenu = funcRef; \/\/funcRef is referance of a function to be called   Example  window.oncontextmenu = function () {    return false; } \/\/this will disable right click on the page"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.ondevicemotion","title":"window.ondevicemotion","description":"An event handler for device motion events sent to the window. Syntax window.ondevicemotion = funcRef;  Parameters  funcRef is a reference to a function. This function receives a DeviceMotionEvent  object describing the motion that occurred.  Example Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? -- ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 6.0 (6.0)  ? ? ?     See also  DeviceMotionEvent  window.ondeviceorientation  Detecting device orientation  Specification  Device Orientation Event Specification"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.ondeviceorientation","title":"window.ondeviceorientation","description":"An event handler for device orientation events sent to the window. Syntax window.ondeviceorientation = funcRef;  Parameters  funcRef is a reference to a function. The function receives a DeviceOrientationEvent  object describing the device orientation change that occurred.  Example Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? -- ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 6.0 (6.0)  ? ? ?     See also  DeviceOrientationEvent  window.ondeviceorientation  Detecting device orientation Specification  Device Orientation Event Specification"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.ondragdrop","title":"window.ondragdrop","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onerror","title":"window.onerror","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onfocus","title":"window.onfocus","description":"An event handler for focus events sent to the window.  Syntax   window.onfocus = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onfocus = startTimer;   Notes  The focus event is raised when the user sets focus on the current window.  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onhashchange","title":"window.onhashchange","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onkeydown","title":"window.onkeydown","description":"An event handler for the keydown event on the window.  Syntax   window.onkeydown = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onkeydown = doFunc;   <html> <head>  <title>onkeydown test<\/title>  <script type=\"text\/javascript\">  window.onkeydown = keydown;  function keydown() {  alert(\"keydown event detected!\"); } <\/script> <\/head>  <body> <p>press and hold down any key to fire the keydown event.<\/p> <\/body> <\/html>   Notes  The keydown event is raised when the user presses any key.  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onkeypress","title":"window.onkeypress","description":"An event handler for the keypress event on the window.  Syntax   window.onkeypress = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onkeypress = doFunc;   <html> <head>  <title>onkeypress test<\/title>  <script type=\"text\/javascript\">  window.onkeypress = keypress;  function keypress() {  alert(\"keypress event detected!\"); } <\/script> <\/head>  <body> <p>press and release any key to fire the keypress event.<\/p> <\/body> <\/html>   Notes  The keypress event is raised when the user presses and releases any key on the keyboard.   Under FF 1.0.5.4 this event fires before the keyup event is detected, i.e. it appears to work exactly like onkeydown.  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onkeyup","title":"window.onkeyup","description":"An event handler for the keyup event on the window.  Syntax  window.onkeyup = funcRef;  Parameters   funcRef is a reference to a function.   Example  window.onkeyup = doFunc;   <html> <head>  <title>onkeyup test<\/title>  <script type=\"text\/javascript\">  window.onkeyup = keyup;  function keyup() {  alert(\"keyup event detected!\"); } <\/script> <\/head>  <body> <p>press and hold any key, then release it to fire the keyup event.<\/p> <\/body> <\/html>   Notes  The keyup event is raised when a key that has been pressed is released.  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onload","title":"window.onload","description":"An event handler for the load event of a window . Syntax  window.onload = funcRef;   funcRef is the handler function to be called when the window's load event fires.  Examples \r           window.onload = function() {   init();   doSomethingElse(); };\r          \r           <!doctype html>   <html>   <head>     <title>onload test<\/title>     <script>       function load() {         alert(\"load event detected!\");       }       window.onload = load;     <\/script>   <\/head>   <body>     <p>The load event fires when the document has finished loading!<\/p>   <\/body> <\/html>\r          Notes The load event fires at the end of the document loading process. At this point, all of the objects in the document are in the DOM, and all the images and sub-frames have finished loading. There are also Gecko-Specific DOM Events like DOMContentLoaded and DOMFrameContentLoaded (which can be handled using element.addEventListener() ) which are fired after the DOM for the page has been constructed, but do not wait for other resources to finish loading. Specification This event handler is specified in HTML. See also  DOMContentLoaded event in Listening to events: Simple DOM events"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onmousedown","title":"window.onmousedown","description":"An event handler for the mousedown event on the window. Syntax window.onmousedown = funcRef;  Parameters  funcRef is a reference to a function.  Example window.onmousedown = doFunc;  <html> <head>  <title>onmousedown test<\/title>  <script type=\"text\/javascript\">  window.onmousedown = mousedown;  function mousedown() {  alert(\"mousedown event detected!\"); } <\/script> <\/head>  <body> <p>click and hold down the LH mouse button<br \/>  on the page to fire the mousedown event.<\/p> <\/body> <\/html>  Notes The mousedown event is raised when the user clicks the mouse button anywhere in the document. Specification Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onmouseout","title":"window.onmouseout","description":"An event handler for the mouseout event on the window.  Syntax   window.onmouseout = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onmouseout = doFunc;   <html> <head>  <title>onmouseout test<\/title>  <style type=\"text\/css\"> body { border: 1px solid blue; } .my_box { border: 1px solid red; } p { border: 1px solid green; } <\/style>  <script type=\"text\/javascript\">  window.onmouseout = mouseout;  function mouseout() {  alert(\"mouseout event detected!\"); } <\/script> <\/head>  <body> <div class=\"my_box\"> <p>move the mouse pointer away from the element it is on<br \/> to fire the mouseout event.<\/p> <\/div> <\/body> <\/html>   Notes  The mouseout event is raised when the mouse leaves the area of the specified element (in this case the window itself).  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onmousemove","title":"window.onmousemove","description":"An event handler for the mousemove event on the window.   Syntax  window.onmousemove = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onmousemove = doFunc;   <html> <head>  <title>onmousemove test<\/title>  <script type=\"text\/javascript\">  window.onmousemove = mousemoved;  function mousemoved() {  alert(\"mousemove event detected!\"); } <\/script> <\/head>  <body> <p>move the mouse pointer anywhere on the page<br \/> to fire the mousemove event.<\/p> <\/body> <\/html>   Notes  The mousemove event fires when the user moves the mouse pointer by 1 pixel or more in any direction in the browser window.  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onmouseover","title":"window.onmouseover","description":"An event handler for the mouseover event on the window.   Syntax  window.onmouseover = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onmouseover = doFunc;   <html> <head>  <title>onmouseover test<\/title>  <style type=\"text\/css\"> .my_box { border: 1px solid red; } <\/style>  <script type=\"text\/javascript\">  window.onmouseover = mouseover;  function mouseover() {  alert(\"mouseover event detected!\"); } <\/script> <\/head>  <body> <div class=\"my_box\"> <p>move the mouse pointer to this div element,<br \/> or onto the status bar and back into the main window< br \/> to fire the mouseover event.<\/p> <\/div> <\/body> <\/html>   Notes  The mouseover event is raised when the mouse pointer moves over the current element (in this case the window itself).  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onmouseup","title":"window.onmouseup","description":"An event handler for the mouseup event on the window. Syntax window.onmouseup = funcRef;  Parameters  funcRef is a reference to a function.  Example window.onmouseup = doFunc;  <html> <head>  <title>onmouseup test<\/title>  <script type=\"text\/javascript\">  window.onmouseup = mouseup;  function mouseup() {  alert(\"mouseup event detected!\"); } <\/script> <\/head>  <body> <p>click on the page with the LH mouse button, and hold down for a few seconds, then release the button. The mouseup event fires when you release the mouse button.<\/p> <\/body> <\/html>  Notes The mouseup event is raised when the user unclicks the mouse button anywhere in the document. Specification Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onmozbeforepaint","title":"window.onmozbeforepaint","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onpaint","title":"window.onpaint","description":"Summary  An event handler for the paint event on the window. Not working in Gecko-based applications currently, see Notes section!  Syntax  window.onpaint = funcRef;   funcRef is a handler function.   Notes  onpaint doesn't work currently, and it is questionable whether this event is going to work at all, see   bug 239074 . The paint event is raised when the window is rendered. This event occurs after the load event for a window, and reoccurs each time the window needs to be re-rendered, as when another window obscures it and is then cleared away.  Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onpopstate","title":"window.onpopstate","description":"An event handler for the popstate event on the window. A popstate event is dispatched to the window every time the active history entry changes. If the history entry being activated was created by a call to history.pushState() or was affected by a call to history.replaceState(), the popstate event's state property contains a copy of the history entry's state object. Syntax  window.onpopstate = funcRef;   funcRef is a handler function.  The popstate event As an example, a page at http:\/\/example.com\/example.html running the following code will generate alerts as indicated: \r           window.onpopstate = function(event) {   alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state)); }; history.pushState({page: 1}, \"title 1\", \"?page=1\"); history.pushState({page: 2}, \"title 2\", \"?page=2\"); history.replaceState({page: 3}, \"title 3\", \"?page=3\"); history.back(); \/\/ alerts \"location: http:\/\/example.com\/example.html?page=1, state: {\"page\":1}\" history.back(); \/\/ alerts \"location: http:\/\/example.com\/example.html, state: null history.go(2);  \/\/ alerts \"location: http:\/\/example.com\/example.html?page=3, state: {\"page\":3}\r          Note that even though the original history entry (for http:\/\/example.com\/example.html) has no state object associated with it, a popstate event is still fired when we activate that entry after the second call to history.back(). Specification  HTML5 popstate event  See also  window.history  Manipulating the browser history"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onreset","title":"window.onreset","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onscroll","title":"window.onscroll","description":"Specifies the function to be called when the window is scrolled.   Syntax  window.onscroll = funcRef;   funcRef is a reference to a function.   Example  window.onscroll = function (e) {   \/\/ called when the window is scrolled. }   <html> <head>  <title>onscroll test<\/title>  <script type=\"text\/javascript\">  window.onscroll = scroll;  function scroll() {  alert(\"scroll event detected! \"+window.pageXOffset+\" \"+window.pageYOffset);  \/\/ note: you can use window.innerWidth and window.innerHeight to access the width and height of the viewing area } <\/script> <\/head>  <body> <p>Resize the window<\/p> <p>to a very small size,<\/p> <p>and use the scrollbars<\/p> <p>to move around the page content<\/p> <p>in the window.<\/p> <\/body> <\/html>   Notes    bug 189308 , in older versions of Gecko caused onscroll to be fired only when dragging the scroll bar, not when using cursor keys or mousewheel. This was fixed in Gecko 1.8\/Firefox 1.5. When the window.scrollX\/scrollY isn't 0 -- meaning that some scrolling occurred by either script or manual action -- reloading the current page will trigger the onscroll event immediately.  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onresize","title":"window.onresize","description":"An event handler for the resize event on the window.   Syntax  window.onresize = funcRef;  Parameters   funcRef is a reference to a function.  Example   window.onresize = doFunc;   <html> <head>  <title>onresize test<\/title>  <script type=\"text\/javascript\">  window.onresize = resize;  function resize() {  alert(\"resize event detected!\"); } <\/script> <\/head>  <body> <p>Resize the browser window to fire the resize event.<\/p> <\/body> <\/html>   Notes  The resize event is fired after the window has been resized.  Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onselect","title":"window.onselect","description":"Summary  An event handler for the select event on the window.   Syntax  window.onselect = funcRef;   funcRef is a function.   Example   <html> <head>  <title>onselect test<\/title>  <style type=\"text\/css\"> .text1 { border: 2px solid red; } <\/style>  <script type=\"text\/javascript\">  window.onselect = selectText;  function selectText() {  alert(\"select event detected!\"); } <\/script> <\/head>  <body> <textarea class=\"text1\" cols=\"30\" rows=\"3\"> Highlight some of this text with the mouse pointer to fire the onselect event. <\/textarea> <\/body> <\/html>   Notes  The select event only fires when text inside a text input or textarea is selected. The event is fired after the text has been selected.   Specification  Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onsubmit","title":"window.onsubmit","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.onunload","title":"window.onunload","description":"Summary  The unload event is raised when the document is unloaded.   Syntax  window.onunload = funcRef;   funcRef is a reference to a function.   Example   <html> <head>  <title>onunload test<\/title>  <script type=\"text\/javascript\">  window.onunload = unloadPage;  function unloadPage() {  alert(\"unload event detected!\"); } <\/script> <\/head>  <body> <p>Reload a new page into the browser<br \/>  to fire the unload event for this page.<\/p> <p>You can also use the back or forward buttons<br \/>  to load a new page and fire this event.<\/p> <\/body> <\/html>   Notes  Note that using this event handler in your page prevents Firefox 1.5 from caching the page in the in-memory bfcache. See Using Firefox 1.5 caching for details. Browsers equipped with pop-up window blockers will ignore all window.open() method calls in onunload event handler functions.   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/FileError","title":"FileError","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/FileList","title":"FileList","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/XMLHttpRequest\/FormData","title":"FormData","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.contains","title":"Node.contains","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Node.parentElement","title":"Node.parentElement","description":"Returns the DOM node's parent Element , or null if the node either has no parent, or its parent isn't a DOM Element . Syntax parentElement = node.parentElement  parentElement is the parent element of the current node. This is always a DOM Element  object, or null. Example if (node.parentElement) {   node.parentElement.style.color=\"red\"; }  See also  Node.parentNode   Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Supported) 9.0 (9.0)  (Supported) (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification  DOM Level 4: Node.parentElementWD"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.item","title":"element.item","description":"Summary  Returns a node from a NodeList by index.   Syntax  nodeItem = nodeList.item(index)    nodeList is a NodeList. This is usually obtained from another DOM property or method, such as childNodes.  index is the index of the node to be fetched. The index is zero-based.  nodeItem is the indexth node in the nodeList returned by the item method.  JavaScript has a special simpler syntax for obtaining an item from a NodeList by index:  nodeItem = nodeList[index]   Example  var tables = document.getElementsByTagName(\"table\");  var firstTable = tables.item(1); \/\/ or simply tables[1] - returns the second table in the DOM   Notes  This method doesn't throw exceptions, a value of null is returned if the index is out of range. Note that despite this article's name, item() is not a method of DOM Element or Node.   Specification  DOM Level 1 Core: NodeList.item() DOM Level 2 Core: NodeList.item()"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.plugins","title":"window.navigator.plugins","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/TimeRanges.length","title":"TimeRanges.length","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/TimeRanges.start","title":"TimeRanges.start","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/TimeRanges.end","title":"TimeRanges.end","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/treeWalker.root","title":"treeWalker.root","description":"Summary  Returns the node that is the root of what the TreeWalker traverses.   Syntax  root = treeWalker.root;   Example  var treeWalker = document.createTreeWalker(     document.body,     NodeFilter.SHOW_ELEMENT,     { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },     false ); root = treeWalker.root; \/\/ document.body in this case"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/treeWalker.filter","title":"treeWalker.filter","description":"Summary  Returns an object with a method acceptNode(node).   Syntax  nodeFilter = treeWalker.filter;   Example  var treeWalker = document.createTreeWalker(     document.body,     NodeFilter.SHOW_ELEMENT,     { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },     false ); nodeFilter = treeWalker.filter; \/\/ document.body in this case   Notes  When creating the TreeWalker, the filter object is passed in as the third parameter, and the object method acceptNode(node) is called on every single node to determine whether or not to accept it. This function should return the constant NodeFilter.FILTER_ACCEPT for cases when the node should be accepted and NodeFilter.FILTER_REJECT for cases when the node should be rejected."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/treeWalker.whatToShow","title":"treeWalker.whatToShow","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/XMLHttpRequest","title":"XMLHttpRequest","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/ChromeWorker","title":"ChromeWorker","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/HTMLMediaElement","title":"HTMLMediaElement","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/EventListener","title":"EventListener","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/ValidityState_Interface","title":"ValidityState","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.acceptCharset","title":"form.acceptCharset","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.action","title":"form.action","description":"action gets\/sets the action of the FORM element. Syntax string = form.action form.action = string  Example form.action = \"\/cgi-bin\/publish\"; Notes The action of a form is the program that is executed on the server when the form is submitted. This property can be retrieved or set. Specification HTML 5, Section 4.10.19.6, Form submission DOM Level 2 HTML: action"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.elements","title":"form.elements","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.enctype","title":"form.enctype","description":"enctype gets\/sets the content type of the FORM element. Syntax string = form.enctype form.enctype = string  Example  form.enctype = \"application\/x-www-form-urlencoded\";  Notes The encoding type is generally \"application\/x-www-form-urlencoded\". Specification HTML 5, Section 4.10.19.6, Form submission DOM Level 2 HTML: enctype"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.length","title":"form.length","description":"length returns the number of controls in the FORM element. Syntax integer = form.length  Example  if (document.getElementById(\"form1\").length > 1) {   \/\/ more than one form control here }  Specification HTML 5, Section 4.10.3, The form Element DOM Level 2: length"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.method","title":"form.method","description":"method gets\/sets the HTTP method used to submit the form. Syntax string = form.method form.method = string  Example  document.forms[\"myform\"].method = \"post\";  Specification HTML 5, Section 4.10.19.6, Form submission DOM Level 2 HTML: method"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.name","title":"form.name","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.target","title":"form.target","description":"target gets\/sets the target of the action (i.e., the frame to render its output in). Syntax string = form.target form.target = string  Example  myForm.target = document.frames[1].name;  Specification HTML 5, Section 4.10.19.6, Form submission DOM Level 2 HTML: target"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.submit","title":"form.submit","description":"submit submits the form.  Syntax  HTMLFormElement.submit()  Example  document.forms[\"myform\"].submit()  Notes  This method does the same thing as clicking the form submit button. Event handling markup like onsubmit=\"return false;\" will not be evaluated when calling the submit method from code. The above code snippet will try and cancel the submit event which will not work when calling the submit method from code. If a form control (such as a submit button) has a name or id of submit it will mask the form's submit method.  Specification  DOM Level 2 HTML: submit"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/form.reset","title":"form.reset","description":"reset resets the form to its initial state.  Syntax  HTMLFormElement.reset()  Example  document.forms[\"myform\"].reset();  Notes  This method does the same thing as clicking the form's reset button. If a form control (such as a reset button) has a name or id of reset it will mask the form's reset method.  Specification  DOM Level 2 HTML: reset"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Input.mozGetFileNameArray","title":"Input.mozGetFileNameArray","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Input.mozSetFileNameArray","title":"Input.mozSetFileNameArray","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Input.setSelectionRange","title":"Input.setSelectionRange","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/select.type","title":"select.type","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.caption","title":"table.caption","description":"caption returns the table caption.  Syntax  string = table.caption  Example  if (table.caption) {   \/\/ do something with the caption }  Notes  This property returns void if no caption element exists for the table.  Specification  caption Interface HTMLTableCaptionElement"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.tHead","title":"table.tHead","description":"tHead returns the table's THEAD.  Syntax  th_el = table.tHead  Parameters  th_el is a HTMLTableSectionElement.  Example  if (table.tHead == my_head_el) {    ... }  Notes  This property returns VOID if no THEAD element exists.  Specification thead Interface HTMLTableSectionElement"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.rows","title":"table.rows","description":"rows returns a collection of all the rows in the table.Syntax  HTMLCollectionObject = table.rows  Example  myrows = mytable.rows; firstRow = mytable.rows[0]; lastRow = mytable.rows[mytable.rows.length-1];  Notes  The collection returned by the rows property of a table object includes all the rows in THEAD, TFOOT and all TBODY elements of the table. The rows property of a table section element (THEAD, TFOOT or TBODY) contains only the rows in that section element.  Specification  rows HTMLcollection"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.tFoot","title":"table.tFoot","description":"tFoot returns the table's TFOOT element.  Syntax  HTMLTableSectionElementObject = table.tFoot  Example  if (table.tFoot == my_foot) {   ... }  Notes  This property returns VOID if no TFOOT element exists.  Specification tfoot Interface HTMLTableSectionElement"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.tBodies","title":"table.tBodies","description":"tBodies returns a collection of the table bodies.  Syntax  HTMLCollectionObject = table.tBodies  Example  length(mytable.tBodies);  Notes The collection returned includes implicit TBODY elements. e.g.   <table>   <tr>     <td>cell one<\/td>   <\/tr> <\/table>  The DOM generated from the above HTML will have a TBODY element even though the tags are not included in the source HTML.  Specification tBodies Interface HTMLCollection"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.align","title":"table.align","description":"align gets\/sets the alignment of the table.  Syntax  HTMLTableElement.align = alignment; var alignment = HTMLTableElement.align;  Parameters  alignment is a string with one of the following values: left center right   Example  \/\/ Set the alignmnet of a table var t = document.getElementById('TableA'); t.align = 'center';  Notes  The align attribute is deprecated in HTML4.0.  Specification  W3C DOM 2 HTML Specification HTMLTableElement.align."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.border","title":"table.border","description":"border gets\/sets the border width.  Syntax  HTMLTableElement.border = border; var border = HTMLTableElement.border;   border is string representing the width of the border in pixels.  Example  \/\/ Set the width of a table border to 2 pixels var t = document.getElementById(\"TableA\"); t.border=\"2\";  Notes  This attribute is deprecated in HTML 4.0.  Specification  W3C DOM 2 HTML Specification HTMLTableElement.border."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.bgColor","title":"table.bgColor","description":"Deprecated  bgcolor gets\/sets the background color of the table.  Syntax  color = table.bgColor table.bgColor = color  Parameters  color is a string representing a color value.  Example  \/\/ Set table background colour to lightblue var t = document.getElementById('TableA'); t.bgColor = 'lightblue';  Notes  The bgColor attribute is deprecated in HTML 4.01. The CSS:background-color property should be used instead by modifying the element's style object or using a style rule. Also available on DOM tbody, row and cell objects.  Specification  DOM Level 2 HTML: HTMLTableElement.bgColor"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.cellPadding","title":"table.cellPadding","description":"cellPadding gets\/sets the padding around the individual cells of the table.  Syntax  HTMLTableElement.cellPadding = padding; var padding = HTMLTableElement.cellPadding;   padding is either a number of pixels (e.g. \"10\") or a percentage value (e.g. \"10%\").  Example  \/\/ Set cell padding to 10 pixels var t = document.getElementById(\"TableA\"); t.cellPadding = \"10\";  Specification  W3C DOM 2 HTML Specification HTMLTableElement.cellPadding."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.cellSpacing","title":"table.cellSpacing","description":"cellSpacing gets\/sets the spacing around the individual cells of the table.  Syntax  HTMLTableElement.cellSpacing = spacing; var spacing = HTMLTableElement.cellSpacing;   spacing is either a number of pixels (e.g. \"10\") or a percentage value (e.g. \"10%\").  Example  \/\/ Set the cell spacing to 10 pixels var t = document.getElementById('TableA'); t.cellSpacing = \"10\";  Specification  W3C DOM 2 HTML Specification HTMLTableElement.cellSpacing."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.frame","title":"table.frame","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.rules","title":"table.rules","description":"rules specifies which cell borders to render in the table.  Syntax  HTMLTableElement.rules = rules; var rules = HTMLTableElement.rules;  Parameters  rules is a string with one of the following values:  none no rules groups lines between groups only rows lines between rows cols lines between cols all lines between all cells  Example  \/\/ Turn on all the internal borders of a table var t = document.getElementById(\"TableID\"); t.rules = \"all\";  Specification  W3C DOM 2 HTML Specification HTMLTableElement.rules."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.summary","title":"table.summary","description":"summary gets\/sets a table description.  Syntax  HTMLTableElement.summary = string; var string = HTMLTableElement.summary;  Example  HTMLTableElement.summary = \"Usage statistics\";  Specification W3C DOM 2 HTML Specification HTMLTableElement.summary"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.width","title":"table.width","description":"Summary  width specifies the desired width of the table.   Syntax  HTMLTableElement.width = width; var width = HTMLTableElement.width;  Where width is a string representing the width in number of pixels or as a percentage value.   Example  mytable.width = \"75%\";   Specification  W3C DOM 2 HTML Specification HTMLTableElement.width"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.createTHead","title":"table.createTHead","description":"createTHead creates a new THEAD for the table.  Syntax  HTMLElementObject = table.createTHead()  Example myhead = mytable.createTHead();  \/\/checking: myhead == mytable.tHead  Notes  If a thead element already exists for the table, this method returns that element.  Specification createTHead"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.deleteTHead","title":"table.deleteTHead","description":"deleteTHead removes a THEAD from the table.  Syntax  HTMLTableElement.deleteTHead()  Example  mytable.deleteTHead();  Specification deleteTHead"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.createTFoot","title":"table.createTFoot","description":"createTFoot creates a new TFOOT for the table.  Syntax  HTMLTableElement = table.createTFoot()  Example  myfoot = mytable.createTFoot();  \/\/checking: myfoot == mytable.tFoot  Notes  If a tfoot element already exists for the table, this method returns that element  Specification createTFoot"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.deleteTFoot","title":"table.deleteTFoot","description":"deleteTFoot removes a TFOOT from the table.  Syntax  HTMLTableElement.deleteTFoot()  Example  mytable.deleteTFoot();  Specification deleteTFoot"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.createCaption","title":"table.createCaption","description":"createCaption creates a new caption for the table.  Syntax  HTMLTableElement = table.createCaption()  Example  mycap = mytable.createCaption();  Notes  If a caption element already exists on the table, this method returns that element.  Specification createCaption"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.deleteCaption","title":"table.deleteCaption","description":"deleteCaption removes the caption from the table.  Syntax  HTMLTableElement.deleteCaption()  Example  mytable.deleteCaption();  Specification deleteCaption"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.insertRow","title":"table.insertRow","description":"insertRow inserts a new row in the table. Syntax  var row = HTMLTableElement.insertRow(index);   HTMLTableElement is a reference to a HTML table element. index is the row index of the new row. row is assigned a reference to the new row.  If index is -1 or equal to the number of rows, the row is appended as the last row. If index is omitted or greater than the number of rows, an error will result. If a table has multiple tbody elements, by default, the new row is inserted into the last tbody. To insert the row into a specific tbody:  var specific_tbody=document.getElementById(tbody_id); var row=specific_tbody.insertRow(index)   Example  <table id=\"TableA\"> <tr> <td>Old top row<\/td> <\/tr> <\/table> <script type=\"text\/javascript\">    function addRow(tableID)   {      \/\/ Get a reference to the table     var tableRef = document.getElementById(tableID);      \/\/ Insert a row in the table at row index 0     var newRow   = tableRef.insertRow(0);      \/\/ Insert a cell in the row at index 0     var newCell  = newRow.insertCell(0);      \/\/ Append a text node to the cell     var newText  = document.createTextNode('New top row')     newCell.appendChild(newText);   }  \/\/ Call addRow() with the ID of a table addRow('TableA'); <\/script>  To be valid in an HTML document, a TR must have at least one TD element. Note that insertRow inserts the row directly into the table and returns a reference to the new row. The row does not need to be appended separately as would be the case if document.createElement() had been used to create the new TR element. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 4 3 5.5 10.10 4         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?    Specification DOM Level 2 HTML: insertRow"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/table.deleteRow","title":"table.deleteRow","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/tableRow.insertCell","title":"tableRow.insertCell","description":"Inserts a new cell into a table row and returns a reference to the cell.  Syntax  var cell = HTMLTableRowElement.insertCell(index);   HTMLTableRowElement is a reference to an HTML table row element.  index is the cell index of the new cell.  cell is assigned a reference to the new cell. If index is -1 or equal to the number of cell, the cell is appended as the last cell in the row. If index is omitted or greater than the number of rows, an error will result.   Example   <table>   <tr id=\"row0\">     <td>Original cell<\/td>   <\/tr> <\/table>  <script type=\"text\/javascript\">    function addCell(tableRowID)   {      \/\/ Get a reference to the tableRow     var rowRef = document.getElementById(tableRowID);      \/\/ Insert a cell in the row at cell index 0     var newCell   = rowRef.insertCell(0);      \/\/ Append a text node to the cell     var newText  = document.createTextNode('New cell')     newCell.appendChild(newText);   }  \/\/ Call addCell() with the ID of a table row addCell('row0');  <\/script>  To be valid in an HTML document, a TR must have at least one TD element. Note that insertCell inserts the cell directly into the table and returns a reference to the new cell. The cell does not need to be appended separately as would be the case if document.createElement() had been used to create the new TD element.   Specification  DOM Level 2 HTML: insertCell HTML 4.01 Table Cell: TD"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_reference\/beforeunload","title":"beforeunload","description":"The beforeunload event is specific to Internet Explorer. It is fired before a resource is removed from the environment (unlike unload, which is fired afterward). Type ? Targets Element Notes When changing the src attribute of an <iframe>, the expected order of events is:  Fire onbeforeunload Change the iframe content Fire the load event  On IE6 (maybe 7, to be confirmed), the actual order is as follow:  Change the iframe content Fire onbeforeunload Fire the load event  This gives the impression that both events are triggered at the same time."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CompositionEvent","title":"CompositionEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_reference\/compositionend","title":"compositionend","description":"Specification DOM Level3 Events Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  ? ? ?   Default action (textinput  event ?   Unimplemented (see  bug 622245 )   ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?   Default action (textinput  event ?   Unimplemented (see  bug 622245 )   ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_reference\/compositionstart","title":"compositionstart","description":"Specification DOM Level3 Events Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Gecko notes According to the DOM Level3 specification, compositionstart is cancelable; however, Gecko doesn't currently let you cancel them. Gecko fires this event when IME starts composition, and some platforms don't have an API for canceling composition once it's begun. In addition, Gecko can't know whether a keyboard event will start composition or not until IME actually starts composition. Because of this, event.preventDefault()  doesn't work on compositionstart events in Gecko.Gecko notes According to the DOM Level3 specification, compositionstart is cancelable; however, Gecko doesn't currently let you cancel them. Gecko fires this event when IME starts composition, and some platforms don't have an API for canceling composition once it's begun. In addition, Gecko can't know whether a keyboard event will start composition or not until IME actually starts composition. Because of this, event.preventDefault()  doesn't work on compositionstart events in Gecko."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_reference\/compositionupdate","title":"compositionupdate","description":"Specification DOM Level3 Events Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_reference\/error","title":"error","description":"The error event is fired whenever a resource fails to load. Type UIEvent, progress event Targets Element, XMLHttpRequest Notes For <img> elements, an error event is triggered is one of this case:  Network error (DNS error, for instance) Incorrect Content-Type HTTP header (doesn't start with \"image\/\") Content-Length HTTP header is 0 HTTP response code is 204 (No content)  Even if this is not standardized, this behavior is consistent across web browsers. Nokia phones (Symbian OS) running a Webkit browser do not fire any event when the Content-Length HTTP header is 0. In this case, no event is fired (neither error nor load). Specification DOM Event 3"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_reference\/mouseenter","title":"mouseenter","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DOM_event_reference\/mouseleave","title":"mouseleave","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/The_structured_clone_algorithm","title":"The structured clone algorithm","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/document.mozCancelFullScreen","title":"document.mozCancelFullScreen","description":"Takes the document out of full-screen mode; this is used to reverse the effects of a call to make an element in the document full-screen using its element.mozRequestFullScreen()  method. Syntax document.mozCancelFullScreen();  Example Example needed. Notes See Using full-screen mode for details and examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification None See also  Using full-screen mode element.mozRequestFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled  :-moz-full-screen    mozallowfullscreen"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.mozRequestFullScreen","title":"element.mozRequestFullScreen","description":"Asynchronously requests that the element be made full-screen. Syntax element.mozRequestFullScreen();  Example Example needed. Notes It's not guaranteed that the element will be put into full-screen mode. If permission to enter full-screen mode is granted, the document will receive a \"mozfullscreenchange\" event to let it know that it's now in full screen mode. If permission is denied, the document receives a \"mozfullscreenerror\" event instead. See Using full-screen mode for details and examples. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?     Specification None See also  Using full-screen mode document.mozCancelFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled  :-moz-full-screen    mozallowfullscreen  See also  Using full-screen mode document.mozCancelFullScreen()  document.mozFullScreen  document.mozFullScreenElement  document.mozFullScreenEnabled  :-moz-full-screen    mozallowfullscreen"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM_Inspector\/Introduction_to_DOM_Inspector","title":"Introduction to DOM Inspector","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM_Inspector\/DOM_Inspector_FAQ","title":"DOM Inspector FAQ","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.isContentEditable","title":"element.isContentEditable","description":"isContentEditable returns true if the contents of the element are editable; otherwise it returns false. Syntax editable = element.isContentEditable  Notes This property is read-only. Specification  HTML5 contenteditable attribute  See also  element.contentEditable"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/element.contentEditable","title":"element.contentEditable","description":"contentEditable is used to indicate whether or not the element is editable. This enumerated attribute can have the following values:  true, or the empty string, indicates that the element is editable. false indicates that the element cannot be edited. inherit indicates that the element inherits its parent's editable status.  Syntax editable = element.contentEditable element.contentEditable = \"true\"  Notes You can use the element.isContentEditable  property to test the computed Boolean value of this property. Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 11 3.0 (1.9)  6 10.6 3.2         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 3 1.0 (1.9)  6 -- 5     Specification  HTML5 contenteditable attribute"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.initMouseEvent","title":"event.initMouseEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/EventTarget","title":"EventTarget","description":"Methods    Name & Description Return   addEventListener( type, handler, bubble ) Register an event handler of a specific event type on the EventTarget. -   removeEventListener( type, handler ) Removes an event listener from the EventTarget. -    dispatchEvent( event ) Dispatch an event to this EventTarget. Boolean    Specification  DOM Level 2 Events: EventTarget"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.initUIEvent","title":"event.initUIEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event\/Comparison_of_Event_Targets","title":"Comparison of Event Targets","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Document.scripts","title":"document.scripts","description":"Returns a list of the <script>  elements in the document. The returned object is an HTMLCollection . Syntax var scriptList = document.scripts;  The returned scriptList is an HTMLCollection . You can use this just like an array to get all the elements in the list. Example This example looks to see if the page has any <script>  elements. \r           var scripts = document.scripts;  if (scripts.length) {   alert(\"This page has scripts!\"); }\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Supported) 9.0 (9.0)  (Supported) (Supported) (Supported)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Supported) 9.0 (9.0)  (Supported) (Supported) (Supported)     Specification  DOM: document scripts"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.initKeyEvent","title":"event.initKeyEvent","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CustomEvent","title":"CustomEvent","description":"Method overview    void initCustomEvent(in DOMString type, in boolean canBubble, in boolean cancelable, in any detail);    Attributes    Attribute Type Description   detail any The data passed when initializing the event.    Methods initCustomEvent() Initializes the event in a manner analogous to the similarly-named method in the DOM Events interfaces.  void initCustomEvent(   in DOMString type,   in boolean canBubble,   in boolean cancelable,   in any detail );  Parameters  type The name of the event. canBubble A boolean indicating whether the event bubbles up through the DOM or not. cancelable A boolean indicating whether the event is cancelable. detail The data passed when initializing the event.  initCustomEvent() Initializes the event in a manner analogous to the similarly-named method in the DOM Events interfaces.  void initCustomEvent(   in DOMString type,   in boolean canBubble,   in boolean cancelable,   in any detail );  Parameters  type The name of the event. canBubble A boolean indicating whether the event bubbles up through the DOM or not. cancelable A boolean indicating whether the event is cancelable. detail The data passed when initializing the event.  Parameters  type The name of the event. canBubble A boolean indicating whether the event bubbles up through the DOM or not. cancelable A boolean indicating whether the event is cancelable. detail The data passed when initializing the event.  Specification   DOM Level 3 Events : CustomEventWD"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSStyleSheet","title":"CSSStyleSheet","description":"Properties  cssRules Returns a CSSRuleList of the CSS rules in the style sheet. ownerRule If this style sheet is imported into the document using an @import rule, the ownerRule property will return that CSSImportRule, otherwise it returns null. Methods  deleteRule Deletes a rule from the style sheet. insertRule Inserts a new style rule into the current style sheet.  Specification DOM Level 2 CSS: CSSStyleSheet interfaceSee also  StyleSheet"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/StyleSheet\/disabled","title":"disabled","description":"This property indicates whether the current stylesheet is applied or not.  Syntax  bool = stylesheet.disabled   Example   \/\/ if the stylesheet is disabled...  if (stylesheet.disabled) {    \/\/ apply style in-line  }  Specification  disabled"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/StyleSheet\/href","title":"href","description":"Returns the location of the stylesheet. Syntax uri = stylesheet.href   Parameters  uri is a string containing the stylesheet's URI.  Example   \/\/ on a local machine:   <html>    <head>     <link rel=\"StyleSheet\" href=\"example.css\" type=\"text\/css\" \/>     <script>      function sref() {       alert(document.styleSheets[0].href);      }    <\/script>    <\/head>    <body>     <div class=\"thunder\">Thunder<\/div>    <button onclick=\"sref()\">ss<\/button>   <\/body>   <\/html> \/\/ returns \"file:\/\/\/\/C:\/Windows\/Desktop\/example.css  Notes If the style sheet is a linked style sheet, the value of its attribute is its location. For inline style sheets, the value of this attribute is NULL. This property is read-only in Firefox, Opera, Google Chrome, and Safari, and it is read\/write in Internet Explorer.Specification href"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/StyleSheet\/media","title":"media","description":"media specifies the intended destination medium for style information.  Syntax  medium = stylesheet.media  stylesheet.media = medium  Parameters  medium is a string describing a single medium or a comma-separated list.  Example   <link rel=\"StyleSheet\" href=\"document.css\" type=\"text\/css\" media=\"screen\" \/>  Notes  The default value for media is \"screen.\"  Specification  DOM Level 2 Styles - STYLESHEET"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/StyleSheet\/ownerNode","title":"ownerNode","description":"ownerNode returns the node that associates this style sheet with the document.  Syntax  objRef = stylesheet.ownerNode   Example  <html>  <head>   <link rel=\"StyleSheet\" href=\"example.css\" type=\"text\/css\" \/>   <script>    function stilo() {     alert(document.styleSheets[0].ownerNode);    }   <\/script>   <\/head>  <body>  Thunder   <button onclick=\"stilo()\">ss<\/button>  <\/body> <\/html> \/\/ displays \"object HTMLLinkElement\"  Notes  For HTML, ownerNode may be the corresponding LINK or STYLE element. For XML, it may be the linking processing instruction. For style sheets that are included by other style sheets, the value of this attribute is NULL.  Specification  DOM Level 2 Styles - STYLESHEET"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/StyleSheet\/parentStyleSheet","title":"parentStyleSheet","description":"Returns the stylesheet that is including this one, if any.  Syntax  objRef = stylesheet.parentStyleSheet   Example  \/\/ find the top level stylesheet if (stylesheet.parentStyleSheet) {   sheet = stylesheet.parentStyleSheet; } else { sheet = stylesheet; }  Notes  This property returns NULL is the current stylesheet is a top-level stylesheet or if stylesheeet inclusion is not supported.  Specification  parentStyleSheet"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/StyleSheet\/title","title":"title","description":"title returns the advisory title of the current style sheet.  Notes  The title is often specified in the ownerNode.  Specification  title"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/StyleSheet\/type","title":"type","description":"type specifies the style sheet language for this style sheet.  Syntax  string = stylesheet.type   Example    ss.type = \"text\/css\";  Specification  type"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSRule\/cssText","title":"cssText","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.appCodeName","title":"window.navigator.appCodeName","description":"Returns the internal \"code\" name of the current browser.  Syntax  codeName = window.navigator.appCodeName   Parameters  codeName is the internal name of the browser as a string.  Example   dump(window.navigator.appCodeName);  Notes  Mozilla, Netscape 6, and IE5 all use the internal name \"Mozilla.\"  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSStyleRule","title":"CSSStyleRule","description":"Properties  selectorText Gets\/sets the textual representation of the selector for this rule, e.g. \"h1,h2\". style Returns the CSSStyleDeclaration object for the rule. Read only. See also  CSSRule"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.appName","title":"window.navigator.appName","description":"Returns the official name of the browser.  Syntax  appName = window.navigator.appName   Parameters  appName is the name of the browser as a string.  Example   dump(window.navigator.appName);  \/\/ prints \"Navigator\" to the console for NS6  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.appVersion","title":"window.navigator.appVersion","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.buildID","title":"window.navigator.buildID","description":"Summary  Returns the build identifier of the browser.   Syntax  buildID = navigator.buildID;  buildID is the build identifier of the application as a string. The build ID is in form YYYYMMDDHH.   Example  dump(window.navigator.buildID);  \/\/ prints \"2006090803\" to the console   Note  Available in Firefox 2 (Gecko 1.8.1) and later. Implemented in   bug 345993 .   Specification  Not part of any public standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.cookieEnabled","title":"window.navigator.cookieEnabled","description":"Returns a Boolean value indicating whether cookies are enabled or not (read-only). Syntax  var cookieEnabled = navigator.cookieEnabled;   cookieEnabled is a Boolean true or false.  Example \r           if (!navigator.cookieEnabled) {    \/\/ let the user know that enabling cookies makes the web page much more useful }\r          Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 1.0 (1.7 or earlier)  ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 1.0 (1)  ? ? ?     Gecko notes Prior to Gecko 8.0 (Firefox 8.0 \/ Thunderbird 8.0 \/ SeaMonkey 2.5) , window.navigator.cookieEnabled would report the wrong result if a site exception was in place for the page on which the check was performed. This has been fixed. Specification DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/navigator.doNotTrack","title":"navigator.doNotTrack","description":"Returns the user's do-not-track setting. This is \"yes\" if the user has requested not to be tracked by web sites, content, or advertising. Syntax dnt = navigator.doNotTrack;  dnt is the value of the string sent for the do-not-track header. Example dump(window.navigator.doNotTrack);  \/\/ prints \"yes\" if DNT is enabled; otherwise this is \"unspecified\" in Firefox  Specification Not part of any public standard. See also  The Do Not Track field guide  Browser compatibility     Desktop Mobile       Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 9.0 (9.0)  9 ? 5.1 on OS X 10.7         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 9.0 (9.0)  ? ? ?"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.language","title":"window.navigator.language","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.mimeTypes","title":"window.navigator.mimeTypes","description":"Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser.   Syntax  mimeTypes = navigator.mimeTypes;   mimeTypes is a MimeTypeArray object which has a length property as well as item(index) and namedItem(name) methods.  Example     alert(window.navigator.mimeTypes.item(0).description); \/\/ alerts \"Mozilla Default Plug-in\"   Notes  The zeroth element in mimeTypes (the \"Mozilla Default Plug-in\" MimeType object) has a type property of * instead of a typical MIME format like \"image\/x-macpaint\"  Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/navigator.mozNotification","title":"navigator.mozNotification","description":"Method overview    notification createNotification(in DOMString title, in DOMString description, in DOMString iconURL  Optional );    Methods createNotification() Creates and returns a notification object that can be used to display the specified message with an optional URL.  notification createNotification(   in DOMString title,   in DOMString description,   in DOMString iconURL  Optional  );  Parameters  title The notification title. description The text to display in the notification. iconURL  Optional  A URL identifying the image to display in the notification.  Return value A new notification  object. createNotification() Creates and returns a notification object that can be used to display the specified message with an optional URL.  notification createNotification(   in DOMString title,   in DOMString description,   in DOMString iconURL  Optional  );  Parameters  title The notification title. description The text to display in the notification. iconURL  Optional  A URL identifying the image to display in the notification.  Return value A new notification  object. Parameters  title The notification title. description The text to display in the notification. iconURL  Optional  A URL identifying the image to display in the notification.  Return value A new notification  object. See also  notification  Displaying notifications"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.onLine","title":"window.navigator.onLine","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.oscpu","title":"window.navigator.oscpu","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.platform","title":"window.navigator.platform","description":"Summary  Returns a string representing the platform of the browser.   Syntax  platform = navigator.platform   platform is a string with one of the following values: \"Win32\", \"Linux i686\", \"MacPPC\", \"MacIntel\", or other.   Example  alert(navigator.platform);    Notes  Unless your code is privileged (chrome or at least has the UniversalBrowserRead privilege), it may get the value of the general.platform.override preference instead of the true platform.   Specification  DOM Level 0. Not part of any standard."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.product","title":"window.navigator.product","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.productSub","title":"window.navigator.productSub","description":"productSub returns the build number of the current browser.  Syntax  prodSub = window.navigator.productSub   Parameters  prodSub is a string.  Example   <script>  function prodsub() {   dt = document.getElementById(\"d\").childNodes[0];   dt.data = window.navigator.productSub; }  <\/script>  <button onclick=\"prodsub();\">productSub<\/button> \/\/ returns: 20010725  Notes  On IE, this property returns undefined. On Apple Safari this property always returns 20030107.  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.userAgent","title":"window.navigator.userAgent","description":"Summary  Returns the user agent string for the current browser.   Syntax  var ua = window.navigator.userAgent;   Value  ua stores the user agent string value of the current browser. The window.navigator.userAgent property is read-write; it has no default value. The user agent string is built on a formal structure which can be decomposed into several pieces of info. Each of these pieces of info comes from other navigator properties which are also settable by the user. Gecko-based browsers comply with the following general structure:   userAgent = appCodeName\/appVersion number (Platform; Security; OS-or-CPU;  Localization; rv: revision-version-number) product\/productSub  Application-Name Application-Name-version   Example  alert(window.navigator.userAgent) \/\/ alerts \"Mozilla\/5.0 (Windows; U; Win98; en-US; rv:0.9.2) Gecko\/20010725 Netscape6\/6.1\"   Notes  Browser identification based on detecting the user agent string is unreliable and is not recommended, as the user agent string is user configurable. For example:   Mozilla Suite and Firefox can use the preference \"general.useragent.override\" in about:config. Some Firefox extensions or multi-bar do that.  Opera 6+ allows users to set the browser identification string via a menu  Microsoft Internet Explorer uses the Windows registry  Safari and iCab allow users to change the browser user agent string to predefined Internet Explorer or Netscape strings via a menu.   Specification  DOM Level 0. Not part of any standard.      References  Gecko user agent string reference  Browser identification (aka \"browser sniffing\"): not best, not reliable approach  Limit the use of User Agent String based Detection  Use feature oriented object detection Interactive cross-browser demo on navigator properties"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.vendor","title":"window.navigator.vendor","description":"Returns the name of the browser vendor for the current browser.  Syntax  venString = window.navigator.vendor   Parameters  venString is a string.  Example   window.navigator.vendor  \/\/ returns \"Netscape6\"  Notes  vendor is another portion of the userAgent string. The product and the vendor can be different--as when Netscape 6.1 uses the Gecko product to do its rendering. See also navigator.product, navigator.userAgent  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.vendorSub","title":"window.navigator.vendorSub","description":"vendorSub is the substring of the vendor having to do with the vendor version number.  Syntax  venSub = window.navigator.vendorSub   Parameters  venSub is a string.  Example   window.navigator.vendorSub  \/\/ returns \"6.1\" where the vendor part of userAgent is  \/\/ Netscape6\/6.1  Notes  vendorSub is yet another component of the full user agent string. It refers to the version number that the vendor themselves have given the current browser (as opposed to the version of the product, which may be different). In Netscape 6.1, the productSub is given as \"5.0\" and the vendorSub is \"6.1.\" See also navigator.productSub, navigator.userAgent, navigator.vendor  Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.javaEnabled","title":"window.navigator.javaEnabled","description":"Summary  This method indicates whether the current browser is Java-enabled or not.   Syntax  result = window.navigator.javaEnabled()   Example  if (window.navigator.javaEnabled()) {    \/\/ browser has java }   Notes  The return value for this method indicates whether the preference that controls Java is on or off - not whether the browser offers Java support in general.   Specification  DOM Level 0. Not part of specification."},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.mozIsLocallyAvailable","title":"window.navigator.mozIsLocallyAvailable","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/window.navigator.registerContentHandler","title":"window.navigator.registerContentHandler","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/navigator.registerProtocolHandler","title":"navigator.registerProtocolHandler","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceMotionEvent","title":"DeviceMotionEvent","description":"Attributes  DeviceMotionEvent.acceleration  The acceleration of the device. This value has taken into account the effect of gravity and removed it from the figures. This value may not exist if the hardware doesn't know how to remove gravity from the acceleration data. Read only. DeviceMotionEvent.accelerationIncludingGravity  The acceleration of the device. This value includes the effect of gravity, and may be the only value available on devices that don't have a gyroscope to allow them to properly remove gravity from the data. Read only. DeviceMotionEvent.interval  The interval, in milliseconds, at which the DeviceMotionEvent is fired. The next event will be fired in approximately this amount of time. DeviceMotionEvent.rotationRate  The rates of rotation of the device about all three axes. Read only.  Example <coming soon> See also Specification  DeviceOrientation specification"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceOrientationEvent","title":"DeviceOrientationEvent","description":"Attributes  DeviceOrientationEvent.absolute  This attribute's value is true if the orientation is provided as a difference between the device coordinate frame and the Earth coordinate frame; if the device can't detect the Earth coordinate frame, this value is false. Read only. DeviceOrientationEvent.alpha  The current orientation of the device around the Z axis; that is, how far the device is rotated around a line perpendicular to the device. Read only. DeviceOrientationEvent.beta  The current orientation of the device around the X axis; that is, how far the device is tipped forward or backward. Read only. DeviceOrientationEvent.gamma  The current orientation of the device around the Y axis; that is, how far the device is turned left or right. Read only.  Note: If the browser is not able to provide notification information, all values are 0. Example <coming soon> See also  DeviceMotionEvent  window.ondeviceorientation  Detecting device orientation Orientation and motion data explained  Specification  DeviceOrientation specification"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/XMLHttpRequest\/Using_XMLHttpRequest","title":"Using XMLHttpRequest","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.view","title":"event.view","description":"Returns the AbstractView object from which the event was generated. In browsers, this is the Window  object the event happened in. Syntax event.view Example var view = event.view;   view is a reference to an AbstractView object.  Specification DOM Level 2 Events: UIEvent.view"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.screenX","title":"event.screenX","description":"Returns the horizontal coordinate of the event within the screen as a whole. Syntax var pixelNumber = event.screenX;    pixelNumber is the offset from the left side of the screen in pixels.  Example  <html> <head> <title>screenX\\screenY example<\/title>  <script type=\"text\/javascript\">  function showCoords(evt){   alert(     \"screenX value: \" + evt.screenX + \"\\n\"     + \"screenY value: \" + evt.screenY + \"\\n\"   ); }  <\/script> <\/head>  <body onmousedown=\"showCoords(event)\"> <p>To display the mouse coordinates click anywhere on the page.<\/p> <\/body> <\/html>   function checkClickMap(e) {   if (e.screenX < 50) doRedButton();   if (50 <= e.screenX) < 100 doYellowButton();   if (e.screenX >= 100) doRedButton(); }  Notes When you trap events on the window, document, or other roomy elements, you can get the coordinates of that event (e.g., a click) and route it properly, as the \"clickMap\" example demonstrates. Specification screenX"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.screenY","title":"event.screenY","description":"Returns the vertical coordinate of the event within the screen as a whole.. Syntax var pixelNumber = event.screenY;    pixelNumber is the offset from the top of the screen in pixels.  Example  <html> <head> <title>screenX\\screenY example<\/title>  <script type=\"text\/javascript\">  function showCoords(evt){   alert(     \"screenX value: \" + evt.screenX + \"\\n\"     + \"screenY value: \" + evt.screenY + \"\\n\"   ); }  <\/script> <\/head>  <body onmousedown=\"showCoords(event)\"> <p>To display the mouse coordinates click anywhere on the page.<\/p> <\/body> <\/html>  Notes When you trap events on the window, document, or other roomy elements, you can get the coordinates of that event (e.g., a click) and route it properly, as the \"clickMap\" example demonstrates. Specification screenY"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.clientY","title":"event.clientY","description":"Returns the vertical coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientY value of 0, regardless of whether the page is scrolled vertically. Syntax var y = event.clientY;  Example  <html> <head> <title>clientX\\clientY example<\/title>  <script type=\"text\/javascript\"> function showCoords(evt){   alert(     \"clientX value: \" + evt.clientX + \"\\n\"     + \"clientY value: \" + evt.clientY + \"\\n\"   ); } <\/script> <\/head>  <body onmousedown=\"showCoords(event)\"> <p>To display the mouse coordinates click anywhere on the page.<\/p> <\/body> <\/html>  Notes See also clientX, screenX, and screenY. Specification DOM Level 2 Events: MouseEvent.clientY"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.ctrlKey","title":"event.ctrlKey","description":"Indicates whether the CTRL key was pressed when the event fired. Syntax var bool = event.ctrlKey;  bool contains true or false, depending on whether the ctrl key was held down or not, when the event fired. Example  <html> <head> <title>ctrlKey example<\/title>  <script type=\"text\/javascript\">  function showChar(e){   alert(     \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"     + \"charCode: \" + e.charCode + \"\\n\"     + \"CTRL key pressed: \" + e.ctrlKey + \"\\n\"   ); }  <\/script> <\/head>  <body onkeypress=\"showChar(event);\"> <p>Press any character key, with or without holding down the CTRL key.<br \/> You can also use the SHIFT key together with the CTRL key.<\/p> <\/body> <\/html>  Specification ctrlKey"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.clientX","title":"event.clientX","description":"Returns the horizontal coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientX value of 0, regardless of whether the page is scrolled horizontally. Syntax var x = event.clientX;  Example  <html> <head> <title>clientX\\clientY example<\/title>  <script type=\"text\/javascript\"> function showCoords(evt){   alert(     \"clientX value: \" + evt.clientX + \"\\n\"     + \"clientY value: \" + evt.clientY + \"\\n\"   ); } <\/script> <\/head>  <body onmousedown=\"showCoords(event)\"> <p>To display the mouse coordinates click anywhere on the page.<\/p> <\/body> <\/html>  Notes See also clientY, screenX, and screenY. Specification DOM Level 2 Events: MouseEvent.clientX"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.altKey","title":"event.altKey","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.metaKey","title":"event.metaKey","description":"Indicates whether the META key was pressed when the event fired. Syntax var bool = event.metaKey;  bool contains true or false, depending on whether the meta key was held down or not, when the event fired. Example   function goInput(e) {  \/\/ checks metaKey and    if (e.metaKey) {         \/\/ passes event along      superSizeOutput(e);    } else {      doOutput(e);    }  }  Specification metaKey"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.shiftKey","title":"event.shiftKey","description":"Indicates whether the SHIFT key was pressed when the event fired. Syntax var bool = event.shiftKey;  bool contains true or false, depending on whether the shift key was held down or not, when the event fired. Example  <html> <head> <title>shiftKey example<\/title>  <script type=\"text\/javascript\">  function showChar(e){   alert(     \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"     + \"charCode: \" + e.charCode + \"\\n\"     + \"SHIFT key pressed: \" + e.shiftKey + \"\\n\"     + \"ALT key pressed: \" + e.altKey + \"\\n\"   ); }  <\/script> <\/head>  <body onkeypress=\"showChar(event);\"> <p>Press any character key, with or without holding down  the SHIFT key.<br \/> You can also use the SHIFT key together with the ALT key.<\/p> <\/body> <\/html>  Specification shiftKey"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.button","title":"event.button","description":"Indicates which mouse button caused the event. Syntax event.button  Example var buttonCode = event.button; This property returns an integer value indicating the button that changed state.  0 for standard \"click;\" this is usually usually the left button. 1 for middle button; this is usually a click on the scroll wheel's button. 2 for right button; this is usually a right-click.  Note: This convention is not followed in Internet Explorer: See QuirksMode for details. The order of buttons may be different depending on how the pointing device has been configured. Example \r           <script> var whichButton = function (e) {     \/\/ Handle different event models     var e = e || window.event;     var btnCode;      if ('object' === typeof e) {         btnCode = e.button;          switch (btnCode) {             case 0:                 alert('Left button clicked.');             break;             case 1:                 alert('Middle button clicked.');             break;             case 2:                 alert('Right button clicked.');             break;             default:                 alert('Unexpected code: ' + btnCode);         }     } } <\/script>  <button onmouseup=\"whichButton(event);\" oncontextmenu=\"event.preventDefault();\">Click with mouse...<\/button>\r          Notes Because mouse clicks are frequently intercepted by the user interface, it may be difficult to detect buttons other than those for a standard mouse click (usually the left button) in some circumstances. Users may change the configuration of buttons on their pointing device so that if an event's button property is zero, it may not have been caused by the button that is physically left&ndash;most on the pointing device; however, it should behave as if the left button was clicked in the standard button layout. Specification DOM 2 Events Specification: button Browser compatibility Based on Jan Wolter's JavaScript Madness: Mouse Events.     Desktop Mobile       Feature Gecko Webkit Internet Explorer Opera   Basic support 1 523 9 8"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/event.relatedTarget","title":"event.relatedTarget","description":"Identifies a secondary target for the event. Description The relatedTarget property is used to find the other element, if any, involved in an event. Events like mouseover are oriented around a certain target, but also involve a secondary target, such as the target that is exited as the mouseover event fires for the primary target. Events Only MouseEvents have this property, and its value makes sense only for certain MouseEvents:    Event name relatedTarget role   focusin which EventTarget  is losing focus   focusout which EventTarget  is receiving focus   mouseenter which EventTarget  the pointing device entered from   mouseleave which EventTarget  the pointing device exited to   mouseout which EventTarget  the pointing device exited to   mouseover which EventTarget  the pointing device entered from   dragenter which EventTarget  the pointing device entered from   dragexit which EventTarget  the pointing device exited to    Example \r           <!DOCTYPE html> <html> <head>   <style type=\"text\/css\">   div > div {     height: 128px;     width: 128px;   }   #top {     background-color: red;   }   #bottom {     background-color: blue;   }   <\/style>   <script type=\"text\/javascript\">   function loadListener() {     document.getElementById(\"top\").addEventListener(\"mouseover\",                                                     overListener);     document.getElementById(\"top\").addEventListener(\"mouseout\",                                                     outListener);     document.getElementById(\"bottom\").addEventListener(\"mouseover\",                                                        overListener);     document.getElementById(\"bottom\").addEventListener(\"mouseout\",                                                        outListener);   }   function outListener(event) {     console.log(\"exited \" + event.target.id + \" for \" +                 event.relatedTarget.id);   }   function overListener(event) {     console.log(\"entered \" + event.target.id + \" from \" +                 event.relatedTarget.id);   }   <\/script> <\/head> <body onload=\"loadListener();\"> <div id=\"outer\">   <div id=\"top\"><\/div>   <div id=\"bottom\"><\/div> <\/div> <\/body> <\/html>\r           View on jsFiddle Specification DOM Level 2 Events: MouseEvent.relatedTarget See also Comparison of Event Targets"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSRuleList","title":"CSSRuleList","description":"A CSSRuleList is an array-like object containing an ordered collection of CSSRule objects. Description Each CSSRule can be accessed as rules.item(index), or simply rules[index], where rules is an object implementing the CSSRuleList interface, and index is the 0-based index of the rule, in the order as it appears in the style sheet CSS. The number of objects is rules.length.Example \r           \/\/ get the first style sheet&rsquo;s first rule var first_rule = document.styleSheets[0].cssRules[0];\r          See also  CSSRule  CSSRuleList implementations There are multiple properties in the CSSOM that will return a CSSRuleList. They are:  CSSStyleSheet  property cssRules  CSSMediaRule  property cssRules  CSSKeyframesRule  property cssRules  CSSMozDocumentRule  property cssRules  CSSRuleList implementations There are multiple properties in the CSSOM that will return a CSSRuleList. They are:  CSSStyleSheet  property cssRules  CSSMediaRule  property cssRules  CSSKeyframesRule  property cssRules  CSSMozDocumentRule  property cssRules  Specification  DOM Level 2 Style: CSSRuleList interface DOM Level 2 Style: CSSStyleSheet attribute cssRules DOM Level 2 Style: CSSMediaRule attribute cssRules CSS Animations: CSSKeyframesRule interface"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSStyleSheet\/deleteRule","title":"deleteRule","description":"The deleteRule method removes a style rule from the current style sheet object.  Syntax  stylesheet.deleteRule(index)   Parameters  index is a long number representing the position of the rule.  Example    myStyles.deleteRule(0);  Specification  deleteRule"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSStyleSheet\/insertRule","title":"insertRule","description":"The insertRule method inserts a new style rule into the current style sheet. Syntax stylesheet.insertRule(rule, index)   Parameters  rule is a string containing the rule to be inserted (selector and declaration). index is a number representing the position to be inserted.  Example 1 \r           \/\/ push a new rule onto the top of my stylesheet  myStyle.insertRule(\"#blanc { color: white }\", 0);\r          Example 2 \r           \/**  * Add a stylesheet rule to the document (may be better practice, however,  *  to dynamically change classes, so style information can be kept in  *  genuine styesheets (and avoid adding extra elements to the DOM))  * Note that an array is needed for declarations and rules since ECMAScript does  * not afford a predictable object iteration order and since CSS is   * order-dependent (i.e., it is cascading); those without need of  * cascading rules could build a more accessor-friendly object-based API.  * @param {Array} decls Accepts an array of JSON-encoded declarations  * @example addStylesheetRules([   ['h2', \/\/ Also accepts a second argument as an array of arrays instead     ['color', 'red'],     ['background-color', 'green', true] \/\/ 'true' for !important rules    ],    ['.myClass',      ['background-color', 'yellow']   ] ]);  *\/ function addStylesheetRules (decls) {     var style = document.createElement('style');     document.getElementsByTagName('head')[0].appendChild(style);     if (!window.createPopup) { \/* For Safari *\/        style.appendChild(document.createTextNode(''));     }     var s = document.styleSheets[document.styleSheets.length - 1];     for (var i=0, dl = decls.length; i < dl; i++) {         var j = 1, decl = decls[i], selector = decl[0], rulesStr = '';         if (Object.prototype.toString.call(decl[1][0]) === '[object Array]') {             decl = decl[1];             j = 0;         }         for (var rl=decl.length; j < rl; j++) {             var rule = decl[j];             rulesStr += rule[0] + ':' + rule[1] + (rule[2] ? ' !important' : '') + ';\\n';         }          if (s.insertRule) {             s.insertRule(selector + '{' + rulesStr + '}', s.cssRules.length);         }         else { \/* IE *\/             s.addRule(selector, rulesStr, -1);         }     } }\r          Notes For rule sets this contains both the selector and the style declaration. For at-rules, this specifies both the at-identifier and the rule content. Specification insertRule"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/notification","title":"notification","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSStyleRule\/selectorText","title":"selectorText","description":"selectorText() gets\/sets the textual representation of the selector for the rule set. Syntax string = cssRule.selectorText  cssRule.selectorText = string  Example \r           \/\/ for cssrule: body { background-color: darkblue; }  cssrule = document.styleSheets[1]   !!TODO!!   selector = cssrule.selectorText;   \/\/ selector is now \"body\"\r          Notes The implementation may have stripped out insignificant whitespace while parsing the selector. Specification DOM Level 2 Style - cssRule"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/CSSStyleRule\/style","title":"style","description":"Returns the CSSStyleDeclaration  interface for the declaration block of the CSSRule . Syntax styleObj = cssRule.style  Example \r           function stilo() {   alert(document.styleSheets[0].cssRules[0].style.cssText); } \/\/ displays \"background-color: gray;\"\r          Notes The declaration block is that part of the style rule that appears within the braces and that actually provides the style definitions (for the selector, the part that comes before the braces). See also  DOM CSS Properties  Specification DOM Level 2 CSS: style"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Displaying_notifications","title":"Displaying notifications","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM_Client_Object_Cross-Reference","title":"DOM Client Object Cross-Reference","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceMotionEvent.acceleration","title":"DeviceMotionEvent.acceleration","description":"Returns the amount of acceleration recorded by the device, in meters per second squared. Note: If the hardware doesn't know how to remove gravity from the acceleration data, this value may not be present in the DeviceMotionEvent . In this situation, you'll need to use DeviceMotionEvent.accelerationIncludingGravity  instead. Syntax var acceleration = motionEvent.acceleration;  Example Specification  DeviceOrientation Event Specification  See also  DeviceMotionEvent  Detecting device orientation window.ondevicemotion"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceMotionEvent.rotationRate","title":"DeviceMotionEvent.rotationRate","description":"Returns the rate at which the device is rotating around each of its axes. Syntax var rates = motionEvent.rotationRate;  On return, rates is a RotationRate  object describing the rotation rates of the device around each of its axes; each rate is specified in degrees per second. Note: If the hardware isn't capable of providing this information, this property returns null. Example Specification  DeviceOrientation Event Specification  See also  DeviceMotionEvent  Detecting device orientation window.ondevicemotion"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceMotionEvent.accelerationIncludingGravity","title":"DeviceMotionEvent.accelerationIncludingGravity","description":"Returns the amount of acceleration recorded by the device, in meters per second squared. Unlike DeviceMotionEvent.acceleration , this property's value does not compensate for the influence of gravity; instead, its value is the sum of the acceleration of the device as induced by the user and the acceleration caused by gravity. This value is not typically as useful as DeviceMotionEvent.acceleration , but may be the only value available on devices that aren't capable of removing gravity from the acceleration data, such as on devices that don't have a gyroscope. Syntax var acceleration = motionEvent.accelerationIncludingGravity;  Example Specification  DeviceOrientation Event Specification  See also  DeviceMotionEvent  Detecting device orientation window.ondevicemotion"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceMotionEvent.interval","title":"DeviceMotionEvent.interval","description":"Returns the interval, in milliseconds, at which device motion events fire. You can use this to determine the granularity of motion events. Read only. Syntax var interval = motionEvent.interval;  On return, interval is the time, in milliseconds, between device motion events. Example Specification  DeviceOrientation Event Specification  See also  DeviceMotionEvent  Detecting device orientation window.ondevicemotion"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/Orientation_and_motion_data_explained","title":"Orientation and motion data explained","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceOrientationEvent.absolute","title":"DeviceOrientationEvent.absolute","description":"Indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device. See Orientation and motion data explained for details. Syntax var absolute = orientationEvent.absolute;  On return, absolute is true if the orientation data in orientationEvent is provided as the difference between the Earth's coordinate frame and the device's coordinate frame, or false if the orientation data is being provided in reference to some arbitrary, device-determined coordinate frame. Example Specification  DeviceOrientation Event Specification  See also  DeviceOrientationEvent  Detecting device orientation Orientation and motion data explained window.ondeviceorientation"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceOrientationEvent.alpha","title":"DeviceOrientationEvent.alpha","description":"Returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen. See Orientation and motion data explained for details. Syntax var alpha = orientationEvent.alpha;  Example Specification  DeviceOrientation Event Specification  See also  DeviceOrientationEvent  Detecting device orientation Orientation and motion data explained window.ondeviceorientation"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceOrientationEvent.beta","title":"DeviceOrientationEvent.beta","description":"Returns the rotation of the device around the X axis; that is, the number of degrees by which the device is tipped forward or backward. See Orientation and motion data explained for details. Syntax var beta = orientationEvent.beta;  Example Specification  DeviceOrientation Event Specification  See also  DeviceOrientationEvent"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/DeviceOrientationEvent.gamma","title":"DeviceOrientationEvent.gamma","description":"Returns the rotation of the device around the Y axis; that is, the number of degrees by which the device is turned left or right. See Orientation and motion data explained for details. Syntax var gamma = orientationEvent.gamma;  Example Specification  DeviceOrientation Event Specification  See also  DeviceOrientationEvent"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM_Client_Object_Cross-Reference\/DOM_Events","title":"DOM Events","description":null},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/RotationRate","title":"RotationRate","description":"Attributes  RotationRate.alpha  The rate at which the device is rotating about its Z axis; that is, being twisted about a line perpendicular to the screen. Read only. RotationRate.beta  The rate at which the device is rotating about its X axis; that is, front to back. Read only. RotationRate.gamma  The rate at which the device is rotating about its Y axis; that is, side to side. Read only.  Example <coming soon> See also Specification  DeviceOrientation specification Orientation and motion data explained DeviceMotionEvent  DeviceMotionEvent.rotationRate"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/RotationRate.alpha","title":"RotationRate.alpha","description":"Returns the rate of rotation about the Z axis; that is, the rate at which the device is being twisted around the center of the screen. See Orientation and motion data explained for details. Syntax var alpha = motionEvent.rotationRate.alpha;  Example Specification  DeviceOrientation Event Specification  See also  RotationRate  DeviceMotionEvent  Detecting device orientation Orientation and motion data explained window.ondevicemotion"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/RotationRate.beta","title":"RotationRate.beta","description":"Syntax var beta = motionEvent.rotationRate.beta;  Example Specification  DeviceOrientation Event Specification  See also  RotationRate  DeviceMotionEvent  Detecting device orientation Orientation and motion data explained window.ondevicemotion"},{"url":"https:\/\/developer.mozilla.org\/en\/DOM\/RotationRate.gamma","title":"RotationRate.gamma","description":"Syntax var gamma = motionEvent.rotationRate.gamma;  Example Specification  DeviceOrientation Event Specification  See also  RotationRate  DeviceMotionEvent  Detecting device orientation Orientation and motion data explained window.ondevicemotion"}]